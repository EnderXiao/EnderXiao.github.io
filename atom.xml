<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ender</title>
  
  <subtitle>coding never stop</subtitle>
  <link href="http://enderxiao.top/atom.xml" rel="self"/>
  
  <link href="http://enderxiao.top/"/>
  <updated>2021-09-05T03:23:40.951Z</updated>
  <id>http://enderxiao.top/</id>
  
  <author>
    <name>EnderXiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BJUT团组织关系转入</title>
    <link href="http://enderxiao.top/%E7%A1%95%E5%A3%AB%E7%A0%94%E7%A9%B6%E7%94%9F/bjut%E5%9B%A2%E7%BB%84%E7%BB%87%E5%85%B3%E7%B3%BB%E8%BD%AC%E5%85%A5/"/>
    <id>http://enderxiao.top/%E7%A1%95%E5%A3%AB%E7%A0%94%E7%A9%B6%E7%94%9F/bjut%E5%9B%A2%E7%BB%84%E7%BB%87%E5%85%B3%E7%B3%BB%E8%BD%AC%E5%85%A5/</id>
    <published>2021-09-05T02:49:55.000Z</published>
    <updated>2021-09-05T03:23:40.951Z</updated>
    
    <content type="html"><![CDATA[<p>硕士研究生团组织关系转入流程记录</p><a id="more"></a><h2 id="京外团员关系转移"><a href="#京外团员关系转移" class="headerlink" title="京外团员关系转移"></a>京外团员关系转移</h2><ol><li>转出团组织在京外的学生团员，因北京所使用系统与其他省市不同，需新生团员先由“智慧团建”系统申请转入“北京共青团”系统。</li><li>再在 9 日内完成“北京共青团”系统的注册登录。</li><li>新生团支书在“北京共青团”系统上收到转接申请后，应根据本支部人员名单，按照转接规范及时进行审核，确认无误后通过（详细步骤见附件 1）</li></ol><h2 id="京外智慧团建操作流程"><a href="#京外智慧团建操作流程" class="headerlink" title="京外智慧团建操作流程"></a>京外智慧团建操作流程</h2><h3 id="智慧团建"><a href="#智慧团建" class="headerlink" title="智慧团建"></a>智慧团建</h3><p>在指挥团建上进行组织关系转入申请，如需转入<code>北京共青团线上系统</code>，则智慧团建中<code>转入组织属于哪个省</code>处应选择<code>北京</code></p><p>转入组织名称为：<code>中国共产主义青年团北京工业大学信息学部21计算机学硕团支部</code></p><h3 id="北京共青团线上系统"><a href="#北京共青团线上系统" class="headerlink" title="北京共青团线上系统"></a>北京共青团线上系统</h3><p>完成转出申请后，需在<code>9日内</code>完成北京共青团线上系统的注册登陆，并在系统中通过组织审核，成为组织的正式成员。</p><p>操作步骤如下：</p><ol><li>关注北京共青团官方微信公众号<code>青春北京</code>，点击右下方菜单<code>线上系统</code>中的<code>北京共青团系统</code></li><li>点击<code>创建账号</code>进行账号注册</li><li>选择身份</li><li>输入准确姓名和身份证号</li></ol><h2 id="志愿北京注册"><a href="#志愿北京注册" class="headerlink" title="志愿北京注册"></a>志愿北京注册</h2><ol><li>进入<a href="https://www.bv2008.cn/">志愿北京网页</a></li><li>点击左上角<code>志愿者注册</code></li><li>完成注册</li><li>选择服务领域（建议青年志愿者 社区志愿者）</li><li>注册成功后点左上角用户名进入用户中心</li><li>用户中心中选择修改资料部分</li><li>选择身份信息，填写</li><li>可以通过小程序<code>志愿云服务主力</code>辅助完成实名认证</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;硕士研究生团组织关系转入流程记录&lt;/p&gt;</summary>
    
    
    
    <category term="Life" scheme="http://enderxiao.top/categories/Life/"/>
    
    <category term="硕士研究生" scheme="http://enderxiao.top/categories/%E7%A1%95%E5%A3%AB%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
    
    <category term="life" scheme="http://enderxiao.top/tags/life/"/>
    
    <category term="共青团" scheme="http://enderxiao.top/tags/%E5%85%B1%E9%9D%92%E5%9B%A2/"/>
    
    <category term="硕士研究生" scheme="http://enderxiao.top/tags/%E7%A1%95%E5%A3%AB%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup笔记</title>
    <link href="http://enderxiao.top/Python/%E7%88%AC%E8%99%AB/beautifulsoup%E7%AC%94%E8%AE%B0/"/>
    <id>http://enderxiao.top/Python/%E7%88%AC%E8%99%AB/beautifulsoup%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-02T23:35:02.000Z</published>
    <updated>2021-09-05T02:40:43.319Z</updated>
    
    <content type="html"><![CDATA[<p>BeautifulSoup4 学习笔记</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Beautiful Soup是一款可以从HTML以及XML文件中提取数据的python库。</p><p>接下来的实验我们都将以一篇经典的案例为基础：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">#  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">#   <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">#    The Dormouse&#x27;s story</span><br><span class="line">#   <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">#  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">#  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">#   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">#    <span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">#     The Dormouse&#x27;s story</span><br><span class="line">#    <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">#   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">#   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span></span><br><span class="line">#    Once upon a time there were three little sisters; and their names were</span><br><span class="line">#    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/elsie&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span></span><br><span class="line">#     Elsie</span><br><span class="line">#    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">#    ,</span><br><span class="line">#    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/lacie&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link2&quot;</span>&gt;</span></span><br><span class="line">#     Lacie</span><br><span class="line">#    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">#    and</span><br><span class="line">#    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;sister&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com/tillie&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link2&quot;</span>&gt;</span></span><br><span class="line">#     Tillie</span><br><span class="line">#    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">#    ; and they lived at the bottom of a well.</span><br><span class="line">#   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">#   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span></span><br><span class="line">#    ...</span><br><span class="line">#   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">#  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"># <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>想要使用Beautiful Soup解析一段HTML文档，只需要用如下一段代码，得到一个BeautifulSoup对象，即可对改文档进行方便的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frome bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><p>BeautifulSoup对象提供了一些简单的操作，能方便的提取出其中的一些内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">print(soup.prettify())  <span class="comment"># 按照标准缩进格式化输出</span></span><br><span class="line"></span><br><span class="line">print(soup.title)  <span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt; 该操纵会将第一个title标签下的所后代标签</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(soup.title.name)  <span class="comment"># &#x27;title&#x27;</span></span><br><span class="line"></span><br><span class="line">print(soup.title.string)  <span class="comment"># &#x27;The Dormouse&#x27;s story&#x27;</span></span><br><span class="line"></span><br><span class="line">print(soup.title.parent.name)  <span class="comment"># &#x27;head&#x27;</span></span><br><span class="line"></span><br><span class="line">print(soup.p)  <span class="comment"># &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line">print(soup.p[<span class="string">&#x27;class&#x27;</span>])  <span class="comment"># title</span></span><br><span class="line"></span><br><span class="line">print(soup.fund_all(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line">print(soup.get_text())  <span class="comment"># 从文档中获取所有文字内容</span></span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Dormouse&#x27;s story</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="comment"># Elsie,</span></span><br><span class="line"><span class="comment"># Lacie and</span></span><br><span class="line"><span class="comment"># Tillie;</span></span><br><span class="line"><span class="comment"># and they lived at the bottom of a well.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是 <a href="http://lxml.de/">lxml</a> 。</p><p>另一个可供选择的解析器是纯Python实现的 <a href="http://code.google.com/p/html5lib/">html5lib</a> ，html5lib的解析方式与浏览器相同。</p><p>下面是各种解析器的优缺点：</p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python标准库</td><td><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td><td>Python的内置标准库执行速度适中文档容错能力强</td><td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td></tr><tr><td>lxml HTML 解析器</td><td><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td><td>速度快文档容错能力强</td><td>需要安装C语言库</td></tr><tr><td>lxml XML 解析器</td><td><code>BeautifulSoup(markup, [&quot;lxml-xml&quot;])   BeautifulSoup(markup, &quot;xml&quot;)</code></td><td>速度快唯一支持XML的解析器</td><td>需要安装C语言库</td></tr><tr><td>html5lib</td><td><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td><td>最好的容错性以浏览器的方式解析文档生成HTML5格式的文档</td><td>速度慢不依赖外部扩展</td></tr></tbody></table><h2 id="对象的种类"><a href="#对象的种类" class="headerlink" title="对象的种类"></a>对象的种类</h2><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: <code>Tag</code> , <code>NavigableString</code> , <code>BeautifulSoup</code> , <code>Comment</code> .</p><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><p>tag对象与XML或HTML原生文档中的tag相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(<span class="string">&#x27;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&#x27;</span>)</span><br><span class="line">tag = soup.b</span><br><span class="line"><span class="built_in">type</span>(tag)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.element.Tag&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>tag具有非常多的属性和方法，其中比较重要的是name和attributes</p><h4 id="Name"><a href="#Name" class="headerlink" title="Name"></a>Name</h4><p>即该tag对象的标签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(tag.name)  <span class="comment"># b</span></span><br></pre></td></tr></table></figure><p>如果改变了tag的name，将影响所有通过当前BeautifulSoup对象生成的Html文档。</p><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><p>在HTML中，标签往往包含许多属性，而使用BeautifulSoup可以很方便的操作这些属性。在BS4中操作实现和使用python的dict一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag[<span class="string">&#x27;class&#x27;</span>]  <span class="comment"># blodest</span></span><br></pre></td></tr></table></figure><p>也可以直接使用<code>.</code>进行访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag.attrs  <span class="comment"># &#123;&#x27;class&#x27;:&#x27;boldest&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>可见访问<code>tag</code>的<code>attrs</code>将返回一个<code>dict</code></p><p>tag属性可以被添加，删除或是修改，和操作字典的方式相同:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tag[<span class="string">&#x27;class&#x27;</span>] = <span class="string">&#x27;verybold&#x27;</span></span><br><span class="line">tag[<span class="string">&#x27;id&#x27;</span>] = <span class="number">1</span></span><br><span class="line">tag</span><br><span class="line"><span class="comment"># &lt;blockquote class=&quot;verybold&quot; id=&quot;1&quot;&gt;Extremely bold&lt;/blockquote&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> tag[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> tag[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">tag</span><br><span class="line"><span class="comment"># &lt;blockquote&gt;Extremely bold&lt;/blockquote&gt;</span></span><br><span class="line"></span><br><span class="line">tag[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment"># KeyError: &#x27;class&#x27;</span></span><br><span class="line">print(tag.get(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure><h4 id="多值属性"><a href="#多值属性" class="headerlink" title="多值属性"></a>多值属性</h4><p>HTML中允许某一属性有很多值，最典型的就是<code>class</code>属性，还有一些比如<code>rel</code>，<code>rev</code>，<code>accept-charset</code>，<code>headers</code>，<code>accesskey</code>，在BS中，多值属性以<code>list</code>的形式返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">css_soup = BeautifulSoup(<span class="string">&#x27;&lt;p class=&quot;body strikeout&quot;&gt;&lt;/p&gt;&#x27;</span>)</span><br><span class="line">css_soup.p[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment"># [&quot;body&quot;, &quot;strikeout&quot;]</span></span><br><span class="line"></span><br><span class="line">css_soup = BeautifulSoup(<span class="string">&#x27;&lt;p class=&quot;body&quot;&gt;&lt;/p&gt;&#x27;</span>)</span><br><span class="line">css_soup.p[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment"># [&quot;body&quot;]</span></span><br></pre></td></tr></table></figure><p>但对于一些没有被HTML定义为多值的属性，比如<code>id</code>，有时它们的值却看起来像多值，比如一下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_soup = BeautifulSoup(<span class="string">&#x27;&lt;p id = &#x27;</span>my <span class="built_in">id</span><span class="string">&#x27;&gt;&lt;/p&gt;&#x27;</span>)</span><br><span class="line">id_soup.p[<span class="built_in">id</span>]  <span class="comment"># &#x27;my id&#x27;</span></span><br></pre></td></tr></table></figure><p>可见这样的虽然看起来是多值的属性，只要它没有被HTML标准定义为多值属性，结果就会以字符串的形式输出。</p><p>如果将文档解析为<code>XML</code>格式，那么tag中将不包含多值属性，所有属性均以字符串返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xml_soup = BeautifulSoup(<span class="string">&#x27;&lt;p class=&quot;body strikeout&quot;&gt;&lt;/p&gt;&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>)</span><br><span class="line">xml_soup.p[<span class="string">&#x27;class&#x27;</span>]</span><br><span class="line"><span class="comment"># u&#x27;body strikeout&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h3><p>当我们获取tag中包裹的文本时，BS会用一个<code>NavigableString</code>来包装该字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag.string</span><br><span class="line"><span class="comment"># &#x27;Extremely bold&#x27;</span></span><br><span class="line"><span class="built_in">type</span>(tag.string)</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.element.NavigableString&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><code>NavigableString</code>实际上是封装了一些特性的Unicode字符串，通过<code>str()</code>方法可以最直接将<code>navigableString</code>对象转化为Unicode String：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unicode_strinng = unicode(tag.string)</span><br><span class="line">print(unicode_string)  <span class="comment"># Extremely bold</span></span><br><span class="line"><span class="built_in">type</span>(unicode_string)</span><br><span class="line"><span class="comment"># &lt;type &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>此外，tag中通包含的字符串不能编辑，但是可以进行替换，使用<code>replace_with()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tag.string.replace_with(<span class="string">&quot;No longer bold&quot;</span>)</span><br><span class="line">print(tag)</span><br><span class="line"><span class="comment"># &lt;blockquote&gt;No longer bold&lt;/blockquote&gt;</span></span><br></pre></td></tr></table></figure><p>如果想在Beautiful Soup之外使用 <code>NavigableString</code> 对象,需要调用 <code>unicode()</code> 方法,将该对象转换成普通的Unicode字符串,否则就算Beautiful Soup已方法已经执行结束，我们的String对象也会包含一个指向整个BeautifulSoup 解析树的引用。这样会浪费内存.</p><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><p>BeautifulSoup对象代表了整个被解析过的文件，很多时候我们可以将其看作是一个Tag对象。</p><p>我们也能将BeautifulSoup对象传入一些修改解析树的函数，例如我们想合并两个结构文档：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doc = BeautifulSoup(<span class="string">&quot;&lt;head&gt;INSERT FOOTER HERE&lt;/head&gt;&quot;</span>, <span class="string">&quot;xml&quot;</span>)</span><br><span class="line">foot = BeautifulSoup(<span class="string">&quot;&lt;footer&gt;Here is the footer&lt;/footer&gt;&quot;</span>, <span class="string">&quot;xml&quot;</span>)</span><br><span class="line">doc.head.string.replace_with(foot)</span><br><span class="line">print(doc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="comment"># &lt;head&gt;&lt;footer&gt;Here is the footer&lt;/footer&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure><p>而由于<code>BeautifukSoup</code>对象并没有真正的指向某个HTML或XML标签，因此，它并不包含明确的标签名和属性集合，但有时访问它的标签名又是必要的，因此该对象被给与了一个特殊的标签名<code>[document]</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.name</span><br><span class="line"><span class="comment"># [document]</span></span><br><span class="line">soup.attrs</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="comment-和特殊字串"><a href="#comment-和特殊字串" class="headerlink" title="comment 和特殊字串"></a>comment 和特殊字串</h3><p>使用<code>Tag</code>、<code>NavigableString</code>和<code>BeautifulSoup</code>可以涵盖大部分HTML或XML文件中出现的内容，但还有些并不那么经常出现的特殊内容，例如注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">markup = <span class="string">&quot;&lt;b&gt;&lt;!-- Hey, buddy. Want to buy a used parser? --&gt;&lt;/b&gt;&quot;</span></span><br><span class="line">soup = BeautifulSoup(markup, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">comment = soup.b.string</span><br><span class="line">print(<span class="built_in">type</span>(comment))</span><br><span class="line"><span class="comment"># &lt;class &#x27;bs4.element.Comment&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>事实上<code>Comment</code>对象就是一种特殊的<code>NavigableString</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">isinstance</span>(comment, NavigableString))</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>输出格式化后的形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(soup.prettify())</span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment">#  &lt;body&gt;</span></span><br><span class="line"><span class="comment">#   &lt;b&gt;</span></span><br><span class="line"><span class="comment">#    &lt;!-- Hey, buddy. Want to buy a used parser? --&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/b&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p> BeautifulSoup中也定义了一些类：<code>Stylesheet</code>、<code>Script</code>、<code>TemplateString</code>，分别对应了HTML中的<code>&lt;style&gt;</code>标签中的内容，<code>&lt;script&gt;</code>标签中的内容以及<code>&lt;template&gt;</code>标签中的内容。这些类都是<code>NavigableString</code>的子类。做这样的区分是为了更好的找出页面的主要部分。这些类是在BeautifulSoup4.9.0版本新增，html5lib中并不包含这些类。</p><p>而在XML中，还有许多特殊标签，比如<code>CData</code>、<code>ProcessingInstruction</code>、<code>Declaration</code>、<code>Doctype</code>。这些类和<code>Comment</code>一样都是<code>Navigable String</code>的子类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4.element <span class="keyword">import</span> CData</span><br><span class="line">cdata = CData(<span class="string">&quot;A CDATA block&quot;</span>)</span><br><span class="line">comment.replace_with(cdata)</span><br><span class="line"></span><br><span class="line">print(soup.b.prettify())</span><br><span class="line"><span class="comment"># &lt;html&gt;</span></span><br><span class="line"><span class="comment">#  &lt;body&gt;</span></span><br><span class="line"><span class="comment">#   &lt;b&gt;</span></span><br><span class="line"><span class="comment">#    &lt;![CDATA[A CDATA block &lt;]]&gt;</span></span><br><span class="line"><span class="comment">#   &lt;/b&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/body&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h2><p>接下来我们会使用下面的例子进行举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;html.parser&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="向下遍历"><a href="#向下遍历" class="headerlink" title="向下遍历"></a>向下遍历</h3><p>BeautifulSoup为我们提供了很多用于遍历的属性，但<code>NavigableString</code>是无法使用这些属性的，因为它们不包含子节点。</p><h4 id="按标签名遍历"><a href="#按标签名遍历" class="headerlink" title="按标签名遍历"></a>按标签名遍历</h4><p>最简单的遍历方式就是通过标签名遍历，但这种遍历方式只会为你找出当前节点下的第一个同名子节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.a</span><br><span class="line"><span class="comment"># &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>如果想要获得所有同名子标签，那么需要使用<code>find_all</code>函数查找所有标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment">#  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h4 id="contents和children"><a href="#contents和children" class="headerlink" title="contents和children"></a>contents和children</h4><p><code>contents</code>是<code>tag</code>对象所包含的一个<code>list</code>，该属性包含了该标签下的所有<strong>直系</strong>子标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">soup_test = BeautifulSoup(html_doc_test, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">tag = soup_test.body</span><br><span class="line">print(tag.contents)</span><br><span class="line"><span class="comment"># [&#x27;\n&#x27;, &lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;, &#x27;\n&#x27;, &lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="comment"># and they lived at the bottom of a well.&lt;/p&gt;, &#x27;\n&#x27;, &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;, &#x27;\n&#x27;]</span></span><br><span class="line"></span><br><span class="line">print(tag.contents[<span class="number">1</span>].contents[<span class="number">0</span>].contents)</span><br><span class="line"><span class="comment"># [&quot;The Dormouse&#x27;s story&quot;]</span></span><br></pre></td></tr></table></figure><p>BeautifulSoup对象本身也包含子节点，我们认为BeautifulSoup对象只包含一个<code>&lt;html&gt;</code>子标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup_test.contents)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;BeautifulSoup4 学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    <category term="爬虫" scheme="http://enderxiao.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="http://enderxiao.top/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="bs4" scheme="http://enderxiao.top/tags/bs4/"/>
    
  </entry>
  
  <entry>
    <title>xpath笔记</title>
    <link href="http://enderxiao.top/xpath/xpath%E7%AC%94%E8%AE%B0/"/>
    <id>http://enderxiao.top/xpath/xpath%E7%AC%94%E8%AE%B0/</id>
    <published>2021-09-02T03:02:14.000Z</published>
    <updated>2021-09-02T07:15:05.781Z</updated>
    
    <content type="html"><![CDATA[<p>xpath学习笔记</p><a id="more"></a><h2 id="xpath简介"><a href="#xpath简介" class="headerlink" title="xpath简介"></a>xpath简介</h2><h3 id="什么是-XPath"><a href="#什么是-XPath" class="headerlink" title="什么是 XPath?"></a>什么是 XPath?</h3><ul><li>XPath 使用<strong>路径表达</strong>式在 XML 文档中进行导航</li><li>XPath 包含一个标准函数库</li><li>XPath 是 XSLT 中的主要元素</li><li>XPath 是一个 W3C 标准</li></ul><h2 id="Xpath-节点"><a href="#Xpath-节点" class="headerlink" title="Xpath 节点"></a>Xpath 节点</h2><h3 id="节点（Node"><a href="#节点（Node" class="headerlink" title="节点（Node)"></a>节点（Node)</h3><p>Xpath中共7种节点：</p><ol><li>元素</li><li>属性</li><li>文本</li><li>命名空间</li><li>处理指令</li><li>注释</li><li>文档（根）节点</li></ol><p>XML文档被作为节点树对待，树的根被成为文档（根）节点</p><p>例如如下XML文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的XML文档中的节点例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span> （文档节点）</span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span> （元素节点）</span><br><span class="line">lang=&quot;en&quot; （属性节点） </span><br></pre></td></tr></table></figure><h3 id="基本值（Atomic-Value）"><a href="#基本值（Atomic-Value）" class="headerlink" title="基本值（Atomic Value）"></a>基本值（Atomic Value）</h3><p>也可成为原子值，即无父或无子的节点，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">J K. Rowling</span><br><span class="line">&quot;en&quot;</span><br></pre></td></tr></table></figure><h3 id="项目（Item）"><a href="#项目（Item）" class="headerlink" title="项目（Item）"></a>项目（Item）</h3><p>项目是基本值或者节点</p><h3 id="双亲（Parent）"><a href="#双亲（Parent）" class="headerlink" title="双亲（Parent）"></a>双亲（Parent）</h3><p>每个元素以及属性都有一个双亲</p><p>如例中的<code>book</code>是<code>title</code>、<code>author</code>、<code>year</code>以及<code>price</code>的双亲</p><h3 id="子（Children）"><a href="#子（Children）" class="headerlink" title="子（Children）"></a>子（Children）</h3><p>元素节点可能有0，1或多个子</p><p>如例中的<code>title</code>、<code>author</code>、<code>year</code>、<code>price</code>元素均为<code>book</code>的子</p><h3 id="同胞（Sibling）"><a href="#同胞（Sibling）" class="headerlink" title="同胞（Sibling）"></a>同胞（Sibling）</h3><p>拥有相同双亲节点的元素节点</p><p>如例中，<code>title</code>、<code>author</code>、<code>year</code> 以及 <code>price</code> 元素都是同胞</p><h3 id="先辈（Ancestor）"><a href="#先辈（Ancestor）" class="headerlink" title="先辈（Ancestor）"></a>先辈（Ancestor）</h3><p>某节点的双亲、双亲的双亲，等等。</p><p>如例中，title 元素的先辈是 book 元素和 bookstore 元素</p><h3 id="后代（Descendant）"><a href="#后代（Descendant）" class="headerlink" title="后代（Descendant）"></a>后代（Descendant）</h3><p>某个节点的子，子的子，等等。</p><p>如例中，<code>bookstore </code>的后代是 <code>book</code>、<code>title</code>、<code>author</code>、<code>year</code> 以及<code> price</code> 元素</p><h2 id="Xpath语法"><a href="#Xpath语法" class="headerlink" title="Xpath语法"></a>Xpath语法</h2><h3 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h3><p>XPath使用路径表达式在XML文档中匹配节点：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点。</td></tr><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><p>例如：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性。</td></tr></tbody></table><h3 id="谓语（Predicates）"><a href="#谓语（Predicates）" class="headerlink" title="谓语（Predicates）"></a>谓语（Predicates）</h3><p>用来查找某个特定的节点或包含某个特定的值的节点，使用方括号将其包裹。</p><p>例如：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h3 id="选取未知节点"><a href="#选取未知节点" class="headerlink" title="选取未知节点"></a>选取未知节点</h3><p>xpath通配符，用来选取位置的XML元素</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任何元素节点。</td></tr><tr><td align="left">@*</td><td align="left">匹配任何属性节点。</td></tr><tr><td align="left">node()</td><td align="left">匹配任何类型的节点。</td></tr></tbody></table><p>例如：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/bookstore/*</td><td align="left">选取 bookstore 元素的所有子元素。</td></tr><tr><td align="left">//*</td><td align="left">选取文档中的所有元素。</td></tr><tr><td align="left">//title[@*]</td><td align="left">选取所有带有属性的 title 元素。</td></tr></tbody></table><h3 id="选取若干路径"><a href="#选取若干路径" class="headerlink" title="选取若干路径"></a>选取若干路径</h3><p>进行多路径选择时，使用“|”分科即可</p><p>例如：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">//book/title | //book/price</td><td align="left">选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td align="left">//title | //price</td><td align="left">选取文档中的所有 title 和 price 元素。</td></tr><tr><td align="left">/bookstore/book/title | //price</td><td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table><h2 id="XPath轴（Axes）"><a href="#XPath轴（Axes）" class="headerlink" title="XPath轴（Axes）"></a>XPath轴（Axes）</h2><h3 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h3><p>轴可定位为相对于当前节点的节点集：</p><table><thead><tr><th align="left">轴名称</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">ancestor</td><td align="left">选取当前节点的所有先辈（父、祖父等）。</td></tr><tr><td align="left">ancestor-or-self</td><td align="left">选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr><tr><td align="left">attribute</td><td align="left">选取当前节点的所有属性。</td></tr><tr><td align="left">child</td><td align="left">选取当前节点的所有子元素。</td></tr><tr><td align="left">descendant</td><td align="left">选取当前节点的所有后代元素（子、孙等）。</td></tr><tr><td align="left">descendant-or-self</td><td align="left">选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr><tr><td align="left">following</td><td align="left">选取文档中当前节点的结束标签之后的所有节点。</td></tr><tr><td align="left">namespace</td><td align="left">选取当前节点的所有命名空间节点。</td></tr><tr><td align="left">parent</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">preceding</td><td align="left">选取文档中当前节点的开始标签之前的所有节点。</td></tr><tr><td align="left">preceding-sibling</td><td align="left">选取当前节点之前的所有同级节点。</td></tr><tr><td align="left">self</td><td align="left">选取当前节点。</td></tr></tbody></table><h3 id="位置路径表达式"><a href="#位置路径表达式" class="headerlink" title="位置路径表达式"></a>位置路径表达式</h3><p>位置路径可以绝对的，也可以是相对的。</p><p>绝对路径一定其实于/，而相对路径则不会。</p><p>位置路径包括一个或多个步，每个步被斜杠划分开：</p><p>绝对位置路径：</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/step/step/...</span><br></pre></td></tr></table></figure><p>相对位置路径：</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">step/step/...</span><br></pre></td></tr></table></figure><p>在相对路径中，每个步均根据当前节点集之中的节点来进行计算。</p><h3 id="步（step）"><a href="#步（step）" class="headerlink" title="步（step）"></a>步（step）</h3><p>步可以是：</p><ol><li>轴（axis）——定义所选节点与当前节点之间的树关系</li><li>节点测试（node-test）——识别某个轴内部的节点</li><li>零个或者更多谓词（predicate）——更深入地提炼所选的节点集</li></ol><p>由此可推导出步的语法：</p><figure class="highlight xpath"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">轴名称::节点测试[谓词]</span><br></pre></td></tr></table></figure><p>例如：</p><table><thead><tr><th align="left">例子</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">child::book</td><td align="left">选取所有属于当前节点的子元素的 book 节点。</td></tr><tr><td align="left">attribute::lang</td><td align="left">选取当前节点的 lang 属性。</td></tr><tr><td align="left">child::*</td><td align="left">选取当前节点的所有子元素。</td></tr><tr><td align="left">attribute::*</td><td align="left">选取当前节点的所有属性。</td></tr><tr><td align="left">child::text()</td><td align="left">选取当前节点的所有文本子节点。</td></tr><tr><td align="left">child::node()</td><td align="left">选取当前节点的所有子节点。</td></tr><tr><td align="left">descendant::book</td><td align="left">选取当前节点的所有 book 后代。</td></tr><tr><td align="left">ancestor::book</td><td align="left">选择当前节点的所有 book 先辈。</td></tr><tr><td align="left">ancestor-or-self::book</td><td align="left">选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td></tr><tr><td align="left">child::*/child::price</td><td align="left">选取当前节点的所有 price 孙节点。</td></tr></tbody></table><h2 id="XPath-运算符"><a href="#XPath-运算符" class="headerlink" title="XPath 运算符"></a>XPath 运算符</h2><p>Xpath表达式可返回节点集，字符串、逻辑值，以及数字。这些返回子也可以进行一些运算，例如：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">|</td><td align="left">计算两个节点集</td><td align="left">//book | //cd</td><td align="left">返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td align="left">+</td><td align="left">加法</td><td align="left">6 + 4</td><td align="left">10</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left">6 - 4</td><td align="left">2</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left">6 * 4</td><td align="left">24</td></tr><tr><td align="left">div</td><td align="left">除法</td><td align="left">8 div 4</td><td align="left">2</td></tr><tr><td align="left">=</td><td align="left">等于</td><td align="left">price=9.80</td><td align="left">如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">!=</td><td align="left">不等于</td><td align="left">price!=9.80</td><td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td><td align="left">price&lt;9.80</td><td align="left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td><td align="left">price&lt;=9.80</td><td align="left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td><td align="left">price&gt;9.80</td><td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td><td align="left">price&gt;=9.80</td><td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr><tr><td align="left">or</td><td align="left">或</td><td align="left">price=9.80 or price=9.70</td><td align="left">如果 price 是 9.80或9.70，则返回 true。如果 price 是 9.50，则返回 false。</td></tr><tr><td align="left">and</td><td align="left">与</td><td align="left">price&gt;9.00 and price&lt;9.90</td><td align="left">如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr><tr><td align="left">mod</td><td align="left">计算除法的余数</td><td align="left">5 mod 2</td><td align="left">1</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;xpath学习笔记&lt;/p&gt;</summary>
    
    
    
    <category term="xpath" scheme="http://enderxiao.top/categories/xpath/"/>
    
    
    <category term="爬虫" scheme="http://enderxiao.top/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="xpath" scheme="http://enderxiao.top/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>python进阶-常用内建库</title>
    <link href="http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-%E5%B8%B8%E7%94%A8%E5%86%85%E5%BB%BA%E5%BA%93/"/>
    <id>http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-%E5%B8%B8%E7%94%A8%E5%86%85%E5%BB%BA%E5%BA%93/</id>
    <published>2021-08-17T00:54:48.000Z</published>
    <updated>2021-08-27T14:55:27.897Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记，常用内建库</p><div class='checkbox'><input type="radio" />            <p>datetime</p>            </div><div class='checkbox'><input type="radio" />            <p>collection</p>            </div><div class='checkbox'><input type="radio" />            <p>base64</p>            </div><div class='checkbox'><input type="radio" />            <p>struct</p>            </div><div class='checkbox'><input type="radio" />            <p>hashlib</p>            </div><div class='checkbox'><input type="radio" />            <p>itertolls</p>            </div><div class='checkbox'><input type="radio" />            <p>contexlib</p>            </div><div class='checkbox'><input type="radio" />            <p>urllib</p>            </div><div class='checkbox'><input type="radio" />            <p>xml</p>            </div><div class='checkbox'><input type="radio" />            <p>htmlparser</p>            </div><a id="more"></a><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p>datetime是Python处理日期和时间的标准库。</p><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now = datetime.now()  <span class="comment"># 获取当前时间</span></span><br><span class="line">print(now)  <span class="comment"># 2021-08-17 09:10:59.819930</span></span><br><span class="line">print(<span class="built_in">type</span>(now))  <span class="comment"># &lt;class &#x27;datetime.datetime&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><code>datetime</code>模块中包含一个<code>datetime</code>类，<code>now()</code>是<code>datetime</code>类中的一个方法。<code>datetime.now()</code>返回的是一个<code>datetime</code>类。</p><h3 id="获取指定日期与时间"><a href="#获取指定日期与时间" class="headerlink" title="获取指定日期与时间"></a>获取指定日期与时间</h3><p>直接使用参数构造一个<code>datetime</code>对象即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>)  <span class="comment"># 用指定日期时间创建datetime</span></span><br><span class="line">print(dt)  <span class="comment"># 2015-04-19 12:20:00</span></span><br></pre></td></tr></table></figure><h3 id="datetime转换为timestamp"><a href="#datetime转换为timestamp" class="headerlink" title="datetime转换为timestamp"></a>datetime转换为timestamp</h3><div class="note ::`timestamp`时间戳"><p>时间戳是指格林威治时间1970年01月01日00时00分00秒起至当下的总秒数。通俗的讲， 时间戳是一份能够表示一份数据在一个特定时间点已经存在的完整的可验证的数据。 它的提出主要是为用户提供一份电子证据， 以证明用户的某些数据的产生时间。</p><p>1970年1月1日 00:00:00 UTC+00:00时区的时刻称为epoch time，记为<code>0</code>（1970年以前的时间timestamp为负数）</p></div><p>即对数据产生的时间进行一个唯一认证，不可更改。</p><p>则北京时间的1970年01月01日00时00分00秒为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1970-1-1 08:00:00 UTC+8:00</span><br></pre></td></tr></table></figure><p>可见timestamp的值与时区毫无关系，因为timestamp一旦确定，其UTC时间就确定了，转换到任意时区的时间也是完全确定的，这就是为什么计算机存储的当前时间是以timestamp表示的，全球各地的计算机在任意时刻的timestamp都是完全相同的（假定时间已校准）。</p><p>转换的方式只需要调用<code>timestamp()</code>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dt = datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>)  <span class="comment"># 用指定日期时间创建datetime</span></span><br><span class="line">dt.timestamp()  <span class="comment"># 把datetime转换为timestamp</span></span><br><span class="line"><span class="comment"># 1429417200.0</span></span><br></pre></td></tr></table></figure><p><code>timestamp</code>是一个浮点数，整数位表示秒。</p><p>某些编程语言（如Java和JavaScript）的<code>timestamp</code>使用整数表示毫秒数，这种情况下只需要把<code>timestamp</code>除以1000就得到Python的浮点表示方法。</p><h3 id="timestamp转换为datetime"><a href="#timestamp转换为datetime" class="headerlink" title="timestamp转换为datetime"></a>timestamp转换为datetime</h3><p>要把<code>timestamp</code>转换为<code>datetime</code>，使用<code>datetime</code>提供的<code>fromtimestamp()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = <span class="number">1429417200.0</span></span><br><span class="line">print(datetime.fromtimestamp(t))  <span class="comment"># 2015-04-19 12:20:00</span></span><br></pre></td></tr></table></figure><p><code>timestamp</code>是没有时区的，而<code>datetime</code>是有市区的，使用<code>fromtimestamp()</code>方法转换后的时间是按照系统设置的当地时区进行转化的，同样也支持转化到UTC标准市区，即UTC+0:00：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = <span class="number">1429417200.0</span></span><br><span class="line">print(datetime.fromtimestamp(t)) <span class="comment"># 本地时间</span></span><br><span class="line"><span class="comment"># 2015-04-19 12:20:00</span></span><br><span class="line">print(datetime.utcfromtimestamp(t)) <span class="comment"># UTC时间</span></span><br><span class="line"><span class="comment"># 2015-04-19 04:20:00</span></span><br></pre></td></tr></table></figure><h3 id="str转datetime"><a href="#str转datetime" class="headerlink" title="str转datetime"></a>str转datetime</h3><p>从前端传送的时间大多是<code>String</code>格式的时间，要处理日期和时间，首先必须把str转换为datetime。转换方法是通过<code>datetime.strptime()</code>实现，需要一个日期和时间的格式化字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cday = datetime.strptime(<span class="string">&#x27;2015-6-1 18:19:59&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">print(cday)  <span class="comment"># 2015-06-01 18:19:59</span></span><br></pre></td></tr></table></figure><p>字符串<code>&#39;%Y-%m-%d %H:%M:%S&#39;</code>规定了日期和时间部分的格式。详细的说明请参考：</p><div class="tag link"><a class="link-card" title="python文档" href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">python文档</p><p class="url">https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior</p></div></a></div><p>注意转换后的datetime是没有时区信息的。</p><h3 id="datetime转换为str"><a href="#datetime转换为str" class="headerlink" title="datetime转换为str"></a>datetime转换为str</h3><p>如果已经有了datetime对象，要把它格式化为字符串显示给用户，就需要转换为str，转换方法是通过<code>strftime()</code>实现的，同样需要一个日期和时间的格式化字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line">print(now.strftime(<span class="string">&#x27;%a, %b %d %H:%M&#x27;</span>))  <span class="comment"># Tue, Aug 17 09:10</span></span><br></pre></td></tr></table></figure><h3 id="datetime加减"><a href="#datetime加减" class="headerlink" title="datetime加减"></a>datetime加减</h3><p>对日期和时间进行加减实际上就是把datetime往后或往前计算，得到新的datetime。加减可以直接用<code>+</code>和<code>-</code>运算符，不过需要导入<code>timedelta</code>这个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">8</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">797823</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(hours = <span class="number">10</span>)</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">8</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">797823</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now - timedelta(days = <span class="number">1</span>)</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">797823</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + timedelta(days = <span class="number">2</span>, hours = <span class="number">12</span>)</span><br><span class="line">datetime.datetime(<span class="number">2021</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">27</span>, <span class="number">797823</span>)</span><br></pre></td></tr></table></figure><p>可见，使用<code>timedelta</code>你可以很容易地算出前几天和后几天的时刻。</p><h3 id="本地时间转换为UTC时间"><a href="#本地时间转换为UTC时间" class="headerlink" title="本地时间转换为UTC时间"></a>本地时间转换为UTC时间</h3><p>本地时间是指系统设定时区的时间，例如北京时间是UTC+8:00时区的时间，而UTC时间指UTC+0:00时区的时间。</p><p>一个<code>datetime</code>类型有一个时区属性<code>tzinfo</code>，但是默认为<code>None</code>，所以无法区分这个<code>datetime</code>到底是哪个时区，除非强行给<code>datetime</code>设置一个时区，该参数需要接收一个<code>timezone</code>类型的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tz_utc_8 = timezone(timedelta(hours=<span class="number">8</span>)) <span class="comment"># 创建时区UTC+8:00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">871012</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt = now.replace(tzinfo=tz_utc_8) <span class="comment"># 强制设置为UTC+8:00</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt</span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">871012</span>, tzinfo=datetime.timezone(datetime.timedelta(<span class="number">0</span>, <span class="number">28800</span>)))</span><br></pre></td></tr></table></figure><p>如果系统时区恰好是UTC+8:00，那么上述代码就是正确的，否则，不能强制设置为UTC+8:00时区。</p><h3 id="时区转换"><a href="#时区转换" class="headerlink" title="时区转换"></a>时区转换</h3><p>我们可以先通过<code>utcnow()</code>拿到当前的UTC时间，再转换为任意时区的时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到UTC时间，并强制设置时区为UTC+0:00:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(utc_dt)</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">17</span> 02:<span class="number">34</span>:<span class="number">19.972780</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="comment"># astimezone()将转换时区为北京时间:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bj_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">8</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(bj_dt)</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">17</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">19.972780</span>+08:<span class="number">00</span></span><br><span class="line"><span class="comment"># astimezone()将转换时区为东京时间:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokyo_dt = utc_dt.astimezone(timezone(timedelta(hours=<span class="number">9</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tokyo_dt)</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">17</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">19.972780</span>+09:<span class="number">00</span></span><br><span class="line"><span class="comment"># astimezone()将bj_dt转换时区为东京时间:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokyo_dt2 = bj_dt.astimezone(timezone(timedelta(hours=<span class="number">9</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(tokyo_dt2)</span><br><span class="line"><span class="number">2021</span>-08-<span class="number">17</span> <span class="number">11</span>:<span class="number">34</span>:<span class="number">19.972780</span>+09:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>时区转换的关键在于，拿到一个<code>datetime</code>时，要获知其正确的时区，然后强制设置时区，作为基准时间。</p><p>利用带时区的<code>datetime</code>，通过<code>astimezone()</code>方法，可以转换到任意时区。</p><p>注：不是必须从UTC+0:00时区转换到其他时区，任何带时区的<code>datetime</code>都可以正确转换，例如上述<code>bj_dt</code>到<code>tokyo_dt</code>的转换。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>例如假设你获取了用户输入的日期和时间如<code>2015-1-21 9:01:30</code>，以及一个时区信息如<code>UTC+5:00</code>，均是<code>str</code>，请编写一个函数将其转换为timestamp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span>(<span class="params">dt_str, tz_str</span>):</span></span><br><span class="line">    timeNow = datetime.strptime(dt_str, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    tz = re.match(<span class="string">r&#x27;UTC(\+|\-)0?(\d&#123;1,2&#125;):00&#x27;</span>, tz_str)</span><br><span class="line">    tz = <span class="built_in">int</span>((<span class="built_in">str</span>(tz[<span class="number">1</span>])+<span class="built_in">str</span>(tz[<span class="number">2</span>])))</span><br><span class="line">    dt = timeNow.replace(tzinfo=timezone(timedelta(hours=tz)))</span><br><span class="line">    <span class="keyword">return</span> dt.timestamp()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">t1 = to_timestamp(<span class="string">&#x27;2015-6-1 08:10:30&#x27;</span>, <span class="string">&#x27;UTC+7:00&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> t1 == <span class="number">1433121030.0</span>, t1</span><br><span class="line"></span><br><span class="line">t2 = to_timestamp(<span class="string">&#x27;2015-5-31 16:10:30&#x27;</span>, <span class="string">&#x27;UTC-09:00&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> t2 == <span class="number">1433121030.0</span>, t2</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><p>collections是Python内建的一个集合模块，提供了许多有用的集合类。</p><h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p><code>tuple</code>可以表示不变集合，比如二位坐标</p><p>而<code>namedtuple</code>则允许我们为<code>tuple</code>设置一个名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>namedtuple</code>是一个函数，它用来创建一个自定义的<code>tuple</code>对象，并且规定了<code>tuple</code>元素的个数，并可以用属性而不是索引来引用<code>tuple</code>的某个元素。</p><p>可以验证<code>namedtuple</code>是<code>tuple</code>的子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(p, Point)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(p, <span class="built_in">tuple</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>python中<code>list</code>为线性表，在访问时速度很快，但在插入和删除时速度比较慢</p><p>python中提供了一种<code>deque</code>双向链表，能够实现搞笑的插入和删除，适用于栈和队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;x&#x27;</span>])</span><br></pre></td></tr></table></figure><p>对尾部进行增删时可使用<code>append()</code>和<code>pop()</code>方法，而对头部进行增删时则可使用<code>appendleft()</code>和<code>popleft()</code>方法</p><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p><code>defaultdict</code>在<code>dict</code>的基础上，当发生<code>keyerror</code>异常时，允许设置自定义返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">&#x27;key1&#x27;</span>] = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">&#x27;key1&#x27;</span>] <span class="comment"># key1存在</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">&#x27;key2&#x27;</span>] <span class="comment"># key2不存在，返回默认值</span></span><br><span class="line"><span class="string">&#x27;N/A&#x27;</span></span><br></pre></td></tr></table></figure><p>注意默认值是调用函数返回的，而函数在创建<code>defaultdict</code>对象时传入。</p><p>除了在Key不存在时返回默认值，<code>defaultdict</code>的其他行为跟<code>dict</code>是完全一样的。</p><h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>普通的<code>dict</code>中，key时无序的，迭代<code>dict</code>时无法确定key的顺序，如果需要保持则需要使用<code>OrderedDict</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d <span class="comment"># dict的Key是无序的</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>od = OrderedDict([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>od <span class="comment"># OrderedDict的Key是有序的</span></span><br><span class="line">OrderedDict([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)])</span><br></pre></td></tr></table></figure><p><code>OrderedDict</code>的Key会按照插入的顺序排列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>od = OrderedDict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>od[<span class="string">&#x27;z&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>od[<span class="string">&#x27;y&#x27;</span>] = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>od[<span class="string">&#x27;x&#x27;</span>] = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(od.keys()) <span class="comment"># 按照插入的Key的顺序返回</span></span><br><span class="line">[<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;x&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>rderedDict</code>可以实现一个FIFO（先进先出）的dict，当容量超出限制时，先删除最早添加的key：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastUpdatedOrderedDict</span>(<span class="params">OrderedDict</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(LastUpdatedOrderedDict, self).__init__()</span><br><span class="line">        self._capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        containsKey = <span class="number">1</span> <span class="keyword">if</span> key <span class="keyword">in</span> self <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self) - containsKey &gt;= self._capacity:</span><br><span class="line">            last = self.popitem(last=<span class="literal">False</span>)</span><br><span class="line">            print(<span class="string">&#x27;remove:&#x27;</span>, last)</span><br><span class="line">        <span class="keyword">if</span> containsKey:</span><br><span class="line">            <span class="keyword">del</span> self[key]</span><br><span class="line">            print(<span class="string">&#x27;set:&#x27;</span>, (key, value))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;add:&#x27;</span>, (key, value))</span><br><span class="line">        OrderedDict.__setitem__(self, key, value)</span><br></pre></td></tr></table></figure><h3 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h3><p><code>ChainMap</code>可以把一组<code>dict</code>串起来并组成一个逻辑上的<code>dict</code>。<code>ChainMap</code>本身也是一个dict，但是查找的时候，会按照顺序在内部的dict依次查找。</p><p><code>ChainMap</code>可以用于实现参数的优先级查找，例如：应用程序往往都需要传入参数，参数可以通过命令行传入，可以通过环境变量传入，还可以有默认参数。我们可以用<code>ChainMap</code>实现参数的优先级查找，即先查命令行参数，如果没有传入，再查环境变量，如果没有，就使用默认参数。</p><p>举例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line"><span class="keyword">import</span> os, argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造缺省参数:</span></span><br><span class="line">defaults = &#123;</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造命令行参数:</span></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--user&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;--color&#x27;</span>)</span><br><span class="line">namespace = parser.parse_args()</span><br><span class="line">command_line_args = &#123; k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">vars</span>(namespace).items() <span class="keyword">if</span> v &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合成ChainMap:</span></span><br><span class="line">combined = ChainMap(command_line_args, os.environ, defaults)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印参数:</span></span><br><span class="line">print(<span class="string">&#x27;color=%s&#x27;</span> % combined[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line">print(<span class="string">&#x27;user=%s&#x27;</span> % combined[<span class="string">&#x27;user&#x27;</span>])</span><br></pre></td></tr></table></figure><p>没有任何参数时，打印出默认参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 use_chainmap.py </span><br><span class="line">color=red</span><br><span class="line">user=guest</span><br></pre></td></tr></table></figure><p>当传入命令行参数时，优先使用命令行参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 use_chainmap.py -u bob</span><br><span class="line">color=red</span><br><span class="line">user=bob</span><br></pre></td></tr></table></figure><p>同时传入命令行参数和环境变量，命令行参数的优先级较高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ user=admin color=green python3 use_chainmap.py -u bob</span><br><span class="line">color=green</span><br><span class="line">user=bob</span><br></pre></td></tr></table></figure><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p><code>Counter</code>是一个简单的计数器，例如，统计字符出现的个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> ch <span class="keyword">in</span> <span class="string">&#x27;programming&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>    c[ch] = c[ch] + <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;g&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.update(<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 也可以一次性update</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;r&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p><code>Counter</code>实际上也是<code>dict</code>的一个子类，上面的结果可以看出每个字符出现的次数。</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64是一种用64个字符来表示任意二进制数据的方法。</p><p>通常用记事本打开<code>exe</code>、<code>jpg</code>、<code>pdf</code>等文件会看到一些乱码，这是因为二进制文件包含很多无法显示和打印的字符，如果需要让文本处理软件能够处理二进制数据，就需要一个二进制转字符串的方法，<code>Base64</code>就是一种最常见的二进制编码方法</p><h3 id="Base64原理"><a href="#Base64原理" class="headerlink" title="Base64原理"></a>Base64原理</h3><p>Base64的原理很简单，首先，准备一个包含64个字符的数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, ... <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, ... <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, ... <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]</span><br></pre></td></tr></table></figure><p>然后，对二进制数据进行处理，每3个字节一组，一共是<code>3x8=24</code>bit，划为4组，每组正好6个bit：</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/19/f7bcut.png" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/19/f7bcut.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="base64-encode"></p>            </div><p>这样我们得到4个数字作为索引，然后查表，获得相应的4个字符，就是编码后的字符串。</p><p>所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。</p><p>原本长为$3 \times 8 = 24$​bit的二进制序列，重新划分为4组，则每组6bit，则每组需要增加2bit来构成一个新的字节，则增长$2 \times 4 = 8$​bit，则增长$8/24 *100% = 33.3333%$​</p><p>如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用<code>\x00</code>字节在末尾补足后，再在编码的末尾加上1个或2个<code>=</code>号，表示补了多少字节，解码的时候，会自动去掉。</p><h3 id="Base64使用"><a href="#Base64使用" class="headerlink" title="Base64使用"></a>Base64使用</h3><p>Python内置的<code>base64</code>可以直接进行base64的编解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">b&#x27;binary\x00string&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;YmluYXJ5AHN0cmluZw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64decode(<span class="string">b&#x27;YmluYXJ5AHN0cmluZw==&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;binary\x00string&#x27;</span></span><br></pre></td></tr></table></figure><p>由于标准的Base64编码后可能出现字符<code>+</code>和<code>/</code>，在URL中就不能直接作为参数，所以又有一种”url safe”的base64编码，其实就是把字符<code>+</code>和<code>/</code>分别变成<code>-</code>和<code>_</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">b&#x27;i\xb7\x1d\xfb\xef\xff&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;abcd++//&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.urlsafe_b64encode(<span class="string">b&#x27;i\xb7\x1d\xfb\xef\xff&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;abcd--__&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.urlsafe_b64decode(<span class="string">&#x27;abcd--__&#x27;</span>)</span><br><span class="line"><span class="string">b&#x27;i\xb7\x1d\xfb\xef\xff&#x27;</span></span><br></pre></td></tr></table></figure><p>还可以自己定义64个字符的排列顺序，这样就可以自定义Base64编码，不过，通常情况下完全没有必要。</p><p>Base64是一种通过查表的编码方法，不能用于加密，即使使用自定义的编码表也不行。</p><p>Base64适用于小段内容的编码，比如数字证书签名、Cookie的内容等。</p><p>由于<code>=</code>字符也可能出现在Base64编码中，但<code>=</code>用在URL、Cookie里面会造成歧义，所以，很多Base64编码后会把<code>=</code>去掉：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准Base64:</span></span><br><span class="line">&#x27;abcd&#x27; -&gt; &#x27;YWJjZA==&#x27;</span><br><span class="line"><span class="comment"># 自动去掉=:</span></span><br><span class="line">&#x27;abcd&#x27; -&gt; &#x27;YWJjZA&#x27;</span><br></pre></td></tr></table></figure><p>去掉<code>=</code>后怎么解码呢？因为Base64是把3个字节变为4个字节，所以，Base64编码的长度永远是4的倍数，因此，需要加上<code>=</code>把Base64字符串的长度变为4的倍数，就可以正常解码了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_base64_decode</span>(<span class="params">s</span>):</span>  <span class="comment"># 拿到去掉=后的base64字符串后，为其自动补充=</span></span><br><span class="line">    l = <span class="built_in">len</span>(s)</span><br><span class="line">    n = <span class="number">4</span> - l%<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            s += <span class="string">&#x27;=&#x27;</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">    print(s)</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;abcd&#x27;</span> == safe_base64_decode(<span class="string">&#x27;YWJjZA==&#x27;</span>), safe_base64_decode(<span class="string">&#x27;YWJjZA==&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;abcd&#x27;</span> == safe_base64_decode(<span class="string">&#x27;YWJjZA&#x27;</span>), safe_base64_decode(<span class="string">&#x27;YWJjZA&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Base64是一种任意二进制到文本字符串的编码方法，常用于在URL、Cookie、网页中传输少量二进制数据。</p><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>准确地讲，Python没有专门处理字节的数据类型。但由于<code>b&#39;str&#39;</code>可以表示字节，所以，字节数组＝二进制str。而在C语言中，我们可以很方便地用struct、union来处理字节，以及字节和int，float的转换。</p><p>在Python中，比方说要把一个32位无符号整数变成字节，也就是4个长度的<code>bytes</code>，你得配合位运算符这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">10240099</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b1 = (n &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b2 = (n &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b3 = (n &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b4 = n &amp; <span class="number">0xff</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bs = <span class="built_in">bytes</span>([b1, b2, b3, b4])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bs</span><br><span class="line"><span class="string">b&#x27;\x00\x9c@c&#x27;</span></span><br></pre></td></tr></table></figure><p>非常麻烦。如果换成浮点数就无能为力了。</p><p>好在Python提供了一个<code>struct</code>模块来解决<code>bytes</code>和其他二进制数据类型的转换。</p><p><code>struct</code>的<code>pack</code>函数把任意数据类型变成<code>bytes</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="number">10240099</span>)</span><br><span class="line"><span class="string">b&#x27;\x00\x9c@c&#x27;</span></span><br></pre></td></tr></table></figure><p><code>pack</code>的第一个参数是处理指令，<code>&#39;&gt;I&#39;</code>的意思是：</p><p><code>&gt;</code>表示字节顺序是big-endian，也就是网络序（大端），<code>I</code>表示4字节无符号整数。</p><p>下面我们复习一下内存中的两种存储顺序</p><h3 id="字节顺序"><a href="#字节顺序" class="headerlink" title="字节顺序"></a>字节顺序</h3><ul><li>big-endian：字节存储方式为大端在末尾，即顺序存储，第一个字节存储在开头位置，如 01234567，存储为 01 23 45 67（<strong>即权重高的位在前</strong>）</li><li>little-endian：字节存储方式为小端在末尾，即逆序存储，第一个字节存储在末尾位置，如 01234567，存储为 67 45 23 01（<strong>即权重低的位在前</strong>）</li></ul><h3 id="struct应用"><a href="#struct应用" class="headerlink" title="struct应用"></a>struct应用</h3><p>后面的参数个数要和处理指令一致。</p><p><code>unpack</code>把<code>bytes</code>变成相应的数据类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">&#x27;&gt;IH&#x27;</span>, <span class="string">b&#x27;\xf0\xf0\xf0\xf0\x80\x80&#x27;</span>)</span><br><span class="line">(<span class="number">4042322160</span>, <span class="number">32896</span>)</span><br></pre></td></tr></table></figure><p>根据<code>&gt;IH</code>的说明，后面的<code>bytes</code>依次变为<code>I</code>：4字节无符号整数和<code>H</code>：2字节无符号整数。</p><p>所以，尽管Python不适合编写底层操作字节流的代码，但在对性能要求不高的地方，利用<code>struct</code>就方便多了。</p><p><code>struct</code>模块定义的数据类型可以参考Python官方文档：</p><div class="tag link"><a class="link-card" title="struct模块" href="https://docs.python.org/3/library/struct.html#format-characters"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">struct模块</p><p class="url">https://docs.python.org/3/library/struct.html#format-characters</p></div></a></div><p>Windows的位图文件（.bmp）是一种非常简单的文件格式，我们来用<code>struct</code>分析一下。</p><p>首先找一个bmp文件，没有的话用“画图”画一个。</p><p>读入前30个字节来分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">b&#x27;\x42\x4d\x38\x8c\x0a\x00\x00\x00\x00\x00\x36\x00\x00\x00\x28\x00\x00\x00\x80\x02\x00\x00\x68\x01\x00\x00\x01\x00\x18\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>BMP格式采用小端方式存储数据，文件头的结构按顺序如下：</p><p>两个字节：<code>&#39;BM&#39;</code>表示Windows位图，<code>&#39;BA&#39;</code>表示OS/2位图； 一个4字节整数：表示位图大小； 一个4字节整数：保留位，始终为0； 一个4字节整数：实际图像的偏移量； 一个4字节整数：Header的字节数； 一个4字节整数：图像宽度； 一个4字节整数：图像高度； 一个2字节整数：始终为1； 一个2字节整数：颜色数。</p><p>所以，组合起来用<code>unpack</code>读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(<span class="string">&#x27;&lt;ccIIIIIIHH&#x27;</span>, s)</span><br><span class="line">(<span class="string">b&#x27;B&#x27;</span>, <span class="string">b&#x27;M&#x27;</span>, <span class="number">691256</span>, <span class="number">0</span>, <span class="number">54</span>, <span class="number">40</span>, <span class="number">640</span>, <span class="number">360</span>, <span class="number">1</span>, <span class="number">24</span>)</span><br></pre></td></tr></table></figure><p>结果显示，<code>b&#39;B&#39;</code>、<code>b&#39;M&#39;</code>说明是Windows位图，位图大小为640x360，颜色数为24。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><p>接下来编写一个<code>bmpinfo.py</code>，可以检查任意文件是否是位图文件，如果是，打印出图片大小和颜色数作为练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64, struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bmp_data = base64.b64decode(<span class="string">&#x27;Qk1oAgAAAAAAADYAAAAoAAAAHAAAAAoAAAABABAAAAAAADICAAASCwAAEgsAA&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;AAAAAAAAAAA/3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3/&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;/f/9//3//f/9//3//f/9/AHwAfAB8AHwAfAB8AHwAfP9//3//fwB8AHwAfAB8/3//f/9/A&#x27;</span> + <span class="string">&#x27;HwAfAB8AHz/f/9//3//f/9//38AfAB8AHwAfAB8AHwAfAB8AHz/f/9//38AfAB8/3//f/9&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;//3//fwB8AHz/f/9//3//f/9//3//f/9/AHwAfP9//3//f/9/AHwAfP9//3//fwB8AHz/f&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;/9//3//f/9/AHwAfP9//3//f/9//3//f/9//38AfAB8AHwAfAB8AHwAfP9//3//f/9/AHw&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;AfP9//3//f/9//38AfAB8/3//f/9//3//f/9//3//fwB8AHwAfAB8AHwAfAB8/3//f/9//&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;38AfAB8/3//f/9//3//fwB8AHz/f/9//3//f/9//3//f/9/AHwAfP9//3//f/9/AHwAfP9&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;//3//fwB8AHz/f/9/AHz/f/9/AHwAfP9//38AfP9//3//f/9/AHwAfAB8AHwAfAB8AHwAf&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;AB8/3//f/9/AHwAfP9//38AfAB8AHwAfAB8AHwAfAB8/3//f/9//38AfAB8AHwAfAB8AHw&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;AfAB8/3//f/9/AHwAfAB8AHz/fwB8AHwAfAB8AHwAfAB8AHz/f/9//3//f/9//3//f/9//&#x27;</span> +</span><br><span class="line"><span class="string">&#x27;3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//38AAA==&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bmp_info</span>(<span class="params">data</span>):</span></span><br><span class="line">    data = data[<span class="number">0</span>:<span class="number">30</span>]</span><br><span class="line">    byteStr = struct.unpack(<span class="string">&#x27;&lt;ccIIIIIIHH&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">if</span> byteStr[<span class="number">0</span>] == <span class="string">b&#x27;B&#x27;</span> <span class="keyword">and</span> byteStr[<span class="number">1</span>] == <span class="string">b&#x27;M&#x27;</span> <span class="keyword">or</span> <span class="string">b&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;width&#x27;</span>: byteStr[-<span class="number">4</span>],</span><br><span class="line">            <span class="string">&#x27;height&#x27;</span>: byteStr[-<span class="number">3</span>],</span><br><span class="line">            <span class="string">&#x27;color&#x27;</span>: byteStr[-<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">bi = bmp_info(bmp_data)</span><br><span class="line"><span class="keyword">assert</span> bi[<span class="string">&#x27;width&#x27;</span>] == <span class="number">28</span></span><br><span class="line"><span class="keyword">assert</span> bi[<span class="string">&#x27;height&#x27;</span>] == <span class="number">10</span></span><br><span class="line"><span class="keyword">assert</span> bi[<span class="string">&#x27;color&#x27;</span>] == <span class="number">16</span></span><br><span class="line">print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h2><p>python的hashlib提供了常见的摘要算法支持：MD5、SHA1等等</p><h3 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h3><p>摘要算法，即哈希算法或者说散列算法。通过一个函数将任意长度的数据转化为一个长度固定的数据串（通常用16进制的字符串表示）</p><h3 id="摘要算法作用"><a href="#摘要算法作用" class="headerlink" title="摘要算法作用"></a>摘要算法作用</h3><p>下面引用一个例子：</p><blockquote><p>举个例子，你写了一篇文章，内容是一个字符串<code>&#39;how to use python hashlib - by Michael&#39;</code>，并附上这篇文章的摘要是<code>&#39;2d73d4f15c0db7f5ecb321b6a65e5d6d&#39;</code>。如果有人篡改了你的文章，并发表为<code>&#39;how to use python hashlib - by Bob&#39;</code>，你可以一下子指出Bob篡改了你的文章，因为根据<code>&#39;how to use python hashlib - by Bob&#39;</code>计算出的摘要不同于原始文章的摘要。 </p><footer><strong>廖雪峰</strong><cite><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744">www.liaoxuefeng.com/wiki/1016959663602400/1017686752491744</a></cite></footer></blockquote><p>总的来说，摘要算法的主要作用就是对任意长度数据<code>data</code>计算出固定长度的摘要<code>digest</code>，目的是为了发现原始数据是否被人篡改过。</p><p>需要注意的是，摘要算法通常是一个<strong>单向函数</strong>，即从原文本生成摘要相对容易，但从摘要生成原文非常困难。并且对原始数据做哪怕一个bit的修改，都会导致计算出的摘要完全不同。</p><h3 id="摘要算法使用"><a href="#摘要算法使用" class="headerlink" title="摘要算法使用"></a>摘要算法使用</h3><p>先使用MD5算法计算一段文本的摘要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">&#x27;how to use md5 in puthon hashlib&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(md5)</span><br></pre></td></tr></table></figure><p>计算结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bd3c2bf3a86acaa6ee89efda6b5ceae4</span><br></pre></td></tr></table></figure><p>如果数据量很大，可以分块多次调用<code>update()</code>，最后计算的结果是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">&#x27;how to use md5 in &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">md5.update(<span class="string">&#x27;python hashlib?&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><p>MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示。</p><p>另一种常见的摘要算法是SHA1，调用SHA1和调用MD5完全类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">sha1 = hashlib.sha1()</span><br><span class="line">sha1.update(<span class="string">&#x27;how to use sha1 in &#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">sha1.update(<span class="string">&#x27;python hashlib?&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(sha1.hexdigest())</span><br></pre></td></tr></table></figure><p>SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示。</p><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2c76b57293ce30acef38d98f6046927161b46a44</span><br></pre></td></tr></table></figure><p>由于任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。因此完全有可能发生两个不同的数据集通过某个摘要算法得到了相同的结果。这种情况称为碰撞，比如Bob试图根据你的摘要反推出一篇文章<code>&#39;how to learn hashlib in python - by Bob&#39;</code>，并且这篇文章的摘要恰好和你的文章完全一致，这种情况也并非不可能出现，但是非常非常困难。</p><h3 id="摘要算法应用"><a href="#摘要算法应用" class="headerlink" title="摘要算法应用"></a>摘要算法应用</h3><p>摘要算法在数据持久化时应用广泛，比如为了保证平台用户的账号安全，通常不会将用户的密码明文存入数据库，通常会将其MD5摘要存入数据库。用户登陆时先计算出明文口令的MD5摘要，再与数据库中的摘要进行对比。</p><p>但是采用存储MD5口令摘要的方式也不一定安全。</p><p>黑客往往会保存一个MD5口令对应数据库，对于简单的密码，只需要对数据库进行暴力匹配便可得到有限个可能的选项。</p><p>例如：</p><table><thead><tr><th align="left">明文</th><th>摘要</th></tr></thead><tbody><tr><td align="left">123456</td><td>e10adc3949ba59abbe56e057f20f883e</td></tr><tr><td align="left">888888</td><td>21218cca77804d2ba1922c33e0151105</td></tr><tr><td align="left">password</td><td>5f4dcc3b5aa765d61d8327deb882cf99</td></tr></tbody></table><p>那么我们如何保护那些密码设置简单的用户呢？</p><p>首先想到的有两条方案：</p><ol><li>要求用户使用复杂密码</li><li>数据保护方使用特殊的方法避免简易密码遭泄露</li></ol><p>方案一大多数网站都会使用，比如强制要求用户使用字母+数字+大小写+特殊字符的离奇组合。</p><p>这种方案虽然高效，但作为服务提供者，如此要求客户，这种做法显然无异于甩锅。</p><p>那么服务提供商们有了另一个做法，就是在你的口令中加<code>盐</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_md5</span>(<span class="params">password</span>):</span></span><br><span class="line">    <span class="keyword">return</span> get_md5(password + <span class="string">&#x27;the-Salt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>经过Salt处理的MD5口令，只要Salt不被黑客知道，即使用户输入简单口令，也很难通过MD5反推明文口令。</p><p>但是如果有两个用户都使用了相同的简单口令比如<code>123456</code>，在数据库中，将存储两条相同的MD5值，这说明这两个用户的口令是一样的。</p><p>那么我们可以用一个用户唯一的值作为盐，比如假定用户无法修改登录名，就可以通过把登录名作为Salt的一部分来计算MD5，从而实现相同口令的用户也存储不同的MD5。</p><p>现在我们模拟一下使用该方法的登陆与注册：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, password</span>):</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.salt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(random.randint(<span class="number">48</span>, <span class="number">122</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        self.password = get_md5(password + self.salt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟用户信息数据库</span></span><br><span class="line">db = &#123;</span><br><span class="line">    <span class="string">&#x27;michael&#x27;</span>: User(<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;bob&#x27;</span>: User(<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;abc999&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;alice&#x27;</span>: User(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;alice2008&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 根据用户输入的登录名和口令模拟用户注册，计算更安全的MD5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    newUser = User(username, password)</span><br><span class="line">    db[username] = User.password</span><br><span class="line"><span class="keyword">return</span> newUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，根据修改后的MD5算法实现用户登录的验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    user = db[username]</span><br><span class="line">    <span class="keyword">return</span> user.password == get_md5(password + user.salt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> login(<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> login(<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;abc999&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> login(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;alice2008&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> login(<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> login(<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> login(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;Alice2008&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是摘要算法并不是加密算法，不能用于加密（因为无法解秘）</p><h2 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h2><p>上一节中，我们通过在口令中加入<code>salt</code>来保护一些比较简单的算法。实际上，Hmac算法也是通过一个标准算法， 在计算哈希的过程中，把key混入计算过程中。</p><p>和我们自定义的加salt算法不同，Hmac算法针对所有哈希算法都通用，无论是MD5还是SHA-1。采用Hmac替代我们自己的salt算法，可以使程序算法更标准化，也更安全。</p><p>python自带的<code>hmac</code>模块实现了标准的Hmac算法。</p><p>我们准备好原始信息，随机key，哈希算法，使用hmac的过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">b&#x27;Hello, world!&#x27;</span></span><br><span class="line">key = <span class="string">b&#x27;secret&#x27;</span></span><br><span class="line">h = hmac.new(key, message, digestmod = <span class="string">&#x27;MD5&#x27;</span>)</span><br><span class="line">print(h.hexdigest())</span><br></pre></td></tr></table></figure><p>计算结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fa4ee7d173f2d97ee79022d1a7355bcf</span><br></pre></td></tr></table></figure><p>可见使用hmac和普通hash算法非常类似。hmac输出的长度和原始哈希算法的长度一致。需要注意传入的key和message都是<code>bytes</code>类型，<code>str</code>类型需要首先编码为<code>bytes</code>。</p><p>我们可以用hmac模块代替上一节提到的增加salt的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hmac, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, password</span>):</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.salt = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(random.randint(<span class="number">48</span>, <span class="number">122</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        self.password = hmac_md5(self.salt, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟用户信息数据库</span></span><br><span class="line">db = &#123;</span><br><span class="line">    <span class="string">&#x27;michael&#x27;</span>: User(<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;bob&#x27;</span>: User(<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;abc999&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;alice&#x27;</span>: User(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;alice2008&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 根据用户输入的登录名和口令模拟用户注册，计算更安全的MD5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    newUser = User(username, password)</span><br><span class="line">    db[username] = User.password</span><br><span class="line"><span class="keyword">return</span> newUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，根据修改后的MD5算法实现用户登录的验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hmac_md5</span>(<span class="params">key, s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hmac.new(key.encode(<span class="string">&#x27;utf-8&#x27;</span>), s.encode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">&#x27;MD5&#x27;</span>).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    user = db[username]</span><br><span class="line">    <span class="keyword">return</span> user.password == get_md5(user.salt, password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> login(<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> login(<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;abc999&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> login(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;alice2008&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> login(<span class="string">&#x27;michael&#x27;</span>, <span class="string">&#x27;1234567&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> login(<span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> login(<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;Alice2008&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><p>python的内建模块<code>itertools</code>提供了非常有用的用于操作迭代对象的函数。</p><h3 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h3><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p><code>count</code>会从传入的参数开始不断的输出该数的下一个自然数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>natuals = itertools.count(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> natuals:</span><br><span class="line"><span class="meta">... </span>    print(n)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="cycle"><a href="#cycle" class="headerlink" title="cycle"></a>cycle</h4><p><code>cycle</code>函数会将传入的参数无限循环输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cs = itertools.cycle(<span class="string">&#x27;ABC&#x27;</span>) <span class="comment"># 注意字符串也是序列的一种</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> cs:</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line">...</span><br><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="string">&#x27;C&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p><code>repeat</code>负责把一个元素无限重复下去，可以通过设置第二个参数来设置重复的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ns = itertools.repeat(<span class="string">&#x27;A&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> ns:</span><br><span class="line"><span class="meta">... </span>    print(n)</span><br><span class="line">...</span><br><span class="line">A</span><br><span class="line">A</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>由于生成器的特性，在使用for循环遍历生成器时，才会生成这些元素。</p><h3 id="takewhile"><a href="#takewhile" class="headerlink" title="takewhile"></a>takewhile</h3><p>无限序列虽然可以无限迭代下去，但是通常我们会通过<code>takewhile()</code>等函数根据条件判断来截取出一个有限的序列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>natuals = itertools.count(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ns = itertools.takewhile(<span class="keyword">lambda</span> x: x &lt;= <span class="number">10</span>, natuals)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(ns)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="迭代器操作函数"><a href="#迭代器操作函数" class="headerlink" title="迭代器操作函数"></a>迭代器操作函数</h3><h4 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h4><p><code>chain()</code>可以把一组迭代对象串联起来，形成一个更大的迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.chain(<span class="string">&#x27;ABC&#x27;</span>, <span class="string">&#x27;XYZ&#x27;</span>):</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line"><span class="comment"># 迭代效果：&#x27;A&#x27; &#x27;B&#x27; &#x27;C&#x27; &#x27;X&#x27; &#x27;Y&#x27; &#x27;Z&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="groupby"><a href="#groupby" class="headerlink" title="groupby()"></a>groupby()</h4><p><code>groupby()</code>把迭代器中相邻的重复元素挑出来放在一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(<span class="string">&#x27;AAABBBCCAAA&#x27;</span>):</span><br><span class="line"><span class="meta">... </span>    print(key, <span class="built_in">list</span>(group))</span><br><span class="line">...</span><br><span class="line">A [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">B [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">C [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">A [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure><p>实际上挑选规则是通过函数完成的，只要作用于函数的两个元素返回的值相等，这两个元素就被认为是在一组的，而函数返回值作为组的key。如果我们要忽略大小写分组，就可以让元素<code>&#39;A&#39;</code>和<code>&#39;a&#39;</code>都返回相同的key：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, group <span class="keyword">in</span> itertools.groupby(<span class="string">&#x27;AaaBBbcCAAa&#x27;</span>, <span class="keyword">lambda</span> c: c.upper()):</span><br><span class="line"><span class="meta">... </span>    print(key, <span class="built_in">list</span>(group))</span><br><span class="line">...</span><br><span class="line">A [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">B [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">C [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">A [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们使用刚刚学习的指示来打印一个PI的近似过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi</span>(<span class="params">N</span>):</span></span><br><span class="line">    <span class="string">&#x27; 计算pi的值 &#x27;</span></span><br><span class="line">    <span class="comment"># step 1: 创建一个奇数序列: 1, 3, 5, 7, 9, ...</span></span><br><span class="line">    odd_num = itertools.count(start = <span class="number">1</span>, step = <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># step 2: 取该序列的前N项: 1, 3, 5, 7, 9, ..., 2*N-1.</span></span><br><span class="line">    firstN = itertools.takewhile(<span class="keyword">lambda</span> x: x &lt;= <span class="number">2</span>*N-<span class="number">1</span>, odd_num)</span><br><span class="line">    <span class="comment"># step 3: 添加正负符号并用4除: 4/1, -4/3, 4/5, -4/7, 4/9, ...</span></span><br><span class="line">    firstN_devided4 = [<span class="number">4</span>/val <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -<span class="number">4</span>/val <span class="keyword">for</span> i,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(firstN)]</span><br><span class="line">    <span class="comment"># step 4: 求和:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(firstN_devided4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">print(pi(<span class="number">10</span>))</span><br><span class="line">print(pi(<span class="number">100</span>))</span><br><span class="line">print(pi(<span class="number">1000</span>))</span><br><span class="line">print(pi(<span class="number">10000</span>))</span><br><span class="line"><span class="keyword">assert</span> <span class="number">3.04</span> &lt; pi(<span class="number">10</span>) &lt; <span class="number">3.05</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">3.13</span> &lt; pi(<span class="number">100</span>) &lt; <span class="number">3.14</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">3.140</span> &lt; pi(<span class="number">1000</span>) &lt; <span class="number">3.141</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">3.1414</span> &lt; pi(<span class="number">10000</span>) &lt; <span class="number">3.1415</span></span><br><span class="line">print(<span class="string">&#x27;ok&#x27;</span>)e</span><br></pre></td></tr></table></figure><h2 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h2><p>在之前的基础章节提到过<code>with</code>是通过上下文管理来实现文件的打开与关闭。</p><p>而事实上，实现了上下文管理的对象都能用于<code>with</code>语句。</p><p>只要实现了<code>__enter__</code>和<code>__exit__</code>两个方法，就能称之为<strong>上下文管理器</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 返回with as var语句中的var</span></span><br><span class="line">        print(<span class="string">&#x27;Begin&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span></span><br><span class="line">        <span class="keyword">if</span> exc_type:</span><br><span class="line">            print(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Query info about %s...&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><p>这样我们就能使用<code>with</code>将其包裹：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> Query(<span class="string">&#x27;Bob&#x27;</span>) <span class="keyword">as</span> q:</span><br><span class="line">    q.query()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Begin</span><br><span class="line">Query info about Bob...</span><br><span class="line">End</span><br></pre></td></tr></table></figure><p>此外python还提供了一种构造上下文处理器的装饰器<code>@contextmanager</code>，能让我们更方便的构造上下文处理器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Query info about %s...&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_query</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Begin&#x27;</span>)</span><br><span class="line">    q = Query(name)</span><br><span class="line">    yeild q</span><br><span class="line">    print(<span class="string">&#x27;End&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>@contextmanager</code>这个装饰器接受一个<code>generator</code>，用<code>yield</code>语句把<code>with expression as var</code>中的<code>var</code>输出出去，然后，<code>with</code>语句就可以正常地工作了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> create_query(<span class="string">&#x27;Bob&#x27;</span>) <span class="keyword">as</span> q:</span><br><span class="line">    q.query()</span><br></pre></td></tr></table></figure><p>以下是其他集中应用场景：</p><ol><li>锁资源自动获取和释放的例子</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locked</span>(<span class="params">lock</span>):</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> locked(myLock):</span><br><span class="line">    <span class="comment">#代码执行到这里时，myLock已经自动上锁</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#执行完后会，会自动释放锁</span></span><br></pre></td></tr></table></figure><ol start="2"><li>文件打开后自动管理的实现</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myopen</span>(<span class="params">filename, mode=<span class="string">&quot;r&quot;</span></span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(filename,mode)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> myopen(<span class="string">&quot;test.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure><ol start="3"><li>数据库事务的处理</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transaction</span>(<span class="params">db</span>):</span></span><br><span class="line">    db.begin()</span><br><span class="line">    <span class="keyword">try</span>：</span><br><span class="line">        <span class="keyword">yield</span> </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        db.commit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> transaction(mydb):</span><br><span class="line">    mydb.cursor.execute(sql)</span><br><span class="line">    mydb.cursor.execute(sql)</span><br><span class="line">    mydb.cursor.execute(sql)</span><br><span class="line">    mydb.cursor.execute(sql)</span><br></pre></td></tr></table></figure><p>有时我们希望在某段代码执行前后，自动执行一些代码，就可以将其变成一个上下文管理器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;&lt;%s&gt;&quot;</span> % name)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">&quot;&lt;/%s&gt;&quot;</span> % name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tag(<span class="string">&quot;h1&quot;</span>):</span><br><span class="line">    print(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>代码的执行顺序是：</p><ol><li><code>with</code>语句首先执行<code>yield</code>之前的语句，因此打印出<code>&lt;h1&gt;</code>；</li><li><code>yield</code>调用会执行<code>with</code>语句内部的所有语句，因此打印出<code>hello</code>和<code>world</code>；</li><li>最后执行<code>yield</code>之后的语句，打印出<code>&lt;/h1&gt;</code>。</li></ol><p>因此，<code>@contextmanager</code>让我们通过编写generator来简化上下文管理。</p><h3 id="nested函数"><a href="#nested函数" class="headerlink" title="nested函数"></a>nested函数</h3><p>contextlib模块还提供了一个函数给我们：nested(mgr1,mgr2…mgrn)函数，用来嵌套多个上下文管理器，等同于下面的形式:　　</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> mgr1:</span><br><span class="line">    <span class="keyword">with</span> mgr2:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">with</span> mgrn:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> nested</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_context</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;enter&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> name</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&quot;exit&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用nested函数来调用多个管理器</span></span><br><span class="line">print(<span class="string">&quot;---------使用nested函数调用多个管理器-----------&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> nested(my_context(<span class="string">&quot;管理器一&quot;</span>), my_context(<span class="string">&quot;管理器二&quot;</span>),my_context(<span class="string">&quot;管理器三&quot;</span>)) <span class="keyword">as</span> (m1,m2,m3):</span><br><span class="line">    print(m1)</span><br><span class="line">    print(m2)</span><br><span class="line">    print(m3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接使用with来调用调用多个管理器</span></span><br><span class="line">print(<span class="string">&quot;---------使用with调用多个管理器-----------&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> my_context(<span class="string">&quot;管理器一&quot;</span>) <span class="keyword">as</span> m1, my_context(<span class="string">&quot;管理器二&quot;</span>) <span class="keyword">as</span> m2, my_context(<span class="string">&quot;管理器三&quot;</span>) <span class="keyword">as</span> m3:</span><br><span class="line">    print(m1)</span><br><span class="line">    print(m2)</span><br><span class="line">    print(m3)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---------使用nested函数调用多个管理器-----------</span><br><span class="line">enter</span><br><span class="line">enter</span><br><span class="line">enter</span><br><span class="line">管理器一</span><br><span class="line">管理器二</span><br><span class="line">管理器三</span><br><span class="line">exit</span><br><span class="line">exit</span><br><span class="line">exit</span><br><span class="line">---------使用<span class="keyword">with</span>调用多个管理器-----------</span><br><span class="line">enter</span><br><span class="line">enter</span><br><span class="line">enter</span><br><span class="line">管理器一</span><br><span class="line">管理器二</span><br><span class="line">管理器三</span><br><span class="line">exit</span><br><span class="line">exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="closing对象"><a href="#closing对象" class="headerlink" title="closing对象"></a>closing对象</h3><p>contextlib中还包含一个closing对象，这个对象就是一个上下文管理器，它的__exit__函数仅仅调用传入参数的close函数，closing对象的源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="class"><span class="keyword">class</span> <span class="title">closing</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="number">18</span>     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, thing</span>):</span></span><br><span class="line"><span class="number">19</span>         self.thing = thing</span><br><span class="line"><span class="number">20</span>     <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="number">21</span>         <span class="keyword">return</span> self.thing</span><br><span class="line"><span class="number">22</span>     <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, *exc_info</span>):</span></span><br><span class="line"><span class="number">23</span>         self.thing.close()</span><br></pre></td></tr></table></figure><p>所以closeing上下文管理器仅使用于具有close()方法的资源对象。例如，如果我们通过urllib.urlopen打开一个网页，urlopen返回的request有close方法，所以我们就可以使用closing上下文管理器，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib, sys</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> closing</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> closing(urllib.urlopen(<span class="string">&#x27;http://www.yahoo.com&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        sys.stdout.write(line)</span><br></pre></td></tr></table></figure><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><p>urllib提供了一系列用于操作URL的功能。</p><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><p>urllib的<code>request</code>模块可以非常方便地抓取URL内容，也就是发送一个GET请求到指定的页面，然后返回HTTP的响应：</p><p>例如，对豆瓣的一个URL<code>https://api.douban.com/v2/book/2129650</code>进行抓取，并返回响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> request.urlopen(<span class="string">&#x27;https://api.douban.com/v2/book/2129650&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    print(<span class="string">&#x27;Status:&#x27;</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        print(<span class="string">&#x27;%s: %s&#x27;</span> % (k, v))</span><br><span class="line">    print(<span class="string">&#x27;Data:&#x27;</span>, data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>可以看到HTTP响应的头和JSON数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status: <span class="number">200</span> OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Tue, <span class="number">26</span> May <span class="number">2015</span> <span class="number">10</span>:02:<span class="number">27</span> GMT</span><br><span class="line">Content-Type: application/json; charset=utf-<span class="number">8</span></span><br><span class="line">Content-Length: <span class="number">2049</span></span><br><span class="line">Connection: close</span><br><span class="line">Expires: Sun, <span class="number">1</span> Jan <span class="number">2006</span> 01:<span class="number">00</span>:<span class="number">00</span> GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: must-revalidate, no-cache, private</span><br><span class="line">X-DAE-Node: pidl1</span><br><span class="line">Data: &#123;<span class="string">&quot;rating&quot;</span>:&#123;<span class="string">&quot;max&quot;</span>:<span class="number">10</span>,<span class="string">&quot;numRaters&quot;</span>:<span class="number">16</span>,<span class="string">&quot;average&quot;</span>:<span class="string">&quot;7.4&quot;</span>,<span class="string">&quot;min&quot;</span>:<span class="number">0</span>&#125;,<span class="string">&quot;subtitle&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;author&quot;</span>:[<span class="string">&quot;廖雪峰编著&quot;</span>],<span class="string">&quot;pubdate&quot;</span>:<span class="string">&quot;2007-6&quot;</span>,...&#125;</span><br></pre></td></tr></table></figure><p>如果我们要想模拟浏览器发送GET请求，就需要使用<code>Request</code>对象，通过往<code>Request</code>对象添加HTTP头，我们就可以把请求伪装成浏览器。例如，模拟iPhone 6去请求豆瓣首页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">req = request.Request(<span class="string">&#x27;http://www.douban.com/&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">&#x27;Status:&#x27;</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        print(<span class="string">&#x27;%s: %s&#x27;</span> % (k, v))</span><br><span class="line">    print(<span class="string">&#x27;Data:&#x27;</span>, f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这样豆瓣会返回适合iPhone的移动版网页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;telephone=no&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;apple-touch-icon&quot;</span> sizes=<span class="string">&quot;57x57&quot;</span> href=<span class="string">&quot;http://img4.douban.com/pics/cardkit/launcher/57.png&quot;</span> /&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h3><p>如果要以POST发送一个请求，只需要把参数<code>data</code>以bytes形式传入。</p><p>我们模拟一个微博登录，先读取登录的邮箱和口令，然后按照weibo.cn的登录页的格式以<code>username=xxx&amp;password=xxx</code>的编码传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Login to weibo.cn...&#x27;</span>)</span><br><span class="line">email = <span class="built_in">input</span>(<span class="string">&#x27;Email: &#x27;</span>)</span><br><span class="line">passwd = <span class="built_in">input</span>(<span class="string">&#x27;Password: &#x27;</span>)</span><br><span class="line">login_data = parse.urlencode([</span><br><span class="line">    (<span class="string">&#x27;username&#x27;</span>, email),</span><br><span class="line">    (<span class="string">&#x27;password&#x27;</span>, passwd),</span><br><span class="line">    (<span class="string">&#x27;entry&#x27;</span>, <span class="string">&#x27;mweibo&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;client_id&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;savestate&#x27;</span>, <span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;ec&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;pagerefer&#x27;</span>, <span class="string">&#x27;https://passport.weibo.cn/signin/welcome?entry=mweibo&amp;r=http%3A%2F%2Fm.weibo.cn%2F&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">req = request.Request(<span class="string">&#x27;https://passport.weibo.cn/sso/login&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;Origin&#x27;</span>, <span class="string">&#x27;https://passport.weibo.cn&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;Referer&#x27;</span>, <span class="string">&#x27;https://passport.weibo.cn/signin/login?entry=mweibo&amp;res=wel&amp;wm=3349&amp;r=http%3A%2F%2Fm.weibo.cn%2F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> request.urlopen(req, data=login_data.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">&#x27;Status:&#x27;</span>, f.status, f.reason)</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> f.getheaders():</span><br><span class="line">        print(<span class="string">&#x27;%s: %s&#x27;</span> % (k, v))</span><br><span class="line">    print(<span class="string">&#x27;Data:&#x27;</span>, f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>如果登录成功，我们获得的响应如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Status: <span class="number">200</span> OK</span><br><span class="line">Server: nginx/<span class="number">1.2</span><span class="number">.0</span></span><br><span class="line">...</span><br><span class="line">Set-Cookie: SSOLoginState=<span class="number">1432620126</span>; path=/; domain=weibo.cn</span><br><span class="line">...</span><br><span class="line">Data: &#123;<span class="string">&quot;retcode&quot;</span>:<span class="number">20000000</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;...,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;1658384301&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果登录失败，我们获得的响应如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Data: &#123;<span class="string">&quot;retcode&quot;</span>:<span class="number">50011015</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef&quot;</span>,<span class="string">&quot;data&quot;</span>:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;example@python.org&quot;</span>,<span class="string">&quot;errline&quot;</span>:<span class="number">536</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>如果还需要更复杂的控制，比如通过一个Proxy去访问网站，我们需要利用<code>ProxyHandler</code>来处理，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy_handler = urllib.request.ProxyHandler(&#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://www.example.com:3128/&#x27;</span>&#125;)</span><br><span class="line">proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()</span><br><span class="line">proxy_auth_handler.add_password(<span class="string">&#x27;realm&#x27;</span>, <span class="string">&#x27;host&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)</span><br><span class="line"><span class="keyword">with</span> opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.example.com/login.html&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="DOM-vs-SAX"><a href="#DOM-vs-SAX" class="headerlink" title="DOM vs SAX"></a>DOM vs SAX</h3><p>操作XML有两种方法：</p><ol><li><p>DOM</p></li><li><p>SAX。</p></li></ol><ul><li><p>DOM会把整个XML读入内存，解析为树，因此占用内存大，解析慢，优点是可以任意遍历树的节点。</p></li><li><p>SAX是流模式，边读边解析，占用内存小，解析快，缺点是我们需要自己处理事件。</p></li></ul><p>正常情况下，优先考虑SAX，因为DOM实在太占内存。</p><p>在Python中使用SAX解析XML非常简洁，通常我们关心的事件是<code>start_element</code>，<code>end_element</code>和<code>char_data</code>，准备好这3个函数，然后就可以解析xml了。</p><p>举个例子，当SAX解析器读到一个节点时：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会产生3个事件：</p><ol><li>start_element事件，在读取<code>&lt;a href=&quot;/&quot;&gt;</code>时；</li><li>char_data事件，在读取<code>python</code>时；</li><li>end_element事件，在读取<code>&lt;/a&gt;</code>时。</li></ol><p>用代码实验一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.parsers.expat <span class="keyword">import</span> ParserCreate</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultSaxHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_element</span>(<span class="params">self, name, attrs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sax:start_element: %s, attrs: %s&#x27;</span> % (name, <span class="built_in">str</span>(attrs)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_element</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sax:end_element: %s&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char_data</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;sax:char_data: %s&#x27;</span> % text)</span><br><span class="line"></span><br><span class="line">xml = <span class="string">r&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;ol&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href=&quot;/python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href=&quot;/ruby&quot;&gt;Ruby&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ol&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">handler = DefaultSaxHandler()</span><br><span class="line">parser = ParserCreate()</span><br><span class="line">parser.StartElementHandler = handler.start_element</span><br><span class="line">parser.EndElementHandler = handler.end_element</span><br><span class="line">parser.CharacterDataHandler = handler.char_data</span><br><span class="line">parser.Parse(xml)</span><br></pre></td></tr></table></figure><p>需要注意的是读取一大段字符串时，<code>CharacterDataHandler</code>可能被多次调用，所以需要自己保存起来，在<code>EndElementHandler</code>里面再合并。</p><p>如果需要生成XML，99%的情况下需要生成的XML结构都是非常简单的，因此，最简单也是最有效的生成XML的方法是拼接字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line">L.append(<span class="string">r&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span>)</span><br><span class="line">L.append(<span class="string">r&#x27;&lt;root&gt;&#x27;</span>)</span><br><span class="line">L.append(encode(<span class="string">&#x27;some &amp; data&#x27;</span>))</span><br><span class="line">L.append(<span class="string">r&#x27;&lt;/root&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(L)</span><br></pre></td></tr></table></figure><p>如果要生成复杂的XML则不建议使用XML，而改成JSON。</p><h2 id="HTMLParser"><a href="#HTMLParser" class="headerlink" title="HTMLParser"></a>HTMLParser</h2><p>果我们要编写一个搜索引擎，第一步是用爬虫把目标网站的页面抓下来，第二步就是解析该HTML页面，看看里面的内容到底是新闻、图片还是视频。</p><p>假设第一步已经完成了，第二步应该如何解析HTML呢？</p><p>HTML本质上是XML的子集，但是HTML的语法没有XML那么严格，所以不能用标准的DOM或SAX来解析HTML。</p><p>好在Python提供了HTMLParser来非常方便地解析HTML，只需简单几行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"><span class="keyword">from</span> html.entities <span class="keyword">import</span> name2codepoint</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHTMLParser</span>(<span class="params">HTMLParser</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span>(<span class="params">self, tag, attrs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;%s&gt;&#x27;</span> % tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_endtag</span>(<span class="params">self, tag</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;/%s&gt;&#x27;</span> % tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_startendtag</span>(<span class="params">self, tag, attrs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;%s/&gt;&#x27;</span> % tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_comment</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&lt;!--&#x27;</span>, data, <span class="string">&#x27;--&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_entityref</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&amp;%s;&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_charref</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&amp;#%s;&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line">parser = MyHTMLParser()</span><br><span class="line">parser.feed(<span class="string">&#x27;&#x27;&#x27;&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;!-- test html parser --&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;Some &lt;a href=\&quot;#\&quot;&gt;html&lt;/a&gt; HTML&amp;nbsp;tutorial...&lt;br&gt;END&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;&lt;/html&gt;&#x27;&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>feed()</code>方法可以多次调用，也就是不一定一次把整个HTML字符串都塞进去，可以一部分一部分塞进去。</p><p>特殊字符有两种，一种是英文表示的<code>&amp;nbsp;</code>，一种是数字表示的<code>&amp;#1234;</code>，这两种字符都可以通过Parser解析出来。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记，常用内建库&lt;/p&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;datetime&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;collection&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;base64&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;struct&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;hashlib&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;itertolls&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;contexlib&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;urllib&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;xml&lt;/p&gt;
            &lt;/div&gt;
&lt;div class=&#39;checkbox&#39;&gt;&lt;input type=&quot;radio&quot; /&gt;
            &lt;p&gt;htmlparser&lt;/p&gt;
            &lt;/div&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="进阶" scheme="http://enderxiao.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="多进程" scheme="http://enderxiao.top/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="多线程" scheme="http://enderxiao.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python进阶-多进程与多线程</title>
    <link href="http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-08-13T07:19:58.000Z</published>
    <updated>2021-08-16T10:30:51.458Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记，多线程与多进程部分</p><a id="more"></a><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>python中有很多多线程库，其中有一些是只能在Unix系操作系统上使用，原因是这些库是调用Unix系统中的一些特殊的系统调用实现的。</p><p>比如python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在python程序中轻松创建子进程。</p><p>Unix操作系统提供了一个<code>fork()</code>系统调用，普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（父进程）复制了一份（子进程），然后，分别在父进程和子进程内返回。</p><p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p><p>在Unix系统下，我们可以这样创建子进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前进程的ID</span></span><br><span class="line">print(<span class="string">&#x27;Process (%s) start...&#x27;</span> % os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Only works on Linux/Unix/Mac:</span></span><br><span class="line">pif = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">&quot;I am child process (%s) and my parent is %s.&quot;</span> % (os.getpid(), os.getppid()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;I (%s) just created a child process (%s).&quot;</span> % (os.getpid(), pid)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Process (<span class="number">876</span>) start...</span><br><span class="line">I (<span class="number">876</span>) just created a child process (<span class="number">877</span>).</span><br><span class="line">I am child process (<span class="number">877</span>) <span class="keyword">and</span> my parent <span class="keyword">is</span> <span class="number">876.</span></span><br></pre></td></tr></table></figure><p>python是跨平台的，因此，windows下也应该有一个能进行多进程的模块，下面介绍<code>multiprocessing</code>模块</p><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p><code>multiprocessing</code>模块是一款跨平台版本的多进程模块，该模块提供了一个<code>Process</code>类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Run Child process %s (%s)...&#x27;</span> % (name, os.getpid()))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;Parent process %s.&#x27;</span> % os.getpid())</span><br><span class="line">    p = Process(target = run_proc, args = (<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line">    print(<span class="string">&#x27;Child process will start.&#x27;</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">&#x27;Child process end.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parent process <span class="number">9788.</span></span><br><span class="line">Child process will start.</span><br><span class="line">Run Child process test (<span class="number">14640</span>)...</span><br><span class="line">Child process end.</span><br></pre></td></tr></table></figure><p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用<code>start()</code>方法启动，这样创建进程比<code>fork()</code>还要简单。</p><p><code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h3><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_time_task</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Run task %s (%s)...&#x27;</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">&#x27;Task %s runs %0.2f seconds.&#x27;</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">&#x27;Parent process %s.&#x27;</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    print(<span class="string">&#x27;Waiting for all subprocesses done...&#x27;</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(<span class="string">&#x27;All subprocesses done.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Parent process <span class="number">14096.</span></span><br><span class="line">Waiting <span class="keyword">for</span> <span class="built_in">all</span> subprocesses done...</span><br><span class="line">Run task <span class="number">0</span> (<span class="number">6504</span>)...</span><br><span class="line">Run task <span class="number">1</span> (<span class="number">6176</span>)...</span><br><span class="line">Run task <span class="number">2</span> (<span class="number">16396</span>)...</span><br><span class="line">Run task <span class="number">3</span> (<span class="number">9388</span>)...</span><br><span class="line">Task <span class="number">3</span> runs <span class="number">0.94</span> seconds.</span><br><span class="line">Run task <span class="number">4</span> (<span class="number">9388</span>)...</span><br><span class="line">Task <span class="number">4</span> runs <span class="number">0.14</span> seconds.</span><br><span class="line">Task <span class="number">2</span> runs <span class="number">1.89</span> seconds.</span><br><span class="line">Task <span class="number">0</span> runs <span class="number">2.51</span> seconds.</span><br><span class="line">Task <span class="number">1</span> runs <span class="number">2.68</span> seconds.</span><br><span class="line">All subprocesses done.</span><br></pre></td></tr></table></figure><p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p><p>主义此处<code>4</code>号进程没有马上执行，而是等到<code>3</code>号进程结束之后才进行，这是因为我们设置<code>Pool(4)</code>，即大小为4，最多同时执行4个进程，如果将其设置为<code>Pool(5)</code>，5个进程就能同时开始执行。</p><p>由于<code>Pool</code>的默认大小是CPU的核数。</p><h3 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h3><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p><p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p><p>下面引用一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;$ nslookup www.python.org&#x27;</span>)</span><br><span class="line">r = subprocess.call([<span class="string">&#x27;nslookup&#x27;</span>, <span class="string">&#x27;www.python.org&#x27;</span>])</span><br><span class="line">print(<span class="string">&#x27;Exit code:&#x27;</span>, r)</span><br></pre></td></tr></table></figure><p>该例可以在python代码中运行命令<code>nslookup www.python.org</code></p><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup www.python.org</span><br><span class="line">Server:<span class="number">192.168</span><span class="number">.19</span><span class="number">.4</span></span><br><span class="line">Address:<span class="number">192.168</span><span class="number">.19</span><span class="number">.4</span><span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.python.orgcanonical name = python.<span class="built_in">map</span>.fastly.net.</span><br><span class="line">Name:python.<span class="built_in">map</span>.fastly.net</span><br><span class="line">Address: <span class="number">199.27</span><span class="number">.79</span><span class="number">.223</span></span><br><span class="line"></span><br><span class="line">Exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>如果子进程还需要输入，则可以通过<code>communicate()</code>方法输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;$ nslookup&#x27;</span>)</span><br><span class="line">p = subprocess.Popen([<span class="string">&#x27;nslookup&#x27;</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">output, err = p.communicate(<span class="string">b&#x27;set q=mx\npython.org\nexit\n&#x27;</span>)</span><br><span class="line">print(output.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(<span class="string">&#x27;Exit code:&#x27;</span>, p.returncode)</span><br></pre></td></tr></table></figure><p>上面的代码相当于在命令行执行命令<code>nslookup</code>，然后手动输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> q=mx</span><br><span class="line">python.org</span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ nslookup</span><br><span class="line">Server:<span class="number">192.168</span><span class="number">.19</span><span class="number">.4</span></span><br><span class="line">Address:<span class="number">192.168</span><span class="number">.19</span><span class="number">.4</span><span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">python.orgmail exchanger = <span class="number">50</span> mail.python.org.</span><br><span class="line"></span><br><span class="line">Authoritative answers can be found <span class="keyword">from</span>:</span><br><span class="line">mail.python.orginternet address = <span class="number">82.94</span><span class="number">.164</span><span class="number">.166</span></span><br><span class="line">mail.python.orghas AAAA address <span class="number">2001</span>:<span class="number">888</span>:<span class="number">2000</span>:d::a6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exit code: <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="进程间通讯"><a href="#进程间通讯" class="headerlink" title="进程间通讯"></a>进程间通讯</h3><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">q</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Process to write: %s&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        print(<span class="string">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">q</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Process to read: %s&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = q.get(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># Queue.get(block=True, timeout=None)</span></span><br><span class="line"><span class="comment"># 从队列中移除并返回一个项目。如果可选参数 block 是 true 并且 timeout 是 None (默认值)，则在必要时阻塞至项目可得到。</span></span><br><span class="line"><span class="comment"># 如果 timeout 是个正数，将最多阻塞 timeout 秒，如果在这段时间内项目不能得到，将引发 Empty 异常。</span></span><br><span class="line"><span class="comment"># 反之 (block 是 false) , 如果一个项目立即可得到，则返回一个项目，否则引发 Empty 异常 (这种情况下，timeout 将被忽略)。</span></span><br><span class="line">        print(<span class="string">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Process to write: <span class="number">7060</span></span><br><span class="line">Put A to queue...</span><br><span class="line">Process to read: <span class="number">20224</span></span><br><span class="line">Get A <span class="keyword">from</span> queue.</span><br><span class="line">Put B to queue...</span><br><span class="line">Get B <span class="keyword">from</span> queue.</span><br><span class="line">Put C to queue...</span><br><span class="line">Get C <span class="keyword">from</span> queue.</span><br></pre></td></tr></table></figure><p>在Unix/Linux下，<code>multiprocessing</code>模块封装了<code>fork()</code>调用，使我们不需要关注<code>fork()</code>的细节。由于Windows没有<code>fork</code>调用，因此，<code>multiprocessing</code>需要“模拟”出<code>fork</code>的效果，父进程所有python对象都必须通过<code>pickle</code>序列化再传到子进程去，所以，如果<code>multiprocessing</code>在Windows下调用失败了，要先考虑是不是<code>pickle</code>失败了。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="Threading"><a href="#Threading" class="headerlink" title="Threading"></a>Threading</h3><p>大部分高级语言通常都内置多线程支持，python也不例外，并且，python的线程是真正的<code>Posix Thread</code>，而不是模拟出来的线程。</p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><p>下面举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新线程执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">&#x27;thread %s &gt;&gt;&gt; %s&#x27;</span> % (threading.current_thread().name, n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">&#x27;thread %s is running&#x27;</span> % threading.current_thread().name)</span><br><span class="line">t = threading.Thread(target = loop, name = <span class="string">&#x27;LoopThread&#x27;</span>)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(<span class="string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thread MainThread <span class="keyword">is</span> running...</span><br><span class="line">thread LoopThread <span class="keyword">is</span> running...</span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">3</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">5</span></span><br><span class="line">thread LoopThread ended.</span><br><span class="line">thread MainThread ended.</span><br></pre></td></tr></table></figure><p>由于任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的<code>threading</code>模块有个<code>current_thread()</code>函数，它永远返回当前线程的实例。主线程实例的名字叫<code>MainThread</code>，子线程的名字在创建时指定，我们用<code>LoopThread</code>命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为<code>Thread-1</code>，<code>Thread-2</code>……</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>进程操作中，对于同一个变量，每个进程会各自拷贝一份，相互并不影响，但在线程操作中，变量与所有线程共性，任何线程对某一变量造成影响后，该影响会被传递到所有其他线程中。因此，线程之间如果需要访问一个共享的数据，需要处理<code>同步</code>与<code>互斥</code></p><p>下面介绍一个错误操作的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假定这是你的银行存款:</span></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="comment"># 先存后取，结果应该为0:</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure><p>得到的结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure><p>然而这个结果显然没有意义，因为每次运行都会得到不同的结果。</p><p>但理论上来说，结果应该是0。</p><p>原因是高级语言在实际运行时，需要经过层层翻译，而<code>balance = balance + n</code>这行代码实际翻译为汇编语言时，需要经过至少三个步骤：</p><ol><li>取数</li><li>运算</li><li>存数</li></ol><p>当两个线程交替运行时，如果<code>T1</code>进行刀运算时，还没进行存数，但<code>T2</code>进入了存数阶段，村数结束后，<code>T1</code>也进入村数阶段，则<code>T1</code>村入的数将覆盖<code>T2</code>的结果。</p><p>经过上面的分析，我们发现两个线程对<code>balance</code>的访问是互斥的。</p><p>python中的<code>threading.lock()</code>为我们提供了实现互斥的功能，于是我们使用如下方式修改<code>run_thread()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">balance = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">        <span class="comment"># 先要获取锁:</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 放心地改吧:</span></span><br><span class="line">            change_it(n)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 改完了一定要释放锁:</span></span><br><span class="line">            lock.release()</span><br></pre></td></tr></table></figure><p>当多个线程同时执行<code>lock.acquire()</code>时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p><p>但是使用临界区的方式实现进程同步与互斥时，需要注意仔细分析避免<code>死锁</code>的发生。</p><h3 id="多CPU"><a href="#多CPU" class="headerlink" title="多CPU"></a>多CPU</h3><p>我们试试使用多个死循环线程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span>():</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = x ^ <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(multiprocessing.cpu_count()):</span><br><span class="line">    t = threading.Thread(target=loop)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>我们使用<code>TaskManager</code>查看CPU的占用情况，但我们发现CPU占用率大约是25%左右，这说明死循环大约只占用了一个CPU核心，并没有跑满我的全部4核CPU。</p><p>但是用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满。</p><p>这是因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个<code>GIL锁</code>：Global Interpreter Lock，任何python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p><p>GIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的<code>CPython</code>，要真正利用多核，除非重写一个不带GIL的解释器。</p><p>所以，在Python中，可以使用多线程，但不要指望能有效利用多核。如果一定要通过多线程利用多核，那只能通过C扩展来实现，不过这样就失去了Python简单易用的特点。</p><p>不过，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>由于线程存在的同步与互斥问题。我们希望线程能够尽可能的去操作自己的局部变量，但局部变量在传递的过程中比较麻烦，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span>(<span class="params">name</span>):</span></span><br><span class="line">    std = Student(name)</span><br><span class="line">    <span class="comment"># std是局部变量，但是每个函数都要用它，因此必须传进去：</span></span><br><span class="line">    do_task_1(std)</span><br><span class="line">    do_task_2(std)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_1</span>(<span class="params">std</span>):</span></span><br><span class="line">    do_subtask_1(std)</span><br><span class="line">    do_subtask_2(std)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_2</span>(<span class="params">std</span>):</span></span><br><span class="line">    do_subtask_2(std)</span><br><span class="line">    do_subtask_2(std)</span><br></pre></td></tr></table></figure><p>在该线程中使用到的所有函数中，我们都需要接受这一参数。而每个线程操作的对象又不相同，所以也不能使用全局变量。</p><p>为此，我们可以想到用一个全局的<code>dict</code>来存所有<code>Student</code>对象，并将其与线程绑定。函数中使用当前线程进行访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">global_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">std_thread</span>(<span class="params">name</span>):</span></span><br><span class="line">    std = Student(name)</span><br><span class="line">    <span class="comment"># 把std放到全局变量global_dict中：</span></span><br><span class="line">    global_dict[threading.current_thread()] = std</span><br><span class="line">    do_task_1()</span><br><span class="line">    do_task_2()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_1</span>():</span></span><br><span class="line">    <span class="comment"># 不传入std，而是根据当前线程查找：</span></span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_task_2</span>():</span></span><br><span class="line">    <span class="comment"># 任何函数都可以查找出当前线程的std变量：</span></span><br><span class="line">    std = global_dict[threading.current_thread()]</span><br></pre></td></tr></table></figure><p>于是这样就消除了需要反复传递某一参数的问题。</p><p>但是注意到<code>std = global_dict[threading.current_thread()]</code>这样一条长长的代码重复了多次，显然不够优美。</p><p><code>ThreadLocal</code>对象为我们简化了这一操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建全局ThreadLocal对象:</span></span><br><span class="line">local_school = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前线程关联的student:</span></span><br><span class="line">    std = local_school.student</span><br><span class="line">    print(<span class="string">&#x27;Hello, %s (in %s)&#x27;</span> % (std, threading.current_thread().name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_thread</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># 绑定ThreadLocal的student:</span></span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target = process_thread, args =(<span class="string">&#x27;Alice&#x27;</span>,), name=<span class="string">&#x27;Thread-A&#x27;</span>)</span><br><span class="line">t2 = threading.Thread(target = process_thread, args =(<span class="string">&#x27;Bob&#x27;</span>,), name=<span class="string">&#x27;Thread-B&#x27;</span>)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Alice (<span class="keyword">in</span> Thread-A)</span><br><span class="line">Hello, Bob (<span class="keyword">in</span> Thread-B)</span><br></pre></td></tr></table></figure><p><code>ThreadLocal</code>最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p><h2 id="多线程vs多进程"><a href="#多线程vs多进程" class="headerlink" title="多线程vs多进程"></a>多线程vs多进程</h2><p>对于多线程与多进程，以及批处理任务模式的好坏，如下博客进行了清晰的讨论：</p><div class="tag link"><a class="link-card" title="进程 vs. 线程" href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017631469467456"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">进程 vs. 线程</p><p class="url">https://www.liaoxuefeng.com/wiki/1016959663602400/1017631469467456</p></div></a></div><h2 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h2><p>多进程章节中，我们在同一台计算机上运行了多个进程，而进程还有个又是，就是支持分布式。</p><p>python的<code>multiprocessing</code>模块不但支持多进程，还支持将多进程分不到多台计算机上运行。</p><p>下面我们使用<code>Master-Worker</code>设计模式对其进行改写，将原有的<code>Queue</code>通过网络暴露出去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task_master.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random, time, queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送任务的队列:</span></span><br><span class="line">task_queue = queue.Queue()</span><br><span class="line"><span class="comment"># 接收结果的队列:</span></span><br><span class="line">result_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从BaseManager继承的QueueManager:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span>(<span class="params">BaseManager</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把两个Queue都注册到网络上, callable参数关联了Queue对象:</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>, <span class="built_in">callable</span>=<span class="keyword">lambda</span>: task_queue)</span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>, <span class="built_in">callable</span>=<span class="keyword">lambda</span>: result_queue)</span><br><span class="line"><span class="comment"># 绑定端口5000, 设置验证码&#x27;abc&#x27;:</span></span><br><span class="line">manager = QueueManager(address=(<span class="string">&#x27;&#x27;</span>, <span class="number">5000</span>), authkey=<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment"># 启动Queue:</span></span><br><span class="line">manager.start()</span><br><span class="line"><span class="comment"># 获得通过网络访问的Queue对象:</span></span><br><span class="line">task = manager.get_task_queue()</span><br><span class="line">result = manager.get_result_queue()</span><br><span class="line"><span class="comment"># 放几个任务进去:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    n = random.randint(<span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line">    print(<span class="string">&#x27;Put task %d...&#x27;</span> % n)</span><br><span class="line">    task.put(n)</span><br><span class="line"><span class="comment"># 从result队列读取结果:</span></span><br><span class="line">print(<span class="string">&#x27;Try get results...&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    r = result.get(timeout=<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">&#x27;Result: %s&#x27;</span> % r)</span><br><span class="line"><span class="comment"># 关闭:</span></span><br><span class="line">manager.shutdown()</span><br><span class="line">print(<span class="string">&#x27;master exit.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span></span><br></pre></td></tr></table></figure><p>此时对<code>task_queue</code>等<code>Queue</code>对象进行操作时，需要对通过<code>manager.get_task_queue()</code>获取的对象进行操作。</p><p>可见，我们在分配任务时，不需要了解网络通信的细节，因为<code>managers</code>模块封装得很好</p><p>接着我们再编写<code>Worker</code>端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task_worker.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, sys, queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类似的QueueManager:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span>(<span class="params">BaseManager</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字:</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>)</span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器，也就是运行task_master.py的机器:</span></span><br><span class="line">server_addr = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;Connect to server %s...&#x27;</span> % server_addr)</span><br><span class="line"><span class="comment"># 端口和验证码注意保持与task_master.py设置的完全一致:</span></span><br><span class="line">m = QueueManager(address=(server_addr, <span class="number">5000</span>), authkey=<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment"># 从网络连接:</span></span><br><span class="line">m.connect()</span><br><span class="line"><span class="comment"># 获取Queue的对象:</span></span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"><span class="comment"># 从task队列取任务,并把结果写入result队列:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = task.get(timeout=<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&#x27;run task %d * %d...&#x27;</span> % (n, n))</span><br><span class="line">        r = <span class="string">&#x27;%d * %d = %d&#x27;</span> % (n, n, n*n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        result.put(r)</span><br><span class="line">    <span class="keyword">except</span> Queue.Empty:</span><br><span class="line">        print(<span class="string">&#x27;task queue is empty.&#x27;</span>)</span><br><span class="line"><span class="comment"># 处理结束:</span></span><br><span class="line">print(<span class="string">&#x27;worker exit.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br></pre></td></tr></table></figure><p>部署完成后，启动<code>tsak_master.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ python3 task_master.py </span><br><span class="line">Put task <span class="number">3411.</span>..</span><br><span class="line">Put task <span class="number">1605.</span>..</span><br><span class="line">Put task <span class="number">1398.</span>..</span><br><span class="line">Put task <span class="number">4729.</span>..</span><br><span class="line">Put task <span class="number">5300.</span>..</span><br><span class="line">Put task <span class="number">7471.</span>..</span><br><span class="line">Put task <span class="number">68.</span>..</span><br><span class="line">Put task <span class="number">4219.</span>..</span><br><span class="line">Put task <span class="number">339.</span>..</span><br><span class="line">Put task <span class="number">7866.</span>..</span><br><span class="line">Try get results...</span><br></pre></td></tr></table></figure><p><code>task_master.py</code>进程发送完任务后，开始等待<code>result</code>队列的结果。接着启动<code>test_worker.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python3 task_worker.py</span><br><span class="line">Connect to server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>...</span><br><span class="line">run task <span class="number">3411</span> * <span class="number">3411.</span>..</span><br><span class="line">run task <span class="number">1605</span> * <span class="number">1605.</span>..</span><br><span class="line">run task <span class="number">1398</span> * <span class="number">1398.</span>..</span><br><span class="line">run task <span class="number">4729</span> * <span class="number">4729.</span>..</span><br><span class="line">run task <span class="number">5300</span> * <span class="number">5300.</span>..</span><br><span class="line">run task <span class="number">7471</span> * <span class="number">7471.</span>..</span><br><span class="line">run task <span class="number">68</span> * <span class="number">68.</span>..</span><br><span class="line">run task <span class="number">4219</span> * <span class="number">4219.</span>..</span><br><span class="line">run task <span class="number">339</span> * <span class="number">339.</span>..</span><br><span class="line">run task <span class="number">7866</span> * <span class="number">7866.</span>..</span><br><span class="line">worker exit.</span><br></pre></td></tr></table></figure><p><code>task_worker.py</code>进程结束，在<code>task_master.py</code>进程中会继续打印出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Result: <span class="number">3411</span> * <span class="number">3411</span> = <span class="number">11634921</span></span><br><span class="line">Result: <span class="number">1605</span> * <span class="number">1605</span> = <span class="number">2576025</span></span><br><span class="line">Result: <span class="number">1398</span> * <span class="number">1398</span> = <span class="number">1954404</span></span><br><span class="line">Result: <span class="number">4729</span> * <span class="number">4729</span> = <span class="number">22363441</span></span><br><span class="line">Result: <span class="number">5300</span> * <span class="number">5300</span> = <span class="number">28090000</span></span><br><span class="line">Result: <span class="number">7471</span> * <span class="number">7471</span> = <span class="number">55815841</span></span><br><span class="line">Result: <span class="number">68</span> * <span class="number">68</span> = <span class="number">4624</span></span><br><span class="line">Result: <span class="number">4219</span> * <span class="number">4219</span> = <span class="number">17799961</span></span><br><span class="line">Result: <span class="number">339</span> * <span class="number">339</span> = <span class="number">114921</span></span><br><span class="line">Result: <span class="number">7866</span> * <span class="number">7866</span> = <span class="number">61873956</span></span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>再windows下运行需要注意以下几个报错：</p><p>运行<code>tesk_master.py</code>时</p><ol><li>报错：<code>OSError: [WinError 87] 参数错误</code>。</li></ol><p>原因如下：</p><p>在win10环境下，pickle模块不能序列化lambda函数，所以需要自定义要使用的函数，而不用lambda函数</p><p>将原程序中的lambda修改为函数。再运行：python task_master.py</p><ol start="2"><li>报错：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError:</span><br><span class="line"></span><br><span class="line">An attempt has been made to start a new process before the</span><br><span class="line"></span><br><span class="line">current process has finished its bootstrapping phase.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据提示在程序中添加main函数</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘:</p><p>再运行：python task_master.py</p><ol start="3"><li>报错：<code>OSError: [WinError 10049]在其上下文中，该请求的地址无效。</code></li></ol><p>原因：<code>OSError: [WinError 10049]</code>是由于 <code>ip</code>地址为空造成的</p><p>设置端口验证的一行 <code>manager = QueueManager(address=(&#39;&#39;,5000), authkey=b&#39;abc&#39;) </code>中的地址添加127.0.0.1</p><p>在另一个命令行运行环境下运行python task_worker.py</p><p>（同样修改lambda函数，并添加main函数）</p><ol><li>报错：<code>ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。</code></li></ol><p>经比对教程中的示例程序和教程后附加的例程，发现只有程序开头两行区别。</p><p>#!/usr/bin/env python3</p><p># -<em>- coding: utf-8 -</em>-</p><p>将这两行添加到程序中。</p><p>如果时两台机器，需要再系统防火墙中把5000端口打开。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记，多线程与多进程部分&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="进阶" scheme="http://enderxiao.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="多进程" scheme="http://enderxiao.top/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="多线程" scheme="http://enderxiao.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python进阶-IO编程</title>
    <link href="http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-io%E7%BC%96%E7%A8%8B/"/>
    <id>http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-io%E7%BC%96%E7%A8%8B/</id>
    <published>2021-08-10T00:02:21.000Z</published>
    <updated>2021-08-27T14:56:20.323Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记，IO编程部分</p><a id="more"></a><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>IO在计算机中指Input/Output，也就是输入和输出。由于程序和运行时数据是在内存中驻留，由CPU这个超快的计算核心来执行，涉及到数据交换的地方，通常是磁盘、网络等，就需要IO接口。</p><p>IO编程中，Stream（流）是一个很重要的概念，可以把流想象成一个水管，数据就是水管里的水，但是只能单向流动。Input Stream就是数据从外面（磁盘、网络）流进内存，Output Stream就是数据从内存流到外面去。对于浏览网页来说，浏览器和新浪服务器之间至少需要建立两根水管，才可以既能发数据，又能收数据。</p><p>由于CPU输出和磁盘接收的速度不同，IO被分为两种：</p><ol><li>同步IO，CPU等待数据完全写入磁盘再继续执行后续代码</li><li>异步IO，CPU不等待数据的输入，转而处理别的事物，磁盘接收完毕再通知CPU</li></ol><p>再异步IO中，按照通知CPU的方式又可分为：</p><ol><li>回调模式</li><li>轮询模式</li></ol><p>显然异步IO效率要高于同步IO，但复杂度也远远高于同步IO，在此我们先仅讨论同步IO。</p><p>操作IO的能力都是由操作系统提供的，每一种编程语言都会把操作系统提供as的低级C接口封装起来方便使用，Python也不例外。</p><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>读写文件是最常见的IO操作。Python内置了读写文件的函数，用法和C是兼容的。</p><p>读写文件前，我们先必须了解一下，在磁盘上读写文件的功能都是由操作系统提供的，现代操作系统不允许普通的程序直接操作磁盘，所以，读写文件就是请求操作系统打开一个文件对象（通常称为文件描述符），然后，通过操作系统提供的接口从这个文件对象中读取数据（读文件），或者把数据写入这个文件对象（写文件）。</p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>要以读文件的模式打开一个文件对象，使用Python内置的<code>open()</code>函数，传入文件名和标示符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure><p>标示符’r’表示读</p><p>如果文件不存在，<code>open()</code>函数就会抛出一个<code>IOError</code>的错误，并且给出错误码和详细的信息告诉你文件不存在：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=<span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;E:/Programing/Python/Hello/test.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>如果文件打开成功，接下来，调用<code>read()</code>方法可以一次读取文件的全部内容，Python把内容读到内存，用一个<code>str</code>对象表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;Hello, world!&#x27;</span></span><br></pre></td></tr></table></figure><p>最后一步是调用<code>close()</code>方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><p>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<code>try ... finally</code>来实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但可以使用<a href="https://enderxiao.top/Python/python%E5%9F%BA%E7%A1%80/">python基础 - Ender (enderxiao.top)</a>中提到的<code>with</code>关键字实现一个上下文管理器来更方便的操作文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/path/to/file&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure><p>调用<code>read()</code>会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。另外，调用<code>readline()</code>可以每次读取一行内容，调用<code>readlines()</code>一次读取所有内容并按行返回<code>list</code>。因此，要根据需要决定怎么调用。</p><p>如果文件很小，<code>read()</code>一次性读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code>比较保险；如果是配置文件，调用<code>readlines()</code>最方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    print(line.strip()) <span class="comment"># 把末尾的&#x27;\n&#x27;删掉</span></span><br></pre></td></tr></table></figure><h3 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h3><p>在<a href="https://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-oop/">python进阶-OOP - Ender (enderxiao.top)</a>的继承与多态中提到过鸭子类型，像<code>open()</code>函数返回的这种有个<code>read()</code>方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个<code>read()</code>方法就行。</p><p><code>StringIO</code>就是在内存中创建的file-like Object，常用作临时缓冲。</p><h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用<code>&#39;rb&#39;</code>模式打开文件即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/test.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...&#x27;</span> <span class="comment"># 十六进制表示的字节</span></span><br></pre></td></tr></table></figure><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>要读取非UTF-8编码的文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，例如，读取GBK编码的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/gbk.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;测试&#x27;</span></span><br></pre></td></tr></table></figure><p>遇到有些编码不规范的文件，你可能会遇到<code>UnicodeDecodeError</code>，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，<code>open()</code>函数还接收一个<code>errors</code>参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/gbk.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件和读文件是一样的，唯一区别是调用<code>open()</code>函数时，传入标识符<code>&#39;w&#39;</code>或者<code>&#39;wb&#39;</code>表示写文本文件或写二进制文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;Hello, world!&#x27;</span>)  <span class="comment"># 将返回成功写入的字符数</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><p>你可以反复调用<code>write()</code>来写入文件，但是务必要调用<code>f.close()</code>来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with</code>语句来得保险：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>写入特定编码的的文本，则在<code>open()</code>中传入<code>encoding</code>参数</p><p>以<code>&#39;w&#39;</code>模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件），如果需要追加，则可以传入<code>&#39;a&#39;</code>以追加（append）模式写入。</p><p>所有模式的定义及含义可以参考Python的官网文档：</p><div class="tag link"><a class="link-card" title="python官方文档" href="https://docs.python.org/3/library/functions.html#open"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">python官方文档</p><p class="url">https://docs.python.org/3/library/functions.html#open</p></div></a></div><h3 id="read只能读一次"><a href="#read只能读一次" class="headerlink" title="read只能读一次"></a>read只能读一次</h3><p>还需主义一点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/Programing/Python/Hello/test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;!Hello, world!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>如此发现，文件打开一次后只能读取一次，原因是文件对象是一个<code>迭代器</code></p><p>有限长度的迭代器在被<code>list()</code>函数转换成列表或者for循环完全遍历等方式将数据完全获取之后将失效，再次试图访问数据得到的是空值。也就是说不能重复使用，包括赋值后指向这个迭代器的其他变量也将无法使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">it1 = <span class="built_in">iter</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">it2 = it1 <span class="comment"># 使it2指向it1指向的内存地址存的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it1:</span><br><span class="line">    print(i, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;\n----分割线----&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;it1:&#x27;</span>, <span class="built_in">list</span>(it1))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;it2:&#x27;</span>, <span class="built_in">list</span>(it2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果如下：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 1 2 3 4 5 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----分割线----</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># it1: []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># it2: []</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String-IO与BytesIO"><a href="#String-IO与BytesIO" class="headerlink" title="String IO与BytesIO"></a>String IO与BytesIO</h2><h3 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h3><p>有时候数据读写的对象也不一定是文件，也可能在内存中读写，StringIO就是在内存中读写str。</p><p>只要创建一个<code>StringIO</code>对象后，就能像文件一样写入了，然后再使用<code>getvalue()</code>获取写入后的str：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;world!&#x27;</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line">hello world!</span><br></pre></td></tr></table></figure><p>要读<code>StringIO</code>，可以用一个str初始化<code>StringIO</code>，然后，像文件一样读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = StringIO(<span class="string">&#x27;Hello!\nHi!\nGoodbye!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">... </span>    s = f.readline()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> s == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>    print(s.strip())</span><br><span class="line">...</span><br><span class="line">Hello!</span><br><span class="line">Hi!</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><h3 id="BtesIO"><a href="#BtesIO" class="headerlink" title="BtesIO"></a>BtesIO</h3><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.getvalue())</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = BytesIO(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.read()</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># StringIO和BytesIO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># stringIO 比如说，这时候，你需要对获取到的数据进行操作，但是你并不想把数据写到本地硬盘上，这时候你就可以用stringIO</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputstring</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;string \nfrom \noutputstring \nfunction&#x27;</span></span><br><span class="line"></span><br><span class="line">s = outputstring()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数返回的数据在内存中读</span></span><br><span class="line">sio = StringIO(s)</span><br><span class="line"><span class="comment"># 可以用StringIO本身的方法</span></span><br><span class="line">print(sio.getvalue())</span><br><span class="line"><span class="comment"># 也可以用file-like object的方法</span></span><br><span class="line">s = sio.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    print(i.strip())</span><br><span class="line">    <span class="comment"># Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</span></span><br><span class="line">    注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将函数返回的数据在内存中写</span></span><br><span class="line">s = outputstring()</span><br><span class="line">sio = StringIO()</span><br><span class="line">sio.write(s)</span><br><span class="line"><span class="comment"># 可以用StringIO本身的方法查看</span></span><br><span class="line">s=sio.getvalue()</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你用file-like object的方法查看的时候，你会发现数据为空</span></span><br><span class="line"></span><br><span class="line">sio = StringIO()</span><br><span class="line">sio.write(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sio.readlines():</span><br><span class="line">    print(i.strip())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 原因是StringIO的写入为追加写入，初始化后，文件指针位置为0，即在开头位置。</span></span><br><span class="line"><span class="comment"># 但是使用追加写入后，指针则来到了文件结尾，即最后字符写入的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这时候我们需要修改下文件的指针位置</span></span><br><span class="line"><span class="comment"># 我们发现可以打印出内容了</span></span><br><span class="line">sio = StringIO()</span><br><span class="line">sio.write(s)</span><br><span class="line">sio.seek(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">print(sio.tell())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sio.readlines():</span><br><span class="line">    print(i.strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这就涉及到了两个方法seek 和 tell</span></span><br><span class="line"><span class="comment"># tell 方法获取当前文件读取指针的位置</span></span><br><span class="line"><span class="comment"># seek 方法，用于移动文件读写指针到指定位置,有两个参数，第一个offset: 偏移量，需要向前或向后的字节数，正为向后，负为向前；第二个whence: 可选值，默认为0，表示文件开头，1表示相对于当前的位置，2表示文件末尾</span></span><br><span class="line"><span class="comment"># 用seek方法时，需注意，如果你打开的文件没有用&#x27;b&#x27;的方式打开，则offset无法使用负值哦</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># stringIO 只能操作str，如果要操作二进制数据，就需要用到BytesIO</span></span><br><span class="line"><span class="comment"># 上面的sio无法用seek从当前位置向前移动，这时候，我们用&#x27;b&#x27;的方式写入数据，就可以向前移动了</span></span><br><span class="line">bio = BytesIO()</span><br><span class="line">bio.write(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">print(bio.getvalue())</span><br><span class="line">bio.seek(-<span class="number">36</span>,<span class="number">1</span>)</span><br><span class="line">print(bio.tell())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bio.readlines():</span><br><span class="line">    print(i.strip())</span><br></pre></td></tr></table></figure><h2 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h2><p>Python内置的<code>os</code>模块可以直接调用操作系统提供的接口函数。</p><p>下面我们来看看<code>os</code>模块的基本功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name <span class="comment"># 操作系统类型</span></span><br><span class="line"><span class="string">&#x27;nt&#x27;</span></span><br></pre></td></tr></table></figure><p>如果是<code>nt</code>，说明系统是<code>windows</code>，如果<code>posix</code>说明系统是<code>Linux</code>、<code>Unix</code>或<code>Mac OS X</code>。</p><p>要获取详细的系统信息，可以调用<code>uname()</code>函数，但<code>uname()</code>函数在<code>windows</code>下不可用，原因是windows并未提供相关接口，以下是在Linux上运行的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.uname()</span><br><span class="line">posix.uname_result(sysname=<span class="string">&#x27;Darwin&#x27;</span>, nodename=<span class="string">&#x27;MichaelMacPro.local&#x27;</span>, release=<span class="string">&#x27;14.3.0&#x27;</span>, version=<span class="string">&#x27;Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64&#x27;</span>, machine=<span class="string">&#x27;x86_64&#x27;</span>)</span><br></pre></td></tr></table></figure><p>要获取某个环境变量的值，可以调用<code>os.environ.get(&#39;key&#39;)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.environ.get(<span class="string">&#x27;PATH&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.environ.get(<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;default&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;default&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><p>操作文件和目录的函数一部分放在<code>os</code>模块中，一部分放在<code>os.path</code>模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录的绝对路径:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;C:\\Users\\ASUS\\Links&#x27;</span></span><br><span class="line"><span class="comment"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">&#x27;/Users/michael&#x27;</span>, <span class="string">&#x27;testdir&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;C:/Users/ASUS/Links\\test&#x27;</span></span><br><span class="line"><span class="comment"># 然后创建一个目录:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.mkdir(<span class="string">&#x27;C:/Users/ASUS/Links/test&#x27;</span>)</span><br><span class="line"><span class="comment"># 删掉一个目录:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rmdir(<span class="string">&#x27;C:/Users/ASUS/Links/test&#x27;</span>)</span><br></pre></td></tr></table></figure><p>把两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符。在Linux/Unix/Mac下，<code>os.path.join()</code>返回这样的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part-1&#x2F;part-2</span><br></pre></td></tr></table></figure><p>而Windows下会返回这样的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part-1\part-2</span><br></pre></td></tr></table></figure><p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.split(<span class="string">&#x27;C:/Users/ASUS/Links/test.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;C:/Users/ASUS/Links&#x27;</span>, <span class="string">&#x27;test.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>os.path.splitext()</code>可以直接让你得到文件扩展名，很多时候非常方便：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(<span class="string">&#x27;C:/Users/ASUS/test.txt&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;C:/Users/ASUS/test&#x27;</span>, <span class="string">&#x27;.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</p><p>文件操作使用下面的函数。假定当前目录下有一个<code>test.txt</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对文件重命名:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.rename(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>)</span><br><span class="line"><span class="comment"># 删掉文件:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.remove(<span class="string">&#x27;test.py&#x27;</span>)</span><br></pre></td></tr></table></figure><p>但是<code>os</code>模块中不存在复制文件的操作，原因是赋值文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</p><p>但<code>shutil</code>模块提供了<code>copyfile()</code>的函数，你还可以在<code>shutil</code>模块中找到很多实用函数，它们可以看做是<code>os</code>模块的补充。</p><p>最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isdir(x)]</span><br><span class="line">[<span class="string">&#x27;.lein&#x27;</span>, <span class="string">&#x27;.local&#x27;</span>, <span class="string">&#x27;.m2&#x27;</span>, <span class="string">&#x27;.npm&#x27;</span>, <span class="string">&#x27;.ssh&#x27;</span>, <span class="string">&#x27;.Trash&#x27;</span>, <span class="string">&#x27;.vim&#x27;</span>, <span class="string">&#x27;Applications&#x27;</span>, <span class="string">&#x27;Desktop&#x27;</span>, ...]</span><br></pre></td></tr></table></figure><p>要列出所有的<code>.py</code>文件，也只需一行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">if</span> os.path.isfile(x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>]==<span class="string">&#x27;.py&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;apis.py&#x27;</span>, <span class="string">&#x27;config.py&#x27;</span>, <span class="string">&#x27;models.py&#x27;</span>, <span class="string">&#x27;pymonitor.py&#x27;</span>, <span class="string">&#x27;test_db.py&#x27;</span>, <span class="string">&#x27;urls.py&#x27;</span>, <span class="string">&#x27;wsgiapp.py&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>利用<code>os</code>模块编写一个能实现<code>dir -l</code>输出的程序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInfo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        fileStat = os.stat(name)</span><br><span class="line">        self._mode = fileStat.st_mode</span><br><span class="line">        self._linkNum = fileStat.st_nlink</span><br><span class="line">        self._owner = fileStat.st_uid</span><br><span class="line">        self._ownerGroup = fileStat.st_gid</span><br><span class="line">        self._size = fileStat.st_size</span><br><span class="line">        self._lastEditTime = time.strftime(<span class="string">&quot;%b %d %H:%M&quot;</span>, time.localtime(fileStat.st_mtime))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        info = <span class="string">r&#x27;%s %s %s %s %s %s %s&#x27;</span> % (self._mode, self._linkNum, self._owner, self._ownerGroup, self._size, self._lastEditTime, self._name)</span><br><span class="line">        <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> name[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        FileNow = FileInfo(name)</span><br><span class="line">        print(FileNow)</span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个程序，能在当前目录以及当前目录的所有子目录下查找文件名包含指定字符串的文件，并打印出相对路径。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findFile</span>(<span class="params">targetFileName, path=<span class="string">&#x27;.&#x27;</span></span>):</span></span><br><span class="line">    foundFile = []</span><br><span class="line">    files = [os.path.join(path, x) <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> os.path.isfile(os.path.join(path, x)) <span class="keyword">and</span> targetFileName <span class="keyword">in</span> os.path.split(x)[<span class="number">1</span>]]  <span class="comment"># 路径是文件且文件名包含关键字</span></span><br><span class="line">    dirs = [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> os.path.isdir(os.path.join(path, x))]</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> dirs:</span><br><span class="line">        subFound = findFile(targetFileName, os.path.join(path, d))</span><br><span class="line">        foundFile += subFound</span><br><span class="line">    foundFile += files</span><br><span class="line">    <span class="keyword">return</span> foundFile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="built_in">input</span>(<span class="string">&#x27;输入查找路径&#x27;</span>)</span><br><span class="line">    targetFileName = <span class="built_in">input</span>(<span class="string">&#x27;输入查找关键字&#x27;</span>)</span><br><span class="line">    foundPath = findFile(targetFileName, path)</span><br><span class="line">    <span class="keyword">for</span> pathName <span class="keyword">in</span> foundPath:</span><br><span class="line">        print(pathName)</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>将变量从内存中变成可存储或传输的过程称之为序列化在，Python中叫<code>pickling</code>，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p><p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</p><p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即<code>unpickling</code>。</p><p>Python提供了<code>pickle</code>模块来实现序列化。</p><p>可以使用如下方法将一个对象序列化并写入文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dumps(d)</span><br><span class="line"><span class="string">b&#x27;\x80\x03&#125;q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.&#x27;</span></span><br></pre></td></tr></table></figure><p><code>pickle.dumps()</code>方法把任意对象序列化成一个<code>bytes</code>，然后，就可以把这个<code>bytes</code>写入文件。或者用另一个方法<code>pickle.dump()</code>直接把对象序列化后写入一个file-like Object：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;dump.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(d, f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><p>看看写入的<code>dump.txt</code>文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">€?       &#125;??name攲Bob攲age擪?score擪Xu.</span><br></pre></td></tr></table></figure><p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个<code>bytes</code>，然后用<code>pickle.loads()</code>方法反序列化出对象，也可以直接用<code>pickle.load()</code>方法从一个<code>file-like Object</code>中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;dump.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = pickle.load(f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">88</span>&#125;</span><br></pre></td></tr></table></figure><p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><p>JSON和Python内置的数据类型对应如下：</p><table><thead><tr><th align="left">JSON类型</th><th align="left">Python类型</th></tr></thead><tbody><tr><td align="left">{}</td><td align="left">dict</td></tr><tr><td align="left">[]</td><td align="left">list</td></tr><tr><td align="left">“string”</td><td align="left">str</td></tr><tr><td align="left">1234.56</td><td align="left">int或float</td></tr><tr><td align="left">true/false</td><td align="left">True/False</td></tr><tr><td align="left">null</td><td align="left">None</td></tr></tbody></table><p>python中的<code>json</code>模块提供了对象到<code>JSON</code>的格式转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(d)</span><br><span class="line"><span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>dumps()</code>方法返回一个<code>str</code>，内容就是标准的JSON。类似的，<code>dump()</code>方法可以直接把JSON写入一个<code>file-like Object</code>。</p><p>要把JSON反序列化为Python对象，用<code>loads()</code>或者对应的<code>load()</code>方法，前者把JSON的字符串反序列化，后者从<code>file-like Object</code>中读取字符串并反序列化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.loads(json_str)</span><br><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">88</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>JSON标准规定JSON编码是UTF-8，因此在python中进行<code>str</code>与<code>JSON</code>的转换是没问题的</p><p>但当我们需要用<code>JSON</code>直接序列化类时，直接调用<code>json.dump</code>会报<code>TypeError</code></p><p>原因是默认情况下，<code>dumps()</code>方法不知道如何将<code>Student</code>实例变为一个JSON的<code>&#123;&#125;</code>对象。</p><p>此时我们需要告诉方法要怎样进行转换，也就是通过<code>dumps()</code>方法的<code>default</code>参数，传入一个映射方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student2dict</span>(<span class="params">std</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: std.name,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: std.age,</span><br><span class="line">        <span class="string">&#x27;score&#x27;</span>: std.score</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(json.dumps(s, default=student2dict))</span><br><span class="line"><span class="comment"># &#123;&quot;age&quot;: 20, &quot;name&quot;: &quot;Bob&quot;, &quot;score&quot;: 88&#125;</span></span><br></pre></td></tr></table></figure><p>不过，下次如果遇到一个<code>Teacher</code>类的实例，照样无法序列化为JSON。我们可以把任意<code>class</code>的实例变为<code>dict</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(json.dumps(s, default=<span class="keyword">lambda</span> obj: obj.__dict__))</span><br></pre></td></tr></table></figure><p>因为通常<code>class</code>的实例都有一个<code>__dict__</code>属性，它就是一个<code>dict</code>，用来存储实例变量。也有少数例外，比如定义了<code>__slots__</code>的class。</p><p>同样的道理，如果我们要把JSON反序列化为一个<code>Student</code>对象实例，<code>loads()</code>方法首先转换出一个<code>dict</code>对象，然后，我们传入的<code>object_hook</code>函数负责把<code>dict</code>转换为<code>Student</code>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dict2student</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Student(d[<span class="string">&#x27;name&#x27;</span>], d[<span class="string">&#x27;age&#x27;</span>], d[<span class="string">&#x27;score&#x27;</span>])</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>json_str = <span class="string">&#x27;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.loads(json_str, object_hook=dict2student))</span><br><span class="line">&lt;__main__.Student <span class="built_in">object</span> at <span class="number">0x10cd3c190</span>&gt;</span><br></pre></td></tr></table></figure><p>打印出的是反序列化的<code>Student</code>实例对象。</p><p><code>json.dumps</code>的参数列表参考如下链接：</p><div class="tag link"><a class="link-card" title="dumps方法参数" href="https://docs.python.org/3/library/json.html#json.dumps"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">dumps方法参数</p><p class="url">https://docs.python.org/3/library/json.html#json.dumps</p></div></a></div><p>例如其中一个参数<code>ensure_ascii</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If &#96;&#96;ensure_ascii&#96;&#96; is false, then the return value can contain non-ASCII characters if they appear in strings contained in &#96;&#96;obj&#96;&#96;. Otherwise, all such characters are escaped in JSON strings.</span><br></pre></td></tr></table></figure><p>也就是如果开启，那么对象中包含的非ASCII字符将被直接保存而不进行转义</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记，IO编程部分&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="进阶" scheme="http://enderxiao.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="IO编程" scheme="http://enderxiao.top/tags/IO%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MDA破晓</title>
    <link href="http://enderxiao.top/%E9%94%AE%E7%9B%98/%E5%AE%A2%E5%88%B6%E5%8C%96/mda%E7%A0%B4%E6%99%93/"/>
    <id>http://enderxiao.top/%E9%94%AE%E7%9B%98/%E5%AE%A2%E5%88%B6%E5%8C%96/mda%E7%A0%B4%E6%99%93/</id>
    <published>2021-08-07T01:16:09.000Z</published>
    <updated>2021-08-16T13:20:12.677Z</updated>
    
    <content type="html"><![CDATA[<p>等了一年的键帽他也来了</p><a id="more"></a><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>很久之前，入了一款由MelGeek设计的木镶铜套件，当时就是想尝试以下木壳，但是搭配键帽成了一个很大的问题。</p><p>本来想搭配MG尤达，被它的个性吸引了，但是当时手头没啥钱，于是错过了。</p><p>MG微光和破晓也是不错的选择，但也错过了。</p><p>这次MelGeek复刻MDA版本的微光，且可以按配列购买，实属人性化啊，说什么也不能错过。</p><p><del>众所周知，没有人会记住按时发货的伞兵</del>，这款等了将近一年的键帽也终于到我手上了。</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/07/fKSvrT.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/07/fKSvrT.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="MDA微光的包装"></p>            </div><h2 id="原来的样子"><a href="#原来的样子" class="headerlink" title="原来的样子"></a>原来的样子</h2><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/07/fKSOx0.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/07/fKSOx0.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="原键盘"></p>            </div><p>本来使用的是由阿尔伯特外设设计的原厂高度的十样锦，当时急着用，于是没有购买JDA高度的。这套原厂高度的实属一般。</p><p>之后购入了MDA塑料，觉得MDA高度的键帽无论是高度还是手感都非常帮，键帽表面比较细腻，有种少女肌肤的感觉(/▽＼)</p><h2 id="上机"><a href="#上机" class="headerlink" title="上机"></a>上机</h2><p>这把键盘的内胆是我入坑第一把键盘的内胆，如今已是伊拉克呈色，黄铜定位板加耳朵橘v2+Z紫+怒猫cyberpunk轴+box Jade的混轴</p><p>满满的沧桑</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/07/fKpSZF.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/07/fKpSZF.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="露轴"></p>            </div><p>装上破晓</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/07/fKSxqU.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/07/fKSxqU.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="破晓上机"></p>            </div><p>换上MDA后原本套件存在的<kbd>BackSpace</kbd>键卡外壳的问题得到了一定的改善。由于MDA高度的键帽比我原来的键帽更厚实，因此声音也得到了一定的改善。</p><p>重点是，这个触感，awsl(❤´艸｀❤)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;等了一年的键帽他也来了&lt;/p&gt;</summary>
    
    
    
    <category term="键盘" scheme="http://enderxiao.top/categories/%E9%94%AE%E7%9B%98/"/>
    
    <category term="Life" scheme="http://enderxiao.top/categories/Life/"/>
    
    <category term="客制化" scheme="http://enderxiao.top/categories/%E9%94%AE%E7%9B%98/%E5%AE%A2%E5%88%B6%E5%8C%96/"/>
    
    
    <category term="客制化" scheme="http://enderxiao.top/tags/%E5%AE%A2%E5%88%B6%E5%8C%96/"/>
    
    <category term="键帽" scheme="http://enderxiao.top/tags/%E9%94%AE%E5%B8%BD/"/>
    
    <category term="MDA破晓" scheme="http://enderxiao.top/tags/MDA%E7%A0%B4%E6%99%93/"/>
    
    <category term="机械键盘" scheme="http://enderxiao.top/tags/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/"/>
    
    <category term="life" scheme="http://enderxiao.top/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>python进阶-调试与测试</title>
    <link href="http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-%E8%B0%83%E8%AF%95%E4%B8%8E%E6%B5%8B%E8%AF%95/"/>
    <id>http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-%E8%B0%83%E8%AF%95%E4%B8%8E%E6%B5%8B%E8%AF%95/</id>
    <published>2021-08-06T03:39:13.000Z</published>
    <updated>2021-08-10T00:05:35.728Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记，调试与测试</p><a id="more"></a><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>许多高级语言中都内置了一套<code>try...exceot...finally...</code>的错误处理机制，比如java中的<code>try...catch</code>，python中也包含一套用于错误处理的代码。</p><h3 id="try"><a href="#try" class="headerlink" title="try"></a>try</h3><p>和java中的一样，解释器会先执行<code>try</code>关键字中的代码，如果在某处出错，则会立即停止继续执行<code>try</code>中的代码段落，而转去执行对应<code>except</code>中的代码段，执行完后，将跳过<code>else</code>，如果有<code>finally</code>，则会执行<code>finally</code>中的代码。</p><p>如果没有发生错误。则解释器会执行完<code>try</code>、<code>else</code>和<code>finally</code>中的所有内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">&#x27;try...&#x27;</span>)</span><br><span class="line">    f = <span class="number">10</span>/<span class="built_in">int</span>(x)</span><br><span class="line">    print(<span class="string">&#x27;result:&#x27;</span>, r)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;ValueError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;ZeroDivisionError:&#x27;</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;no error!&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">&#x27;finally...&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当<code>x</code>输入0时，语句<code>f = 10/int(x)</code>会出现除0错误，此时直接跳转到第7行继续执行，因此最终结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>当<code>x</code>输入a，或者其他不能转化为数字的字符时，<code>int(x)</code>就会出现参数错误，此时直接跳转到第5行执行，因此最终结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: x</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>但当我们输入正确值时，比如输入2，则不会发生异常，从而得到以下结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>...</span><br><span class="line">result: <span class="number">5</span></span><br><span class="line">no error!</span><br><span class="line"><span class="keyword">finally</span>...</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>与java一样，python中的异常也是类，并且有继承关系，所有异常均继承自<code>BaseException</code>，这一特性导致当我们用某一类型去捕获一个异常时，如果遇到该类型异常的子类异常，也会将其捕获：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    foo()</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;ValueError&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> UnicodeError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&#x27;UnicodeError&#x27;</span>)</span><br></pre></td></tr></table></figure><p>由于<code>UnicodeError</code>是<code>ValueError</code>类型异常的子类异常，因此第5行之后的代码将永远无法出发，发生<code>UnicodeError</code>异常时，它将优先被写在前面且可以捕获该异常的第三行<code>except</code>捕获。</p><p>常见异常继承关系可参考python3官方文档：</p><div class="tag link"><a class="link-card" title="python3异常继承关系" href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">python3异常继承关系</p><p class="url">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</p></div></a></div><details yellow><summary> 点击查看异常继承关系 </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      |    +-- FloatingPointError</span><br><span class="line">      |    +-- OverflowError</span><br><span class="line">      |    +-- ZeroDivisionError</span><br><span class="line">      +-- AssertionError</span><br><span class="line">      +-- AttributeError</span><br><span class="line">      +-- BufferError</span><br><span class="line">      +-- EOFError</span><br><span class="line">      +-- ImportError</span><br><span class="line">      |    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      |    +-- IndexError</span><br><span class="line">      |    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      |    +-- UnboundLocalError</span><br><span class="line">      +-- OSError</span><br><span class="line">      |    +-- BlockingIOError</span><br><span class="line">      |    +-- ChildProcessError</span><br><span class="line">      |    +-- ConnectionError</span><br><span class="line">      |    |    +-- BrokenPipeError</span><br><span class="line">      |    |    +-- ConnectionAbortedError</span><br><span class="line">      |    |    +-- ConnectionRefusedError</span><br><span class="line">      |    |    +-- ConnectionResetError</span><br><span class="line">      |    +-- FileExistsError</span><br><span class="line">      |    +-- FileNotFoundError</span><br><span class="line">      |    +-- InterruptedError</span><br><span class="line">      |    +-- IsADirectoryError</span><br><span class="line">      |    +-- NotADirectoryError</span><br><span class="line">      |    +-- PermissionError</span><br><span class="line">      |    +-- ProcessLookupError</span><br><span class="line">      |    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      |    +-- NotImplementedError</span><br><span class="line">      |    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      |    +-- IndentationError</span><br><span class="line">      |         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      |    +-- UnicodeError</span><br><span class="line">      |         +-- UnicodeDecodeError</span><br><span class="line">      |         +-- UnicodeEncodeError</span><br><span class="line">      |         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure>              </div>            </details><p>此外，和java一样，python中的异常处理机制也支持多层调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / <span class="built_in">int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bar(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;Error:&#x27;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&#x27;finally...&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>foo()</code>函数如果发生异常，在<code>main</code>函数中就能被捕捉到，不需要每层到写<code>try...except</code></p><p>因此在查找错误的源头时，调用栈非常重要。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># err.py:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / <span class="built_in">int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    bar(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>执行，结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>python3 err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;err.py&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File <span class="string">&quot;err.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> main</span><br><span class="line">    bar(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;err.py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> bar</span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line">  File <span class="string">&quot;err.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> foo</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / <span class="built_in">int</span>(s)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>出错并不可怕，可怕的是不知道哪里出错了。解读错误信息是定位错误的关键。我们从上往下可以看到整个错误的调用函数链：</p><p>错误信息第1行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br></pre></td></tr></table></figure><p>告诉我们这是错误的跟踪信息。</p><p>第2~3行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;err.py&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p>调用<code>main()</code>出错了，在代码文件<code>err.py</code>的第11行代码，但原因是第9行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;err.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> main</span><br><span class="line">  bar(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调用<code>bar(&#39;0&#39;)</code>出错了，在代码文件<code>err.py</code>的第9行代码，但原因是第6行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;err.py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> bar</span><br><span class="line">  <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>原因是<code>return foo(s) * 2</code>这个语句出错了，但这还不是最终原因，继续往下看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;err.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> foo</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span> / <span class="built_in">int</span>(s)</span><br></pre></td></tr></table></figure><p>原因是<code>return 10 / int(s)</code>这个语句出错了，这是错误产生的源头，因为下面打印了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroDivisionError: integer division <span class="keyword">or</span> modulo by zero</span><br></pre></td></tr></table></figure><p>根据错误类型<code>ZeroDivisionError</code>，我们判断，<code>int(s)</code>本身并没有出错，但是<code>int(s)</code>返回<code>0</code>，在计算<code>10 / 0</code>时出错，至此，找到错误源头。</p><div class="note danger"><p>出错的时候，一定要分析错误的调用栈信息，才能定位错误的位置。</p></div><h3 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h3><p>如果我们既想要记录错误，有希望代码能够继续允许，可以使用python为我们提供的<code>logging</code>库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># err_logging.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / <span class="built_in">int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bar(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">print(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure><p>程序打印完异常信息后会继续执行，并正常退出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>python3 err_logging.py</span><br><span class="line">ERROR:root:division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;err_logging.py&quot;</span>, line <span class="number">13</span>, <span class="keyword">in</span> main</span><br><span class="line">    bar(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;err_logging.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> bar</span><br><span class="line">    <span class="keyword">return</span> foo(s) * <span class="number">2</span></span><br><span class="line">  File <span class="string">&quot;err_logging.py&quot;</span>, line <span class="number">6</span>, <span class="keyword">in</span> foo</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / <span class="built_in">int</span>(s)</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>通过配置，<code>logging</code>还可以把错误记录到日志文件里，方便事后排查。</p><h3 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h3><p>既然错误时类，这就意味着我们可以定义自己的异常，并在适当的时候抛出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># err_raise.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooError</span>(<span class="params">ValueError</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">s</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> FooError(<span class="string">&#x27;invalid value: %s&#x27;</span> % s)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line">foo(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行该文件得到结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>python3 err_raise.py </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;err_throw.py&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">  File <span class="string">&quot;err_throw.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> foo</span><br><span class="line">    <span class="keyword">raise</span> FooError(<span class="string">&#x27;invalid value: %s&#x27;</span> % s)</span><br><span class="line">__main__.FooError: invalid value: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>但除非必须，否则还是推荐使用python内置的错误类型。</p><p>此外，有时我们使代码高内聚松耦合，不会在出错的地方就地处理异常，而是将其抛出，让更高层级去处理，所以有时我们会这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># err_reraise.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">s</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;invalid value: %s&#x27;</span> % s)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        foo(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;ValueError!&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><p><code>raise</code>语句如果不带参数，就会把当前错误原样抛出。</p><p>在<code>except</code>中<code>raise</code>一个Error，还可以用来把一种类型的错误转化成另一种类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">10</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&#x27;input error!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意不要将一个错误转换为好不相关的错误，比如<code>IOError</code>转换成<code>ValueError</code>。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试能力对于一个工具来说十分重要，因为大多数情况下，我们写的代码不能一次通过，需要反复调试该bug。Python也有自己的调试方法。</p><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p>最快捷的调试方式我认为就是使用print来检查哪个值出了问题，或是在哪个地方出了问题，初学者也会经常使用。</p><p>但是使用print会带来一个问题，就是测试完毕要删掉他们，如果不删掉。结果会产生大量。</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>于是python中提供了一种代替print的方法<code>assert</code>断言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">s</span>):</span></span><br><span class="line">    n = <span class="built_in">int</span>(s)</span><br><span class="line">    <span class="keyword">assert</span> n != <span class="number">0</span>, <span class="string">&#x27;n is zero!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span> / n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    foo(<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>assert</code>的意思是，表达式<code>n != 0</code>应该是<code>True</code>，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p><p>如果断言失败，<code>assert</code>语句本身就会抛出<code>AssertionError</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AssertionError: n is zero!</span><br></pre></td></tr></table></figure><p>程序中如果到处充斥着<code>assert</code>，和<code>print()</code>相比也好不到哪去。不过，启动Python解释器时可以用<code>-O</code>参数来关闭<code>assert</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python <span class="literal">-O</span> err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h3><p>把<code>print()</code>替换为<code>logging</code>是第3种方式，和<code>assert</code>比，<code>logging</code>不会抛出错误，而且可以输出到文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line">logging.info(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line">print(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:\Programing\Python\Hello\Hello.py&quot;</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">10</span> / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>我们发先只有错误类型，想要输出的<code>logging.info(&#39;n = %d&#39; % n)</code>并没有输出。</p><p>需要做如下设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line">logging.info(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line">print(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO:root:n = <span class="number">0</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:\Programing\Python\Hello\Hello.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">10</span> / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>这就是<code>logging</code>的好处，它允许你指定记录信息的级别，有<code>DEBUG</code>，<code>INFO</code>，<code>WARNING</code>，<code>ERROR</code>等几个级别，当我们指定<code>level=INFO</code>时，<code>logging.debug</code>就不起作用了。同理，指定<code>level=WARNING</code>后，<code>debug</code>和<code>info</code>就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</p><p><code>logging</code>的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</p><h3 id="pbd"><a href="#pbd" class="headerlink" title="pbd"></a>pbd</h3><p>第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。</p><p>对于如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hellp.py</span></span><br><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line">print(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure><p>用如下方式运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m pdb Hello.py</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; e:\programing\python\hello\hello.py(<span class="number">3</span>)&lt;module&gt;()</span><br><span class="line">-&gt; s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure><p>输入命令<code>l</code>来查看代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line">  <span class="number">1</span>     <span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">  <span class="number">2</span></span><br><span class="line">  <span class="number">3</span>  -&gt; s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  <span class="number">4</span>     n = int(s)</span><br><span class="line">  <span class="number">5</span>     print(<span class="number">10</span> / n)</span><br><span class="line">[<span class="type">EOF</span>]</span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure><p>输入命令<code>n</code>可以单步执行代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">&gt; e:\programing\python\hello\hello.py(<span class="number">4</span>)&lt;module&gt;()</span><br><span class="line">-&gt; n = int(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; e:\programing\python\hello\hello.py(<span class="number">5</span>)&lt;module&gt;()</span><br><span class="line">-&gt; print(<span class="number">10</span> / n)</span><br><span class="line">(Pdb)</span><br></pre></td></tr></table></figure><p>任何时候都可以输入命令<code>p 变量名</code>来查看变量：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line"><span class="string">&#x27;0&#x27;</span></span><br><span class="line">(Pdb) p n</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>输入命令<code>q</code>结束调试，退出程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure><p>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</p><h3 id="pdb-set-trace"><a href="#pdb-set-trace" class="headerlink" title="pdb.set_trace()"></a>pdb.set_trace()</h3><p>这个方法也是用pdb，但是不需要单步执行，我们只需要<code>import pdb</code>，然后，在可能出错的地方放一个<code>pdb.set_trace()</code>，就可以设置一个断点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n = <span class="built_in">int</span>(s)</span><br><span class="line">pdb.set_trace() <span class="comment"># 运行到这里会自动暂停</span></span><br><span class="line">print(<span class="number">10</span> / n)</span><br></pre></td></tr></table></figure><p>运行代码，程序会自动在<code>pdb.set_trace()</code>暂停并进入pdb调试环境，可以用命令<code>p</code>查看变量，或者用命令<code>c</code>继续运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python Hello.py</span><br><span class="line">&gt; e:\programing\python\hello\hello.py(<span class="number">7</span>)&lt;module&gt;()</span><br><span class="line">-&gt; print(<span class="number">10</span> / n)</span><br><span class="line">(Pdb) p n</span><br><span class="line"><span class="number">0</span></span><br><span class="line">(Pdb) p s</span><br><span class="line"><span class="string">&#x27;0&#x27;</span></span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:\Programing\Python\Hello\Hello.py&quot;</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">10</span> / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>最后，还能使用许多支持调式功能的IDE，设置断点只需要点一下就行了，十分方便</p><p>比如VSCode、PyCharm等等。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>例如我们编写一个可以通过属性来访问的dict：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mydict.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,**kw</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(**kw)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self[key] = value</span><br></pre></td></tr></table></figure><p>对于如上类，我们需要测试如下内容：</p><ol><li>能否正常创建并通过访问属性的方式访问</li><li>能否通过普通<code>dict</code>的方式赋值，并通过属性的方式访问</li><li>能否通过设置属性的方式进行赋值</li><li>以普通<code>dict</code>方式访问不存在的key值能否正常报<code>KeyError</code>异常</li><li>以属性方式访问时，能否正常报<code>AttributeError</code>异常</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mydict <span class="keyword">import</span> MyDict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDict</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_init</span>(<span class="params">self</span>):</span></span><br><span class="line">        d = MyDict(a = <span class="number">1</span>, b = <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        self.assertEqual(d.a, <span class="number">1</span>)</span><br><span class="line">        self.assertEqual(d.b, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        self.assertTrue(insinstance(d, <span class="built_in">dict</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_key</span>(<span class="params">self</span>):</span></span><br><span class="line">        d = MyDict()</span><br><span class="line">        d[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;value&#x27;</span></span><br><span class="line">        self.assertEqual(d.key, <span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_attr</span>(<span class="params">self</span>):</span></span><br><span class="line">        d = MyDict()</span><br><span class="line">        d.key = <span class="string">&#x27;value&#x27;</span></span><br><span class="line">        self.assertTrue(key <span class="keyword">in</span> d)</span><br><span class="line">        self.assertEqual(d[<span class="string">&#x27;key&#x27;</span>], <span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_keyerror</span>(<span class="params">self</span>):</span></span><br><span class="line">        d = MyDict()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(KeyError):</span><br><span class="line">            value = d[<span class="string">&#x27;empty&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_attrerror</span>(<span class="params">slef</span>):</span></span><br><span class="line">        d = MyDict()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(AttributeError):</span><br><span class="line">            value = d.empty</span><br></pre></td></tr></table></figure><p>编写单元测试时，需要编写一个单元测试类，从<code>unittest.TestCase</code>继承。</p><p>以<code>test</code>开头的方法就是测试方法，不以<code>test</code>开头的方法不被认为是测试方法，测试的时候不会被执行。</p><p>其中类似<code>assertEqual</code>的属性则是<code>unittest.TestCase</code>为我们提供的断言，用来判断输出是否符合我们的期望。<code>assertEqual</code>用来判断返回结果是否与预期结果相符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.assertEqual(<span class="built_in">abs</span>(-<span class="number">1</span>), <span class="number">1</span>) <span class="comment"># 断言函数返回的结果与1相等</span></span><br></pre></td></tr></table></figure><p><code>assertRaises</code>用来判断指定语句抛出的异常是否是预期类型的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> self.assertRaises(AttributeError):</span><br><span class="line">    value = d.empty</span><br></pre></td></tr></table></figure><p>with的使用详见<a href="https://enderxiao.top/Python/python%E5%9F%BA%E7%A1%80/">python基础 - Ender (enderxiao.top)</a></p><p>之后我们需要做的是就是运行测试。最简单的运行方式是在<code>mydict_test.py</code>的最后加上两行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>这样就可以把<code>mydict_test.py</code>当做正常的python脚本运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python mydict_test.py</span><br></pre></td></tr></table></figure><p>另一种方法是在命令行通过参数<code>-m unittest</code>直接运行单元测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python <span class="literal">-m</span> unittest mydict_test</span><br><span class="line">.....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">5</span> tests <span class="keyword">in</span> <span class="number">0.000</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>这是推荐的做法，因为这样可以一次批量运行很多单元测试，并且，有很多工具可以自动来运行这些单元测试。</p><p>另外，可以在单元测试中编写两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。</p><p><code>setUp()</code>和<code>tearDown()</code>方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在<code>setUp()</code>方法中连接数据库，在<code>tearDown()</code>方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDict</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;setUp...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDown</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;tearDown...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以再次运行测试看看每个测试方法调用前后是否会打印出<code>setUp...</code>和<code>tearDown...</code>。</p><h2 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h2><p>如果你经常阅读Python的官方文档，可以看到很多文档都有示例代码。比如<a href="https://docs.python.org/3/library/re.html">re模块</a>就带了很多示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; m &#x3D; re.search(&#39;(?&lt;&#x3D;abc)def&#39;, &#39;abcdef&#39;)</span><br><span class="line">&gt;&gt;&gt; m.group(0)</span><br><span class="line">&#39;def&#39;</span><br></pre></td></tr></table></figure><p>可以把这些示例代码在Python的交互式环境下输入并执行，结果与文档中的示例代码显示的一致。</p><p>这些代码与其他说明可以写在注释中，然后，由一些工具来自动生成文档。既然这些代码本身就可以粘贴出来直接运行，并且通过某些方式可以自动执行写在注释中的这些代码。</p><p>Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p><p>doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用<code>...</code>表示中间一大段烦人的输出。</p><p>例如对上一章中的<code>MyDict</code>进行测试可以这样进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hello.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDict</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Simple dict but also support access as x.y style.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d1 = MyDict()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d1[&#x27;x&#x27;] = 100</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d1.x</span></span><br><span class="line"><span class="string">    100</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d1.y = 200</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d1[&#x27;y&#x27;]</span></span><br><span class="line"><span class="string">    200</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d2 = MyDict(a=1, b=2, c=&#x27;3&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d2.c</span></span><br><span class="line"><span class="string">    &#x27;3&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d2[&#x27;empty&#x27;]</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    KeyError: &#x27;empty&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d2.empty</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    AttributeError: &#x27;MyDict&#x27; object has no attribute &#x27;empty&#x27;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kw</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Dict, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r&quot;&#x27;MyDict&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python Hello.py</span><br></pre></td></tr></table></figure><p>什么输出也没有。这说明我们编写的doctest运行都是正确的。如果程序有问题，比如把<code>__getattr__()</code>方法注释掉，再运行就会报错：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> python Hello.py</span><br><span class="line">**********************************************************************</span><br><span class="line">File <span class="string">&quot;E:\Programing\Python\Hello\Hello.py&quot;</span>, line <span class="number">8</span>, <span class="keyword">in</span> __main__.MyDict</span><br><span class="line">Failed example:</span><br><span class="line">    d1.x</span><br><span class="line">Exception raised:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">&quot;C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.1520.0_x64__qbz5n2kfra8p0\lib\doctest.py&quot;</span>, line <span class="number">1336</span>, <span class="keyword">in</span> __run</span><br><span class="line">        exec(compile(example.source, filename, <span class="string">&quot;single&quot;</span>,</span><br><span class="line">      File <span class="string">&quot;&lt;doctest __main__.MyDict[2]&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        d1.x</span><br><span class="line">    AttributeError: <span class="string">&#x27;MyDict&#x27;</span> object has no attribute <span class="string">&#x27;x&#x27;</span></span><br><span class="line">**********************************************************************</span><br><span class="line">File <span class="string">&quot;E:\Programing\Python\Hello\Hello.py&quot;</span>, line <span class="number">14</span>, <span class="keyword">in</span> __main__.MyDict</span><br><span class="line">Failed example:</span><br><span class="line">    d2.c</span><br><span class="line">Exception raised:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File <span class="string">&quot;C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.1520.0_x64__qbz5n2kfra8p0\lib\doctest.py&quot;</span>, line <span class="number">1336</span>, <span class="keyword">in</span> __run</span><br><span class="line">        exec(compile(example.source, filename, <span class="string">&quot;single&quot;</span>,</span><br><span class="line">      File <span class="string">&quot;&lt;doctest __main__.MyDict[6]&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        d2.c</span><br><span class="line">    AttributeError: <span class="string">&#x27;MyDict&#x27;</span> object has no attribute <span class="string">&#x27;c&#x27;</span></span><br><span class="line">**********************************************************************</span><br><span class="line"><span class="number">1</span> items had failures:</span><br><span class="line">   <span class="number">2</span> of   <span class="number">9</span> <span class="keyword">in</span> __main__.MyDict</span><br><span class="line">***Test Failed*** <span class="number">2</span> failures.</span><br></pre></td></tr></table></figure><p>注意到最后3行代码。当模块正常导入时，doctest不会被执行。只有在命令行直接运行时，才执行doctest。所以，不必担心doctest会在非测试环境下执行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记，调试与测试&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="进阶" scheme="http://enderxiao.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="异常处理" scheme="http://enderxiao.top/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="调试" scheme="http://enderxiao.top/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="测试" scheme="http://enderxiao.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>BBOX-60-CyberSpace Edition</title>
    <link href="http://enderxiao.top/%E9%94%AE%E7%9B%98/%E5%AE%A2%E5%88%B6%E5%8C%96/bbox-60-cyberspace-edition/"/>
    <id>http://enderxiao.top/%E9%94%AE%E7%9B%98/%E5%AE%A2%E5%88%B6%E5%8C%96/bbox-60-cyberspace-edition/</id>
    <published>2021-08-05T07:46:47.000Z</published>
    <updated>2021-08-16T13:20:29.439Z</updated>
    
    <content type="html"><![CDATA[<p>等了一年的外壳它终于发货了</p><a id="more"></a><h2 id="CyberSpace"><a href="#CyberSpace" class="headerlink" title="CyberSpace!"></a>CyberSpace!</h2><p>2020年8月1日，由Ulliam 与 buger.work联名设计，JTK生产的Box60 CyberSpace特别版开启团购。</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecQFP.png" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecQFP.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="Box60-CyberSpaceEdition01"><br><img src="https://z3.ax1x.com/2021/08/05/fec8SS.md.png" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fec8SS.md.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="Box60-CyberSpaceEdition02"><br><img src="https://z3.ax1x.com/2021/08/05/fecGQg.md.png" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecGQg.md.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="Box60-CyberSpaceEdition03"></p>            </div><p>入坑以来，一直想要一款磨砂透明的外壳，无奈一次又一次错过，例如之前的富贵家的<code>Canoe PC</code>，<code>Think6.5 V2</code>等等一些列非常优秀的设计。之后一个偶然的机会看到这款紫透的壳子，突然就被戳中了，我自己是个非常喜欢紫色的人，所以看到这个款的瞬间就决定下单然而。。。</p><p>本来预计的发货时间是2021年2月，但到我手上已经是2021年的8月1号了。</p><p>实际上6月份左右同款造型的Box60-KONMOMO</p><div class="gallery center " col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fec9d1.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fec9d1.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="Box60-KONMOMO"></p>            </div><p>已经到达了各位玩家的手上，但由于色差的问题，被各位玩家吐槽。于是我开始担心起我购买的版本了。如果不是因为这个，我可能都忘了我买了这个套件。</p><p>但是拿到实物之后我还是非常满意的，虽然颜色跟渲染图上多少有些出入吧，但是是我喜欢的颜色。</p><div class="gallery center " col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecVQe.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecVQe.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="实物01"></p>            </div><p>紫色的饱和度实际上是比渲染图要高一些的。</p><p>既然是梦寐以求的PC键盘，那我怎么也得用上毕生所学，让他尽量完美。</p><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><p>其实在这把键盘之前我组过一把由韩国TX keyboard工作室设计的eo87，这款套件是TOP结构，手感一致性较好，为了发挥它的优势，我当时买的是焊接的版本，但那其实是我第一次焊接。</p><p>然后悲剧发生了，S键位焊接了一颗无法触发的轴上去，在解焊的过程中由于接触焊枪的时间过长，导致焊盘脱落，然后就不敢再动了/(ㄒoㄒ)/~~</p><p>因此呢，这次为了保证不会出现上次的悲剧，还是选择了热插拔的PCB，哎嘿(╹ڡ╹ )</p><p>是一块由mokey设计生产的64PCB</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecii6.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecii6.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="Mokey-64PCB"></p>            </div><p>在透过深色的透明外壳观测时，白色PCB会比黑色PCB更加的显眼，能够更好地展现透壳的性感之处。</p><p>支持VIA改键，不用和以前的qmk方案一样等半天还要刷进去，插上就能改，着实方便</p><h3 id="定位板"><a href="#定位板" class="headerlink" title="定位板"></a>定位板</h3><p>其实早就想试试PC定位板了，之前用过铝定，Fr4定位板，和铜定位板，各有各的优势吧，铝定大概是我比较不喜欢的i(*￣;(￣ *)</p><p>PC定位板声音柔和，且没有金属定位板的震手感。B站大佬用PC定敲出的雨滴声真是太戳我了。</p><p>Box-60被说过很多次空腔音很大，看ZF里大佬的修改，以及实验，最终发现，应该是因为Box-60为了丰富趣味性，采用了拼装的设计，这确实让我在收到套件以后的组装过程中有一种装高达的错觉，但是也导致了内部比较多的空隙。这些大块的空隙可能是导致空腔音的原因。B站上也有使用树脂填满空隙优化声音的教程，但是谁让我懒呢(*￣3￣)╭</p><p>于是，盲目分析一波，敲击键盘时，声音首先会在定位板和PCB之间反射，接着才会传到pcb下以及两侧的空腔处，那么，在pcb和定位板之间增加垫片，也许能够解决大部分问题，真是大聪明(￣﹃￣)</p><p>但公模的PCB要找到很完美的垫子实属困难，为了支持多变的配列，量产的垫子不是空格处有缺口就是方向键有缺口。</p><p>如果定位板厚到能塞满这一区域的话，那也不用操心垫子的问题，于是，几番寻找下来，终于找到了这款狗蛋家的5mmPC定！</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecneA.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecneA.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="5mm着实挺扎实"></p>            </div><p>嗯~ o(*￣▽￣*)o这个冬瓜白<del>着实冬瓜</del>着实美丽</p><h3 id="轴体"><a href="#轴体" class="headerlink" title="轴体"></a>轴体</h3><p>这次用被吹爆的青龙轴，由燥极设计，佳达隆代工，一款无论是外观还是手感都非常棒的轴体，3元/颗也不算贵，其实最开始还是被颜值吸引的，毕竟紫色控哎嘿(╹ڡ╹ )</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecCIx.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecCIx.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="青龙轴01"></p><p><img src="https://z3.ax1x.com/2021/08/05/feckRO.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/feckRO.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="青龙轴02"></p>            </div><p>到手发现手感和声音着实不错，这款轴有两个版本，主要是润滑上的区别，一个是只润滑小脚和弹簧，一个是CAP润滑，本来是想买CAP润滑的版本但是到手发现自己买错了23333，就用着吧，主要是不知道CAP润滑是个啥东西，想尝尝鲜。</p><h3 id="卫星轴"><a href="#卫星轴" class="headerlink" title="卫星轴"></a>卫星轴</h3><p>下面有请耳朵选手登场！</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecFJK.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecFJK.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="耳朵卫星轴V3"></p>            </div><p>这次选择的是新的耳朵卫星轴v3，在v2的基础上重新开模，增加钢丝垫片，假轴垫片，卫星轴垫片做了假轴与外壳的分离，可玩性和手感又上了一个档次，好用是真的好用，贵也是真的贵/(ㄒoㄒ)/~~</p><h3 id="键帽"><a href="#键帽" class="headerlink" title="键帽"></a>键帽</h3><p>akko这几年疯狂出复刻，可谓皆大欢喜。键帽质量不错，价格便宜，配色还都是G*K的高热度配色，杀疯了。</p><p>这套就是akko出的霓虹键帽，懂得都懂</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecAzD.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecAzD.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="耳朵卫星轴V3"></p>            </div><p>虽说是大全套，但是其实支持的配列着实有限，特别是，它没有2U的<code>shift</code></p><p>另外，F和J两个盲打按键的弧度要比其他字母区更大，且没有常规按键替换。</p><h3 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h3><p>由于这次购买的是热插拔键帽，而且轴体都是已经润滑过的，节省了不少时间，本次组装最花时间的大概就是组装外壳和调教卫星轴了吧，新版的耳朵卫星轴垫子着实多，泰阳22058润滑钢丝，杜邦105+205调配由润滑假轴。</p><p>下面是组装过程：</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecZsH.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecZsH.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="组装01"><br><img src="https://z3.ax1x.com/2021/08/05/feceLd.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/feceLd.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="组装02"><br><img src="https://z3.ax1x.com/2021/08/05/fecKot.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecKot.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="组装03"></p>            </div><h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><p>组好了当然要臭美一下O(∩_∩)O</p><p>定位板的均光效果也非常不错</p><div class="gallery center" col='1'>              <p><img src="https://z3.ax1x.com/2021/08/05/fecudI.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fecudI.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="成品01"><br><img src="https://z3.ax1x.com/2021/08/05/fec1W8.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/fec1W8.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="成品02"><br><img src="https://z3.ax1x.com/2021/08/05/feclJf.md.jpg" class="lazyload placeholder" data-srcset="https://z3.ax1x.com/2021/08/05/feclJf.md.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="成品03"></p>            </div><h3 id="打字音"><a href="#打字音" class="headerlink" title="打字音"></a>打字音</h3><p>这次打字音着实令人满意，有雨滴内味了(/ω＼*)……… (/ω•＼*)</p><div  style="position:relative; padding-bottom:75%; width:100%; height:0"><iframe src="//player.bilibili.com/player.html?aid=589621423&bvid=BV1Dq4y1D7WE&cid=382508158&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; height: 100%; width: 100%;"> </iframe></div><p>至此本次组装结束，自己还是比较满意的hhh，期待下次！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;等了一年的外壳它终于发货了&lt;/p&gt;</summary>
    
    
    
    <category term="键盘" scheme="http://enderxiao.top/categories/%E9%94%AE%E7%9B%98/"/>
    
    <category term="Life" scheme="http://enderxiao.top/categories/Life/"/>
    
    <category term="客制化" scheme="http://enderxiao.top/categories/%E9%94%AE%E7%9B%98/%E5%AE%A2%E5%88%B6%E5%8C%96/"/>
    
    
    <category term="客制化" scheme="http://enderxiao.top/tags/%E5%AE%A2%E5%88%B6%E5%8C%96/"/>
    
    <category term="机械键盘" scheme="http://enderxiao.top/tags/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/"/>
    
    <category term="life" scheme="http://enderxiao.top/tags/life/"/>
    
    <category term="BBOX60" scheme="http://enderxiao.top/tags/BBOX60/"/>
    
  </entry>
  
  <entry>
    <title>python进阶—函数式编程</title>
    <link href="http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6%E2%80%94%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6%E2%80%94%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2021-08-05T03:39:13.000Z</published>
    <updated>2021-08-10T00:04:15.078Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记函数式编程部分</p><a id="more"></a><h2 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h2><div class="note quote"><p>函数式编程是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数是没有变量的，因此，任意一个函数，只要输入确定，输出就是确定的。这种纯函数我们称为没有副作用</p></div><p>为什么说纯函数只要输入确定，输出就能确定呢，因为允许变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入可能得到不同的输出，因此这种函数是有副作用的。</p><p>函数式编程的一个特点：</p><div class="note info"><p>允许函数本身作为参数传入另一个函数，且还允许返回一个函数</p></div><p>需要注意的是，python允许使用变量，因此python不是纯函数式编程语言</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><hr><p>python中函数名可以理解为指向函数体的变量，因此，可以将函数名赋值给变量，也可以对函数名重新赋值，例如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; abs</span><br><span class="line">&lt;build<span class="operator">-in</span> <span class="function"><span class="keyword">function</span> <span class="title">abs</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt; f = abs</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;build<span class="operator">-in</span> <span class="function"><span class="keyword">function</span> <span class="title">abs</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt; abs = <span class="number">10</span></span><br><span class="line">&gt;&gt;&gt; abs</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt;&gt;&gt; abs(<span class="literal">-10</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> object is not callable</span><br></pre></td></tr></table></figure><p>可见将由于<code>abs = 10</code>这条语句，导致<code>abs(-10)</code>不再具有绝对值的功能，此时必须重启python交互环境，<code>abs</code>才能恢复原有指向。</p><p>由此引入高阶函数的概念：</p><div class="note quote"><p>可以接受另一个函数作为参数的函数称为高阶函数</p></div><p>一个简单的高阶函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x, y, f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line">print(add(-<span class="number">5</span>, <span class="number">6</span>, <span class="built_in">abs</span>))</span><br><span class="line"><span class="comment"># 输出 11</span></span><br></pre></td></tr></table></figure><h3 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h3><hr><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><hr><div class="note quote"><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p></div><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">map</span>(f,[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">print(<span class="built_in">list</span>(r))</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p>由于map函数将返回惰性加载的<code>Interator</code>，因此此处使用<code>list()</code>将其转化为list</p><p>虽然如上简单操作看起来并没有什么意义，但我们还能使用map完成如下有实际意义的操作：</p><p>利用<code>map()</code>函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：<code>[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]</code>，输出：<code>[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> name[:<span class="number">1</span>].upper() + name[<span class="number">1</span>:].lower()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L1 = [<span class="string">&#x27;adam&#x27;</span>, <span class="string">&#x27;LISA&#x27;</span>, <span class="string">&#x27;barT&#x27;</span>]</span><br><span class="line">L2 = <span class="built_in">list</span>(<span class="built_in">map</span>(normalize, L1))</span><br><span class="line">print(L2)</span><br><span class="line"><span class="comment"># [&#x27;Adam&#x27;, &#x27;Lisa&#x27;, &#x27;Bart&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><hr><div class="note quote"><p><code>reduce</code>把一个函数作用在一个序列`[x1</p></div><p>效果类似：</p><div class="note info"><p>reduce(f</p></div><p>使用reduce弄够完成如下事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prod</span>(<span class="params">L</span>):</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x * y,L)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;3 * 5 * 7 * 9 =&#x27;</span>, prod([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="comment"># 3 * 5 * 7 * 9 = 945</span></span><br></pre></td></tr></table></figure><p>使用map与reduce的组合，可以完成如下复杂的操作：</p><p>利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span>(<span class="params">s</span>):</span></span><br><span class="line">a,b = s.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y: x*<span class="number">10</span>+y, <span class="built_in">map</span>(<span class="built_in">int</span>,a)) + reduce(<span class="keyword">lambda</span> x,y: x * <span class="number">0.1</span> + y ,<span class="built_in">map</span>(<span class="built_in">int</span>,b[::-<span class="number">1</span>])) * <span class="number">0.1</span></span><br><span class="line">    </span><br><span class="line">print(<span class="string">&#x27;str2float(\&#x27;123.456\&#x27;) =&#x27;</span>, str2float(<span class="string">&#x27;123.456&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><hr><p><code>filter</code>机制与<code>map</code>有些相似，都是将将传入的函数作用在传入可便利对象中的每个元素上，区别在于，<code>fliter</code>是根据再用在该元素上的函数返回值是<code>true</code>还是<code>false</code>，从而决定该函数是否保留，最后返回所有被保留的元素组成的<code>list</code></p><p>例如一个筛出奇数的选择器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</span><br><span class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></span><br></pre></td></tr></table></figure><p><code>filter</code>与<code>map</code>一样，但会的是一个惰性加载的<code>Iterator</code>，需要使用<code>list()</code></p><h4 id="filter应用"><a href="#filter应用" class="headerlink" title="filter应用"></a>filter应用</h4><hr><p>接下来我们利用<code>Iterator</code>、<code>filter</code>实现<a href="https://enderxiao.top/ACM/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/">埃氏筛法</a>：</p><p>首先对该问题进行分解：</p><ol><li>除了2以外的偶数都是和数，因此我们只需要考虑奇数，为此，我们需要先创建一个能够不断产生奇数的<code>Iterator</code></li><li>创建一个用来筛选的函数</li><li>接下来我们需要再创建一个函数，利用<code>filter</code>筛去1中的一些奇和数。</li><li>最后打印</li></ol><h5 id="产生奇数"><a href="#产生奇数" class="headerlink" title="产生奇数"></a>产生奇数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iterator</span>():</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br></pre></td></tr></table></figure><p>构造一个能不断产生奇数的<code>Iterator</code></p><h5 id="筛选函数"><a href="#筛选函数" class="headerlink" title="筛选函数"></a>筛选函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes_filter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>使用n筛去n的倍数，由于<code>filter</code>的第一个参数需要接受一个函数，我们可以再此处返回一个<code>lambda</code>函数，使这个函数既可以接受参数又可以作为<code>filter</code>的第一个参数</p><h5 id="素数生成器"><a href="#素数生成器" class="headerlink" title="素数生成器"></a>素数生成器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_iterator</span>():</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n += <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes_filter</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x % n &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    odd = _odd_iterator()  <span class="comment"># 初始化序列</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="built_in">next</span>(odd)  <span class="comment"># 从奇数列中取d</span></span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        odd = <span class="built_in">filter</span>(primes_filter(n), odd)  <span class="comment"># 构造新序列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再写个生成器来取前max个素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_prime</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    p = primes()</span><br><span class="line">    n = <span class="built_in">next</span>(p)</span><br><span class="line">    <span class="keyword">while</span> n &lt;= <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n = <span class="built_in">next</span>(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出小于100的全部素数</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> print_prime(<span class="number">100</span>):</span><br><span class="line">    print(n)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><hr><p>类似C++中的<code>sort</code>函数，包含三个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(<span class="built_in">list</span>,key,reverse)</span><br></pre></td></tr></table></figure><ol><li>其中list表示需要排序的序列</li><li>key代表排序过程中作用在list中元素上的函数</li><li>reverse表示从大到小还是从小到大</li></ol><p>比如按绝对值大小排序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sorted([<span class="number">36</span>, <span class="number">5</span>, -<span class="number">12</span>, <span class="number">9</span>, -<span class="number">21</span>], key=abs)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, -<span class="number">12</span>, -<span class="number">21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>上述操作是先对list中的每个元素做了abs操作，再按abs操作后的值排序，再将原本的值放入相应位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keys排序结果 &#x3D;&gt; [5, 9,  12,  21, 36]</span><br><span class="line">                |  |    |    |   |</span><br><span class="line">最终结果     &#x3D;&gt; [5, 9, -12, -21, 36]</span><br></pre></td></tr></table></figure><h3 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h3><hr><p>python中允许将另一个函数作为某一函数的返回值，被返回的函数将不会立即进行运算，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_sum</span>(<span class="params">*args</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span>():</span></span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">f = lazy_sum(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>此时分别调用<code>f</code>与<code>f()</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;<span class="function"><span class="keyword">function</span> <span class="title">lazy_sum</span>.&lt;<span class="title">locals</span>&gt;.<span class="title">sum</span> <span class="title">at</span> <span class="title">0x101c6ed90</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt; f()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>此处内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>中的参数和局部变量，当<code>sum</code>被<code>lazy_sum</code>返回时，相关参数和变量都保存在返回的函数（sum）中，这种程序结构被成为闭包</p><p>需要注意的是<code>lazy_sum</code>每次都会返回一个新的函数，即：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">&gt;&gt;&gt; f2 = lazy_sum(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>)</span><br><span class="line">&gt;&gt;&gt; f1==f2</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><hr><p>由闭包的定义，我们来看如下的一个操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">            <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1,f2,f3 = count()</span><br></pre></td></tr></table></figure><p>此时乍一看<code>f1()</code>应该返回1，<code>f2()</code>返回4，<code>f3()</code>返回9</p><p>但是实际上结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f1, f2, f3 = count()</span><br><span class="line">&gt;&gt;&gt; f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt; f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>原因在于，返回函数将会把函数内部的变量封装，而python中的变量均为引用变量，即存储数据的地址，而变量<code>i</code>的值一直在变化，等到返回第个函数时，<code>i</code>中存储的值已变为3，此时无论调用哪个返回函数，其中<code>i</code>存储的值均为3</p><p>因此返回闭包时，有如下注意事项：</p><div class="note danger"><p>返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p></div><p>但如上函数并不是没有解决的办法，只需要使用参数来保存循环值即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">j</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">g</span>():</span></span><br><span class="line">            <span class="keyword">return</span> j*j</span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        fs.append(f(i))</span><br><span class="line"><span class="comment"># 此处f()不是闭包，因此在调用时立即被执行</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br></pre></td></tr></table></figure><p>使用闭包构造一个计数器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createCounter</span>():</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counterA = createCounter()</span><br><span class="line">print(counterA(), counterA(), counterA(), counterA(), counterA())</span><br><span class="line"><span class="comment"># 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><h3 id="番外——变量作用域"><a href="#番外——变量作用域" class="headerlink" title="番外——变量作用域"></a>番外——变量作用域</h3><hr><p>python中的变量作用域大致与C++相同，但python为动态语言，定义时无需给出变量的类型，导致定义语法与引用语法相同，因此，python中加入了两个指定变量的关键字<code>global</code>和<code>nonlocal</code></p><p>其中：</p><ul><li><em>global关键字用来在函数或其他局部作用域中使用全局变量。</em></li><li><em>nonlocal声明的变量不是局部变量,也不是全局变量,而是外部嵌套函数内的变量。</em></li></ul><p>如，当我们需要在函数中使用全局变量时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_test</span>():</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    print(count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">global_test()  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>当我们需要在内部函数中使用外部函数的变量时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nonlocal_test</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> test2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val = nonlocal_test()</span><br><span class="line">print(val())</span><br><span class="line">print(val())</span><br><span class="line">print(val())</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><hr><p>在函数式变成时，我们经常需要传入函数或是返回函数，这样大量的使用函数将导致命名成为一个非常麻烦的问题，因此python为我们提供了一种匿名函数的机制，省去了为函数命名的麻烦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x*x</span><br></pre></td></tr></table></figure><p>上面这段函数就相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br></pre></td></tr></table></figure><p>匿名函数的基本格式为：</p><div class="note info"><p>lambda argument_list : expression</p></div><p>其中<code>argument_list</code>是参数列表，具有如下特性：</p><ol><li>参数需要在argument_list中有定义</li><li>表达式只能是单行</li></ol><p>可以使用如下种种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">None</span><br><span class="line">a+b</span><br><span class="line">sum(a)</span><br><span class="line">1 if a &gt;10 else 0</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>而<code>expression</code>只允许使用一个表达式，且该表达式的值即时该函数的返回值。</p><p>lambda函数既可以作为变量赋值给一个变量，也可以作为返回值：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = lambda x: x * x</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;<span class="function"><span class="keyword">function</span> &lt;<span class="title">lambda</span>&gt; <span class="title">at</span> <span class="title">0x101c6ef28</span>&gt;</span></span><br><span class="line">&gt;&gt;&gt; f(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x * x + y * y</span><br></pre></td></tr></table></figure><p>关于lambda函数的使用一直存在争议，有些人认为使用lambda函数能使代码更加的pythonic，而有些人认为只能使用一条语句的lambda函数有时反而会降低代码的可读性。</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><hr><p>首先要明确python中函数作为对象，也具有一些属性，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;2021-7-26&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = now</span><br><span class="line">print(f.__name__)</span><br><span class="line"><span class="comment"># now</span></span><br></pre></td></tr></table></figure><p>此时，如果我们希望丰富now的功能，但又不希望修改now的定义，我们该怎么办呢？学习过<code>java注解</code>和<code>AOP</code>就知道，这就是AOP的编程思维。</p><p>在java中这样的操作并不难，通过为函数添加注解，再为该注解编写一些逻辑就能首先。而python中提供了一种使用函数实现AOP的方式：装饰器(Decorator)</p><p>本质上，<code>decorator</code>是一个<code>高阶函数</code>。如果我们想要定义一个能打印日志的decorate，可以通过如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>然后只需要使用python提供的<code>@语法糖</code>，把decorate置于函数的定义处：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;2021-7-26&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">now()</span><br><span class="line"><span class="comment"># call now():</span></span><br><span class="line"><span class="comment"># 2021-7-26</span></span><br></pre></td></tr></table></figure><p>该语法糖相当于执行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure><p>还能定义需要参数的<code>decorate</code>，实现方式是再如上双重函数嵌套的基础上再增加一层用来接受参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            print(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;2021-7-26&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">now()</span><br><span class="line"><span class="comment"># execute now():</span></span><br><span class="line"><span class="comment"># 2021-7-26</span></span><br></pre></td></tr></table></figure><p>该语法糖相当于执行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = log(<span class="string">&#x27;execute&#x27;</span>)(now)</span><br></pre></td></tr></table></figure><p>其中<code>log(‘execute’)</code>返回<code>decorator</code>，接着将<code>decorator(now)</code>赋值给<code>now</code></p><p>但由于为<code>now</code>重新赋值，单纯的该过程将导致如下问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br></pre></td></tr></table></figure><p>我们发现<code>now</code>中的值变了，导致<code>now</code>的<code>__name__</code>属性变了，因此我们需要把原始函数的<code>__name__</code>等属性赋值到<code>wrapper()</code>函数中去，否则，有些依赖函数签名的代码执行会出错。</p><p>Python的<code>functools</code>模块中也为我们提供了一个用于做这些事情的<code>decorator</code> : <code>functools.wraps</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>对于有参数的<code>decorator</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><hr><p>Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）</p><p>可以通过偏函数来固定一个函数中的某个参数值，并返回一个新函数，但新函数仍然允许对固定的参数传入其他值。例如<code>int</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>)  <span class="comment"># 12345</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>, <span class="number">8</span>)  <span class="comment"># 5349</span></span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;12345&#x27;</span>, <span class="number">16</span>)  <span class="comment"># 74565</span></span><br><span class="line">int2(<span class="string">&#x27;1000000&#x27;</span>)  <span class="comment"># 64</span></span><br><span class="line">int2(<span class="string">&#x27;1000000&#x27;</span>, base=<span class="number">10</span>)  <span class="comment"># 1000000</span></span><br></pre></td></tr></table></figure><p>创建偏函数时，实际上可以接收函数对象、<code>*args</code>和<code>**kw</code>这3个参数，当传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>实际上固定了<code>int()</code>函数的<code>关键字参数base</code>，也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123; <span class="string">&#x27;base&#x27;</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="built_in">int</span>(<span class="string">&#x27;10010&#x27;</span>, **kw)</span><br></pre></td></tr></table></figure><p>再看另一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">max2 = functools.partial(<span class="built_in">max</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)  <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">args = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">max</span>(*args)</span><br></pre></td></tr></table></figure><p>结合<a href="https://enderxiao.top/Python/python%E5%9F%BA%E7%A1%80/">python入门</a>中函数章节提到的，任何函数都能通过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(*args, **kw)</span><br></pre></td></tr></table></figure><p>来调用，我们可以大胆猜测一下偏函数的参数调用规则：</p><ol><li>偏函数先将默认值中的<code>位置参数</code>和调用时传入的<code>位置参数</code>组合为一个<code>*args</code>，且默认位置参数在前。</li><li>再将默认<code>关键字参数</code>和调用时传入的<code>关键字参数</code>组合为一个<code>**kw</code>，同名关键字将用传入值覆盖默认值。</li><li>最后通过<code>func(*args, **kw)</code>去调用</li></ol><p>通过如下例子可以验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kw)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = functools.partial(f, <span class="number">1</span>, <span class="number">2</span>, a = <span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1(<span class="number">3</span>, <span class="number">4</span>, c = <span class="number">3</span>, d = <span class="number">4</span>)</span><br><span class="line"><span class="comment"># (1,2,3,4)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;:1, &#x27;b&#x27;:2, &#x27;c&#x27;:3, &#x27;d&#x27;:4&#125;</span></span><br><span class="line"></span><br><span class="line">f1(a = <span class="number">2</span>, b = <span class="number">3</span>)</span><br><span class="line"><span class="comment"># (1,2)</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;:2, &#x27;b&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记函数式编程部分&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="函数式编程" scheme="http://enderxiao.top/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    <category term="进阶" scheme="http://enderxiao.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>python进阶-OOP</title>
    <link href="http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-oop/"/>
    <id>http://enderxiao.top/Python/python%E8%BF%9B%E9%98%B6-oop/</id>
    <published>2021-07-26T03:39:13.000Z</published>
    <updated>2021-08-10T00:05:20.468Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记，面对对象部分</p><a id="more"></a><h2 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h2><p>作为长期使用C++，java进行开发的程序员老说，OOP可以说是一种比较情切的程序设计思想了，所谓万物皆对象。</p><p>在python，几乎所有数据类型都可视为对象，甚至函数，python同样支持自定义对象。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><hr><p>在了解python中实现OOP之前，先来描述一下模块的概念，如下是一个自定义模块的样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Ender&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上是模块的文档规范</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    args = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)==<span class="number">1</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(args)==<span class="number">2</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, %s!&#x27;</span> % args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;Too many arguments!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>第10行中，在导入<code>sys</code>模块后，变量<code>sys</code>就指向了该模块，此后便可通过该变量访问这个模块中的功能。</p><p>例如第13行的<code>argv</code>变量，就是该模块中用于存储命令行中参数的<code>list</code>，<code>argv</code>中至少包含一个元素，即<code>.py</code>文件的名称。</p><p>例如使用如下命令调用时：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 hello.py Ender</span><br></pre></td></tr></table></figure><p><code>argv</code>中的参数就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;hello.py&#x27;</span>, <span class="string">&#x27;Michael&#x27;</span>]</span><br></pre></td></tr></table></figure><p>当我们在命令行运行<code>hello</code>模块文件时，python解释器把一个特殊的变量<code>__name__</code>置为<code>__main__</code>，而如果在其他地方导入该<code>hello</code>模块时，<code>if</code>判断将失败。因此，这种<code>if</code>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的用途就是运行测试。</p><p>例如使用命令行运行<code>hello.py</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; python3 hello.py</span><br><span class="line">Hello, world!</span><br><span class="line">&gt;&gt;&gt; python hello.py Ender</span><br><span class="line">Hello, Ender!</span><br></pre></td></tr></table></figure><p>而导入<code>hello</code>模块时，不会打印任何东西，原因是没有调用<code>test</code>函数：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; python</span><br><span class="line">&gt;&gt;&gt; import hello</span><br><span class="line">&gt;&gt;&gt; hello.text()</span><br><span class="line">&gt;&gt;&gt; Hello, world!</span><br></pre></td></tr></table></figure><h4 id="模块内作用域"><a href="#模块内作用域" class="headerlink" title="模块内作用域"></a>模块内作用域</h4><hr><p>Python中没有严格的作用域限定方式，只能依靠某些特定的命名方式以及约定俗称来限定模块间对象的访问规则：</p><ol><li>能够被外部访问的模块内对象只能以<strong>字母</strong>开头</li><li>特殊对象，如声明作者，调用判断，文档说明等，均以<code>__</code>开头以及结尾，如<code>__author__</code>, <code>__name__</code>, <code>__doc__</code></li><li>非公开变量需要使用下划线开头，例如<code>_xxx</code>, <code>__xxx</code>，这样的对象不应该被直接引用。</li></ol><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><hr><p>接下来我们看一些python中的相关操作。</p><p>Python中定义类通过<code>class</code>关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>实例化则通过如下方式：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student()</span><br><span class="line">&gt;&gt;&gt; bart</span><br><span class="line">&lt;__main__.Student object at <span class="number">0</span>x10a67a590&gt;</span><br><span class="line">&gt;&gt;&gt; Student</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;__<span class="title">main__</span>.<span class="title">Student</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>创建实例后，可以为某一单独实例绑定属性：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.name = <span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure><p>而为类绑定属性，则需要使用一个特殊的方法：<code>__init__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure><p>其中第一个参数<code>self</code>表示创建的实例本身，因此在该函数内会将各种属性绑定到<code>self</code>即<code>self</code>所指的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.name</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.score</span><br><span class="line"><span class="number">59</span></span><br></pre></td></tr></table></figure><p>可见实例本身不用显式的传入实例。</p><p>为类创建方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s: %s&#x27;</span> % (self.name, self.score))</span><br></pre></td></tr></table></figure><p>调用时直接使用：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.print_score()</span><br><span class="line">Bart Simpson: <span class="number">59</span></span><br></pre></td></tr></table></figure><p>可见<code>self</code>也不需要显示的传入</p><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><hr><p>有时为了更好的封装某个类，我们通常会对类中的变量进行访问权限的限制。在python中，没有特定的访问限制关键字，而是通过特殊的变量名进行限制。</p><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, score</span>):</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__score))</span><br></pre></td></tr></table></figure><p>再次访问将得到如下结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line">&gt;&gt;&gt; bart.__name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> object has no attribute <span class="string">&#x27;__name&#x27;</span></span><br></pre></td></tr></table></figure><p>此时可以通过为私有变量增加get和set方法创建接口来访问他们。</p><p>还需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>而有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>而模块中讲到，python中作用域限定通常依靠约定俗称。其实是类中的访问权限限制也是如此。</p><p>不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart._Student__name</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure><p>但不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p><p>另外，在修改操作上，Python的访问限制也没有达到理想效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(<span class="string">&#x27;Bart Simpson&#x27;</span>, <span class="number">59</span>)</span><br><span class="line">&gt;&gt;&gt; bart.get_name()</span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br><span class="line">&gt;&gt;&gt; bart.__name = <span class="string">&#x27;New Name&#x27;</span> <span class="comment"># 设置__name变量！</span></span><br><span class="line">&gt;&gt;&gt; bart.__name</span><br><span class="line"><span class="string">&#x27;New Name&#x27;</span></span><br></pre></td></tr></table></figure><p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量<em>不是</em>一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bart.get_name() <span class="comment"># get_name()内部返回self.__name</span></span><br><span class="line"><span class="string">&#x27;Bart Simpson&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h3><hr><p>在类的章节有讲到python中继承的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class Animal(<span class="built_in">object</span>):</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Introduce</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;I\&#x27;m an animal&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如上类就是继承了object类的一个Animal类，我们可以继续编写它的子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Eating meat...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Cat is running...&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Eating Fish...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可见Dog和Cat类继承了Animal的方法，并且在其中重写了<code>run</code>方法</p><p>Python中创建一个类，实际上是定义了一种新的数据类型，也就意味着：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>()</span><br><span class="line">b = Animal()</span><br><span class="line">c = Dog()</span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>(a, <span class="built_in">list</span>)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(b, Animal)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(c, Dog)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(c, Animal)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>可见<code>c</code>即是<code>Dog</code>也是<code>Animal</code>，那么如下操作也是合法的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">running</span>(<span class="params">animal</span>):</span></span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">running(Animal())  <span class="comment"># Animal is running</span></span><br><span class="line">running(Dog())  <span class="comment"># Dog is running</span></span><br><span class="line">running(Cat())  <span class="comment"># Cat is running</span></span><br></pre></td></tr></table></figure><p>可见<code>Dog</code>与<code>Cat</code>的实例能够被接受且均能调用<code>run()</code>方法。</p><p>这样的特性能够让我们很方便的实现<strong>“开闭”原则</strong>即：</p><ol><li>对扩展开放：允许新增<code>Animal</code>子类</li><li>对修改封闭：不需要修改以来<code>Animal</code>类型的<code>running</code>等函数</li></ol><h4 id="静态语言与动态语言"><a href="#静态语言与动态语言" class="headerlink" title="静态语言与动态语言"></a>静态语言与动态语言</h4><hr><p>上面的例子中的<code>running</code>函数看起来是用了一个<code>Animal</code>类型的变量接受了参数，但由于Python是动态语言，实际上传入<code>running</code>函数前，编辑器并不知道将传入的是个怎样的类型，这就意味着，只要我们传入的参数包含<code>run</code>方法，那么代码就能正常运行，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Start...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">running(Timer())  <span class="comment"># &#x27;Start...&#x27;</span></span><br></pre></td></tr></table></figure><p>而在Java和C++中，这样的参数传入是不被允许的。</p><p>这就是动态语言中的<code>鸭子类型</code>，它并不要求严格的继承体系，所谓<em>一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</em></p><p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><hr><p>当我们拿到一个实例对象时，有两种方法可以确定他们的类：</p><ol><li><code>type()</code></li><li><code>instance()</code></li></ol><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><hr><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(<span class="number">123</span>)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">int</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(&#x27;<span class="title">str</span>&#x27;)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="title">None</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">type</span>(<span class="title">None</span>) &#x27;<span class="title">NoneType</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="title">abs</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">builtin_function_or_method</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="title">a</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;__<span class="title">main__</span>.<span class="title">Animal</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(123)==<span class="title">type</span>(456)</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(123)==<span class="title">int</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(&#x27;<span class="title">abc</span>&#x27;)==<span class="title">type</span>(&#x27;123&#x27;)</span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(&#x27;<span class="title">abc</span>&#x27;)==<span class="title">str</span></span></span><br><span class="line"><span class="class"><span class="title">True</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(&#x27;<span class="title">abc</span>&#x27;)==<span class="title">type</span>(123)</span></span><br><span class="line"><span class="class"><span class="title">False</span></span></span><br></pre></td></tr></table></figure><p>如果需要判断一个对象是否是函数，则需要使用<code>types</code>模块：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import types</span><br><span class="line">&gt;&gt;&gt; def fn():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(fn)==types.FunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(abs)==types.BuiltinFunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(lambda x: x)==types.LambdaType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)))==types.GeneratorType</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="instance"><a href="#instance" class="headerlink" title="instance"></a>instance</h4><hr><p><code>type</code>获取类型较为方便，但是对于继承关系来说，就没有那么方便了，此时需要用到instance，例如对于如下继承链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object -&gt; Animal -&gt; Dog -&gt; Husky</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = Animal()</span><br><span class="line">&gt;&gt;&gt; d = Dog()</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">h</span> = Husky()</span><br><span class="line">&gt;&gt;&gt; isinstance(<span class="built_in">h</span>, Husky)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(<span class="built_in">h</span>, Dog)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(<span class="built_in">h</span>, Animal)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Dog) and isinstance(d, Animal)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(d, Husky)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(<span class="string">&#x27;a&#x27;</span>, str)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(<span class="number">123</span>, int)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(b<span class="string">&#x27;a&#x27;</span>, bytes)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (list, tuple))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (list, tuple))</span><br><span class="line">True</span><br></pre></td></tr></table></figure><div class="note info"><p>总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</p></div><h3 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h3><hr><p>如果想要获取一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它将返回一个包含该对象的所有属性名的字符串<code>list</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">dir</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getnewargs__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mod__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__rmod__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;capitalize&#x27;</span>, <span class="string">&#x27;casefold&#x27;</span>, <span class="string">&#x27;center&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;encode&#x27;</span>, <span class="string">&#x27;endswith&#x27;</span>, <span class="string">&#x27;expandtabs&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;format_map&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;isalnum&#x27;</span>, <span class="string">&#x27;isalpha&#x27;</span>, <span class="string">&#x27;isascii&#x27;</span>, <span class="string">&#x27;isdecimal&#x27;</span>, <span class="string">&#x27;isdigit&#x27;</span>, <span class="string">&#x27;isidentifier&#x27;</span>, <span class="string">&#x27;islower&#x27;</span>, <span class="string">&#x27;isnumeric&#x27;</span>, <span class="string">&#x27;isprintable&#x27;</span>, <span class="string">&#x27;isspace&#x27;</span>, <span class="string">&#x27;istitle&#x27;</span>, <span class="string">&#x27;isupper&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;ljust&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>, <span class="string">&#x27;lstrip&#x27;</span>, <span class="string">&#x27;maketrans&#x27;</span>, <span class="string">&#x27;partition&#x27;</span>, <span class="string">&#x27;removeprefix&#x27;</span>, <span class="string">&#x27;removesuffix&#x27;</span>, <span class="string">&#x27;replace&#x27;</span>, <span class="string">&#x27;rfind&#x27;</span>, <span class="string">&#x27;rindex&#x27;</span>, <span class="string">&#x27;rjust&#x27;</span>, <span class="string">&#x27;rpartition&#x27;</span>, <span class="string">&#x27;rsplit&#x27;</span>, <span class="string">&#x27;rstrip&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;splitlines&#x27;</span>, <span class="string">&#x27;startswith&#x27;</span>, <span class="string">&#x27;strip&#x27;</span>, <span class="string">&#x27;swapcase&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;translate&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;zfill&#x27;</span>]</span><br></pre></td></tr></table></figure><p>其中类似<code>__len__</code>的方法再python中是有特殊用途的，如果调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部是去调用该对象的<code>__len__()</code>方法，所以以下两行代码是等价的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;ABC&#x27;</span>.__len__()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>这就意味着自定义类如果也想通过<code>len</code>函数获取长度，则只需要在我们自定义的类中实现<code>__len__()</code>方法即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDog</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        retrun <span class="number">100</span></span><br><span class="line"></span><br><span class="line">dog = MyDog()</span><br><span class="line"><span class="built_in">len</span>(dog)  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>此外配合<code>getattr()</code>，<code>setattr()</code>，<code>hasattr()</code>，可以直接操作一个对象的状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">         self.x = <span class="number">9</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="keyword">return</span> self.x * self.x</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">obj = MyObject()</span><br><span class="line"><span class="built_in">hasattr</span>(obj,<span class="string">&#x27;x&#x27;</span>)  <span class="comment"># True 有属性x</span></span><br><span class="line"><span class="built_in">hasattr</span>(obj,<span class="string">&#x27;y&#x27;</span>)  <span class="comment"># False 没有属性y</span></span><br><span class="line"><span class="built_in">setattr</span>(obj,<span class="string">&#x27;y&#x27;</span>,<span class="number">19</span>)  <span class="comment"># 设置一个属性y</span></span><br><span class="line"><span class="built_in">hasattr</span>(obj,<span class="string">&#x27;y&#x27;</span>)  <span class="comment"># True 有属性y</span></span><br><span class="line"><span class="built_in">getattr</span>(obj,<span class="string">&#x27;y&#x27;</span>)  <span class="comment"># 19 获取属性y</span></span><br></pre></td></tr></table></figure><p>如果获取一个没有的属性，则会报如下错误：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; getattr(obj, <span class="string">&#x27;z&#x27;</span>) <span class="comment"># 获取属性&#x27;z&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;MyObject&#x27;</span> object has no attribute <span class="string">&#x27;z&#x27;</span></span><br></pre></td></tr></table></figure><p><code>getattr()</code>还支持自定义错误返回值：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; getattr(obj, <span class="string">&#x27;z&#x27;</span>, <span class="number">404</span>) <span class="comment"># 获取属性&#x27;z&#x27;，如果不存在，返回默认值404</span></span><br><span class="line"><span class="number">404</span></span><br></pre></td></tr></table></figure><p>此外，对象的方法也是可以操作的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hasattr(obj, <span class="string">&#x27;power&#x27;</span>) <span class="comment"># 有属性&#x27;power&#x27;吗？</span></span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; getattr(obj, <span class="string">&#x27;power&#x27;</span>) <span class="comment"># 获取属性&#x27;power&#x27;</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0</span>x10077a6a0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; fn = getattr(obj, <span class="string">&#x27;power&#x27;</span>) <span class="comment"># 获取属性&#x27;power&#x27;并赋值到变量fn</span></span><br><span class="line">&gt;&gt;&gt; fn <span class="comment"># fn指向obj.power</span></span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at <span class="number">0</span>x10077a6a0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; fn() <span class="comment"># 调用fn()与调用obj.power()是一样的</span></span><br></pre></td></tr></table></figure><p>这些操作在不确定自己获得的是一个怎样的对象时会派上用场：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readImage</span>(<span class="params">fp</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(fp, <span class="string">&#x27;read&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> readData(fp)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><hr><p>python中类的属性有实例属性与类属性的区别</p><p>实例属性是，在创建实例时，为每个实例都增加上的属性，操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line">s.score = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>而类属性则是为类绑定的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span></span><br></pre></td></tr></table></figure><p>这样的属性我们不实例化也可以访问到：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Student.name</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; s.name = <span class="string">&quot;Michael&quot;</span></span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">Michael</span><br><span class="line">&gt;&gt;&gt; Student.name</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">del</span> s.name</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">Student</span><br></pre></td></tr></table></figure><p>可以看到，在类和对象具有同名属性时，我们访问对象的该属性，优先访问到的是实例属性，因此不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性。</p><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><hr><p>由于Python动态语言的特性，Python可以轻松实现在允许过程中对类进行操作，比如可以很轻松的为类绑定方法与属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment"># 动态给实例绑定一个属性</span></span><br><span class="line">&gt;&gt;&gt; print(s.name)</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><p>绑定方法需要用到<code>types</code>库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; def set_age(self, age): <span class="comment"># 定义一个函数作为实例方法</span></span><br><span class="line">...     self.age = age</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; from types import MethodType</span><br><span class="line">&gt;&gt;&gt; s.set_age = MethodType(set_age, s) <span class="comment"># 给实例绑定一个方法</span></span><br><span class="line">&gt;&gt;&gt; s.set_age(<span class="number">25</span>) <span class="comment"># 调用实例方法</span></span><br><span class="line">&gt;&gt;&gt; s.age <span class="comment"># 测试结果</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>与属性相同，为特定对象绑定的方法无法在另一对象或类中使用，需要为类绑定方法才能让所有对象均可使用</p><h4 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h4><p>python还提供了一种可以限制运行时绑定的属性的操作，比如只允许动态的为<code>Student</code>实例添加<code>name</code>和<code>age</code>属性，此时就可以用到<code>__slots__</code>变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br></pre></td></tr></table></figure><p>然后尝试为其绑定属性：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line">&gt;&gt;&gt; s.name = <span class="string">&#x27;Michael&#x27;</span> <span class="comment"># 绑定属性&#x27;name&#x27;</span></span><br><span class="line">&gt;&gt;&gt; s.age = <span class="number">25</span> <span class="comment"># 绑定属性&#x27;age&#x27;</span></span><br><span class="line">&gt;&gt;&gt; s.score = <span class="number">99</span> <span class="comment"># 绑定属性&#x27;score&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> object has no attribute <span class="string">&#x27;score&#x27;</span></span><br></pre></td></tr></table></figure><p>可见由于<code>score</code>没有被<code>__slots__</code>指明，因此绑定此属性时报错。</p><p>但<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">GraduateStudent</span>(<span class="title">Student</span>):</span></span><br><span class="line"><span class="class">...     <span class="title">pass</span></span></span><br><span class="line"><span class="class">...</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">g</span> = <span class="title">GraduateStudent</span>()</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">g</span>.<span class="title">score</span> = 9999</span></span><br></pre></td></tr></table></figure><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><hr><p>在进行面向对象编程时，我们为了代码的健壮性，通常会对某个类的属性操作进行封装，让这些属性变成私有属性，然后通过对外暴露<code>getter</code>和<code>setter</code>方法来操作这些属性，这样我们在修改和访问这些属性时，就能增加一些类似类型检测，安全检测等诸如此类的操作。</p><p>通常我们可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_score</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>修改和查询<code>score</code>属性时，我们需要这样做：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.set_score(<span class="number">60</span>) <span class="comment"># ok!</span></span><br><span class="line">&gt;&gt;&gt; s.get_score()</span><br><span class="line"><span class="number">60</span></span><br><span class="line">&gt;&gt;&gt; s.set_score(<span class="number">9999</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>访问<code>score</code>属性时，我们需要通过<code>get_score</code>函数进行访问。</p><p>python为我们提供了更为直观的访问方法，可以直接通过<code>s.score</code>进行访问和修改，并且还能实现如上的安全检测功能，这就是<code>@property</code>语法糖：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure><p>把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line">&gt;&gt;&gt; s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line">&gt;&gt;&gt; s.score = <span class="number">9999</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between <span class="number">0</span> ~ <span class="number">100</span>!</span><br></pre></td></tr></table></figure><p>还可以实现对属性的只读访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._birth</span><br><span class="line"></span><br><span class="line"><span class="meta">    @birth.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2021</span> - self._birth</span><br></pre></td></tr></table></figure><p>上面的<code>age</code>属性并没有设置<code>setter</code>方法，因此感官上来说是不能对其进行修改操作。</p><p>需要特别注意的是：</p><div class="note danger"><p>属性的方法名和实例变量名不能一样</p></div><p>看如下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法名称和实例变量均为birth:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">birth</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.birth</span><br></pre></td></tr></table></figure><p>这时如果我们调用<code>s.birth</code>，首先执行上方定义的方法，在执行到<code>return self.birth</code>，又视为调用了对象<code>s</code>的<code>score</code>属性，于是又转到<code>birth</code>方法，形成无限层递归，由于没有对尾递归进行优化，最终将报栈溢出错误<code>RecursionError</code></p><h3 id="MixIn"><a href="#MixIn" class="headerlink" title="MixIn"></a>MixIn</h3><hr><p>Python中的类是支持多继承的，而MixIn设计思路是Python中为了更好的实现Python多继承的设计思路。</p><p>现在我们需要为如下几种动物创建类：</p><ol><li>Dog - 狗勾🐕</li><li>Bat - 蝙蝠🦇</li><li>Parrot - 鹦鹉🦜</li><li>Ostrich - 鸵鸟🦩</li></ol><p>如果我们想要将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">                ┌───────────────┐</span><br><span class="line">                │    Animal     │</span><br><span class="line">                └───────────────┘</span><br><span class="line">                        │</span><br><span class="line">           ┌────────────┴────────────┐</span><br><span class="line">           │                         │</span><br><span class="line">           ▼                         ▼</span><br><span class="line">    ┌─────────────┐           ┌─────────────┐</span><br><span class="line">    │   Mammal    │           │    Bird     │</span><br><span class="line">    └─────────────┘           └─────────────┘</span><br><span class="line">           │                         │</span><br><span class="line">     ┌─────┴──────┐            ┌─────┴──────┐</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│  MRun   │  │  MFly   │  │  BRun   │  │  BFly   │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br><span class="line">     │            │            │            │</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│   Dog   │  │   Bat   │  │ Ostrich │  │ Parrot  │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br></pre></td></tr></table></figure><p>在Java中采用单继承的方式，如果必须为每个种类定义一个类的话，想必定义这些类就需要一长串的代码。但是通常Java中会使用接口来解决这一问题。Python中则使用多继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大类:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mammal</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableMixIn</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyableMixIn</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Flying...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 各种动物:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Mammal, RunnableMixIn</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bat</span>(<span class="params">Mammal, FlyableMixIn</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span>(<span class="params">Bird, FlyableMixIn</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span>(<span class="params">Bird, RunnablebleMixIn</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其中以<code>MixIn</code>结尾的类的目的就是给一个类增加多个功能，这一在设计类的时候，我们优先考虑通过多重继承来组合多个<code>MixIn</code>的功能，而不是设计多层次复杂的继承关系。</p><p>可见<code>MixIn</code>在思想上有些类似java中的接口，但是具体操作和实现上有很大的区别。</p><p>那么为什么java没有多继承机制呢？</p><p>因为采用多继承时，如果继承的两个类中有同名方法，那么调用该方法时编译器将不知道调用的是哪个父类中的方法。</p><p>那么Python中又是通过怎样的方式解决的呢？</p><p>实验过程参考如下博客：</p><div class="tag link"><a class="link-card" title="" href="Python多重继承排序原理"><div class="left"><img src="https://www.jianshu.com/p/c9a0b055947b" class="lazyload placeholder" data-srcset="https://www.jianshu.com/p/c9a0b055947b" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text"></p><p class="url">Python多重继承排序原理</p></div></a></div><p>该博客通过介绍拓扑排序以及C3算法，最后经过举例验证，得出结论：python中多继承的方法访问顺序遵从拓扑序。</p><p>该博客还补充了一个概念：<code>MRO</code>即<em>method resolution order</em></p><p>对于如下继承关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A foo&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;A bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;B foo&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;B bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span>(<span class="params">A,B</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;C2-bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">C1,C2</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(D.__mro__)</span><br><span class="line">    d=D()</span><br><span class="line">    d.foo()</span><br><span class="line">    d.bar()</span><br></pre></td></tr></table></figure><p>上述继承关系的图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/143920-c35a0535a4e124a3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/349/format/webp" class="lazyload placeholder" data-srcset="https://upload-images.jianshu.io/upload_images/143920-c35a0535a4e124a3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/349/format/webp" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="img"></p><p>当我们调用<code>d.foo()</code>时，按照拓扑排序规则，解释器会先去寻找D类中是否拥有<code>foo()</code>方法，即在图中去掉D对应的点以及D的出边。</p><p>于是存在的点只剩下：[C1,C2,A,B,object]，其中没有入度的点为C1和C2，根据左优先原则，寻找C1中是否包含<code>foo()</code>方法，去掉C1点以及C1的出边。</p><p>此时存在的点只剩下：[C2,A,B,object]，其中没有入度的点为C2，寻找C2中是否包含<code>foo()</code>方法，去掉C2点以及C2的出边。</p><p>此时存在的点只剩下：[A,B,object]，其中没有入度的点为A，B，根据左优先原则，寻找A中是否包含<code>foo()</code>方法，发现包含，于是调用该方法输出<code>A foo</code></p><p>调用<code>d.bar()</code>时，同样也是按照拓扑序进行查找，最终输出<code>C2-bar</code></p><p>而第26行代码，调用了D类的<code>__mro__</code>方法，将直接输出解释器寻找方法的先后顺序。因此最终的测试结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&lt;class &#x27;__main__.D&#x27;&gt;, &lt;class &#x27;__main__.C1&#x27;&gt;, &lt;class &#x27;__main__.C2&#x27;&gt;, &lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="line">A foo</span><br><span class="line">C2-bar</span><br></pre></td></tr></table></figure><h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><hr><p>与<code>__slots__</code>类似，Python还具有很多类似命名的，有特殊作用的函数以及变量。下面来积累几个</p><h4 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h4><hr><p>类似Java中的<code>toString()</code>方法，当对某个实例进行打印时，实际上就是调用该实例的<code>__str__</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Student object (name: %s)&#x27;</span> % self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(Student(<span class="string">&#x27;Michael&#x27;</span>))</span><br><span class="line"><span class="comment"># Student object (name: Michael)</span></span><br></pre></td></tr></table></figure><h4 id="repr"><a href="#repr" class="headerlink" title="__repr__"></a><code>__repr__</code></h4><hr><p>用于显示对该对象的解释，即我们直接在命令行中输入对象名时显示的内容，就是通过调用对象的<code>__repr__</code>方法得到，通常情况下，我们会将<code>__repr__</code>方法与<code>__str__</code>方法设置为同一个：</p><p>未定义<code>__repr__</code>时：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&lt;__main__.Student object at <span class="number">0</span>x109afb310&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Student object (name=%s)&#x27;</span> % self.name</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><p>定义后：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">Student object (name: Michael)</span><br></pre></td></tr></table></figure><h4 id="iter-amp-next"><a href="#iter-amp-next" class="headerlink" title="__iter__&amp;__next__"></a><code>__iter__</code>&amp;<code>__next__</code></h4><hr><p>如果我们需要使用<code>for...in</code>来遍历某个对象，我们就需要实现<code>__iter__</code>与<code>__next__</code>方法。</p><ol><li><code>__iter__</code>用于返回一个迭代对象。即<code>for n in object</code>中的<code>n</code></li><li><code>__next__</code>用于在循环中反复调用1中返回的迭代对象的该函数以得到下一个对象，知道遇到<code>StopIteration</code>错误时退出循环。</li></ol><p>例如我们写一个可遍历的斐波那契类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>():</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> n <span class="keyword">in</span> Fib():</span><br><span class="line">...    print(n)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">...</span><br><span class="line"><span class="number">46368</span></span><br><span class="line"><span class="number">75025</span></span><br></pre></td></tr></table></figure><h4 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a><code>__getitem__</code></h4><hr><p>用于对对象进行索引访问，如：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Fib()[<span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;Fib&#x27;</span> object does not support indexing</span><br></pre></td></tr></table></figure><p>该操作实际上时调用对象的<code>__getitem__</code>方法，并将索引当作参数传入。当我们实现该方法后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>():</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            a,b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; f[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; f[<span class="number">1</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt; f[<span class="number">5</span>]</span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt; f[<span class="number">10</span>]</span><br><span class="line"><span class="number">89</span></span><br><span class="line">&gt;&gt;&gt; f[<span class="number">100</span>]</span><br><span class="line"><span class="number">573147844013817084101</span></span><br></pre></td></tr></table></figure><p>但是单纯的这样写，无法支持切片操作，切片操作实际上也是调用了对象的<code>__getitem__</code>方法，但是传入的是<code>slice</code>切片对象。由于动态语言python并不具备重载的能力，我们需要函数内部通过<code>if</code>进行判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>():</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>):  <span class="comment"># 接受int型参数</span></span><br><span class="line">        a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            a,b = b, a + b</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">slice</span>):  <span class="comment"># 接受slice型参数</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; f[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt; f[:<span class="number">10</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br></pre></td></tr></table></figure><p>如上并没有对<code>step</code>参数和负数进行处理，实际上这些都是可以处理的。</p><p>另外，如果将对象看作是<code>dict</code>，那么在该方法内还需要实现对<code>object</code>类型的参数第处理。</p><p>此外，除了<code>__getitem__</code>，还有<code>___setitem__</code>和<code>__delitem__</code>方法，用于删除和修改某个元素。</p><p>因此我们可以让自己的类创建的对象与<code>list</code>、<code>tuple</code>、<code>dict</code>没有什么区别。这都要归功于动态语言的<code>鸭子类型</code></p><h4 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a><code>__getattr__</code></h4><hr><p>该方法当我们访问某个对象中的未定义的属性时调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br></pre></td></tr></table></figure><p>当调用不存在的属性时，比如<code>score</code>，Python解释器会试图调用<code>__getattr__(self, &#39;score&#39;)</code>来尝试获得属性，这样，我们就有机会返回<code>score</code>的值：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line"><span class="string">&#x27;Michael&#x27;</span></span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line"><span class="number">99</span></span><br><span class="line">&gt;&gt;&gt; s.age</span><br><span class="line">None</span><br></pre></td></tr></table></figure><p>当访问没有定义的属性<code>score</code>和<code>age</code>时，就会调用<code>__getattr__</code>函数，由于该函数中未包含对<code>age</code>的处理，于是返回了默认返回值None。</p><p>要让class只响应特定的几个属性，我们就要按照约定，抛出<code>AttributeError</code>的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;\&#x27;Student\&#x27; object has no attribute \&#x27;%s\&#x27;&#x27;</span> % attr)</span><br></pre></td></tr></table></figure><p>返回函数也是完全可以的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, attr</span>):</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">&#x27;age&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span>: <span class="number">25</span></span><br></pre></td></tr></table></figure><p>只是调用方式要变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age()</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>该方法在写SDK时运用广泛。</p><p>有时我们可能需要给每个URL对应的API都写一个方法，API一旦改动，SDK也要改，利用动态的<code>__getattr__</code>，我们可以写一个链式调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        self._path = path</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">&#x27;%s/%s&#x27;</span> % (self._path, path))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._path</span><br><span class="line">    </span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><p>这样我你们进行如下调用时，就能自由的获取各式各样的链接：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Chain().status.user.timeline.list</span><br><span class="line"><span class="string">&#x27;/status/user/timeline/list&#x27;</span></span><br></pre></td></tr></table></figure><p>每次访问未定义参数时，都会调用对象的<code>__getattr__</code>方法，在此方法内，我们使用传入对象的<code>_path</code>以及传入的参数创建一个<code>Chain</code>对象，并返回，这样就能与后面属性调用组合，形成链式调用。</p><h4 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h4><hr><p>当我们需要直接对实例进行函数调用时，就会调用<code>__call__</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;My name is %s.&#x27;</span> % self.name)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; s() <span class="comment"># self参数不要传入</span></span><br><span class="line">My name is Michael.</span><br></pre></td></tr></table></figure><p>有了这个参数，那么完全可以把对象看成函数，把函数看成对象。</p><p>此处补充一个区分对象与函数的方法：<code>Callable</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; callable(Student())</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; callable(max)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; callable([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(None)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>可见，函数即“可调用”对象。</p><p>有时我们会看到一些将参数放入URL中的REST API，比如GitHub的API：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get /users/:user/repos</span><br></pre></td></tr></table></figure><p>调用时，我们需要把<code>:user</code>替代为实际用户名，我们需要写出如下调用式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chain().users(<span class="string">&#x27;michael&#x27;</span>).repos</span><br></pre></td></tr></table></figure><p>此时在之前的链式调用的基础上，我们看到中间多出来一个类似函数调用的形式，因此我们需要将其中一环变成可调用对象，就需要用到我们的<code>__call__</code>，我们可以这样实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        self._path = path</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">&#x27;%s/%s&#x27;</span> % (self._path, path))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._path</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, users</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">&#x27;%s/%s&#x27;</span> % (self.path, users))</span><br><span class="line">    </span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure><p>这样最外层的<code>Chain()</code>创建了一个对象，访问<code>users</code>属性，由于不存在该属性，进入<code>__getattr__</code>方法，并返回一个新的对象，该对象与之后的<code>(&#39;michael&#39;)</code>构成函数调用，于是调用该对象的<code>__call__</code>方法，再次返回一个新对象，最后与<code>repos</code>构成访问属性。最终完成链式调用。</p><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><hr><p>与java一样，python也提供枚举类型。</p><p>引入<code>enum</code>类后即可创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>))</span><br></pre></td></tr></table></figure><p>这样我们就可以这样访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name,member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    print(name, <span class="string">&#x27;=&gt;&#x27;</span>, member, <span class="string">&#x27;,&#x27;</span>, member.value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Jan =&gt; Month.Jan , 1</span></span><br><span class="line"><span class="comment"># Feb =&gt; Month.Feb , 2</span></span><br><span class="line"><span class="comment"># Mar =&gt; Month.Mar , 3</span></span><br><span class="line"><span class="comment"># Apr =&gt; Month.Apr , 4</span></span><br><span class="line"><span class="comment"># May =&gt; Month.May , 5</span></span><br><span class="line"><span class="comment"># Jun =&gt; Month.Jun , 6</span></span><br><span class="line"><span class="comment"># Jul =&gt; Month.Jul , 7</span></span><br><span class="line"><span class="comment"># Aug =&gt; Month.Aug , 8</span></span><br><span class="line"><span class="comment"># Sep =&gt; Month.Sep , 9</span></span><br><span class="line"><span class="comment"># Oct =&gt; Month.Oct , 10</span></span><br><span class="line"><span class="comment"># Nov =&gt; Month.Nov , 11</span></span><br><span class="line"><span class="comment"># Dec =&gt; Month.Dec , 12</span></span><br></pre></td></tr></table></figure><p>其中<code>__members__</code>是Month中的一个特殊属性，该属性的类型是<code>mappingproxy</code>，具有如下特性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 不可变映射类型,(字典)MappingProxyType</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># python3.3开始,types模块中引入了一个封装类名叫MappingProxyType</span></span><br><span class="line"><span class="comment"># 如果给这个类一个映射,它会返回一个只对映射视图.</span></span><br><span class="line"><span class="comment"># 虽然是个只读的视图,但是它是动态的,这意味着如果对原映射做出了改动,</span></span><br><span class="line"><span class="comment"># 我们可以通过这个视图观察到,但是无法通过这个视图对原映射做出修改</span></span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</span><br><span class="line"><span class="comment">#创建一个集合</span></span><br><span class="line">index_a = &#123;<span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#创建index_a的映射视图</span></span><br><span class="line">a_proxy = MappingProxyType(index_a)</span><br><span class="line">print(a_proxy)</span><br><span class="line">a_proxy[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="comment"># #不能对a_proxy视图进行修改</span></span><br><span class="line"><span class="comment"># a_proxy[&#x27;b&#x27;] = &#x27;bb&#x27;</span></span><br><span class="line"><span class="comment">#但是可以对原映射进行修改</span></span><br><span class="line">index_a[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;bb&#x27;</span></span><br><span class="line">print(a_proxy)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: &#x27;b&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: &#x27;b&#x27;, &#x27;b&#x27;: &#x27;bb&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要更精确的控制枚举类型，可以用一个派生自<code>Enum</code>的自定义类创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span>(<span class="params">Enum</span>):</span></span><br><span class="line">    sun = <span class="number">0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>其中装饰器<code>@unique</code>用以检查并保证没有重复值</p><p>这样创建的枚举类型可以用如下方式访问：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; day1 = Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1)</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue)</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday[<span class="string">&#x27;Tue&#x27;</span>])</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday.Mon)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday.Tue)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; print(Weekday(<span class="number">1</span>))</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday(<span class="number">1</span>))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; Weekday(<span class="number">7</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">ValueError: <span class="number">7</span> is not a valid Weekday</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> name, member <span class="keyword">in</span> Weekday.__members__.items():</span><br><span class="line">...     print(name, <span class="string">&#x27;=&gt;&#x27;</span>, member)</span><br><span class="line">...</span><br><span class="line">Sun =&gt; Weekday.Sun</span><br><span class="line">Mon =&gt; Weekday.Mon</span><br><span class="line">Tue =&gt; Weekday.Tue</span><br><span class="line">Wed =&gt; Weekday.Wed</span><br><span class="line">Thu =&gt; Weekday.Thu</span><br><span class="line">Fri =&gt; Weekday.Fri</span><br><span class="line">Sat =&gt; Weekday.Sat</span><br></pre></td></tr></table></figure><h3 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h3><hr><p>动态语言与静态语言的差别在于函数于类的定义，动态语言并不是在编译时创建类，而是在运行时创建类。比如如下类的创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self, name=<span class="string">&#x27;world&#x27;</span></span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Hello. %s.&#x27;</span> % name)</span><br></pre></td></tr></table></figure><p>我们可以将该类写到一个模块<code>hello.py</code>，再通过另一个模块来引入该模块，查看类创建的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hello <span class="keyword">import</span> Hello</span><br><span class="line"></span><br><span class="line">h = Hellp()</span><br><span class="line">h.hello()</span><br><span class="line">print(<span class="built_in">type</span>(Hello))</span><br><span class="line">print(<span class="built_in">type</span>(h))</span><br></pre></td></tr></table></figure><p>引入模块时，python解释器就会依次执行模块中的所有语句，执行<code>hello.py</code>的结果就是创建了一个<code>Hello</code>对象。为什么说是对象呢。<code>Hello</code>明明是类啊。Python中，万物接对象，包括我们创建的类。我们创建的类，实际上也是<code>type</code>类的一个对象。</p><p>从上例的输出结果可以看出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, world.</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">hello</span>.<span class="title">Hello</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><code>Hello</code>是一个class，它的类型就是<code>type</code>，而<code>h</code>是一个实例，它的类型就是class <code>Hello</code>。</p><p><code>type()</code>函数出了可以看到对象的类型外，还可以用于动态的创建类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">self, name = <span class="string">&#x27;world&#x27;</span></span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Hello, %s.&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line">Hello = <span class="built_in">type</span>(<span class="string">&#x27;Hello&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(hello = fn))</span><br><span class="line">h = Hello()</span><br><span class="line">h.hello()</span><br><span class="line">print(<span class="built_in">type</span>(Hello))</span><br><span class="line">print(<span class="built_in">type</span>(h))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, world.</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">type</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">hello</span>.<span class="title">Hello</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>利用<code>type()</code>动态的创建类时，需要提供三个参数：</p><ol><li>class的名称。</li><li>继承的父类集合，需要传入tuple，注意tuple的单元素写法。</li><li>class的方法名称于函数进行绑定，此处将方法<code>fn</code>绑定到<code>hello</code>上</li></ol><p>通过<code>type()</code>函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用<code>type()</code>函数创建出class。</p><p>可见，在动态操作类这件事上，动态语言比如python比静态语言，比如java方便很多。</p><p>除了使用type外，还能使用<code>metaclass</code>对类的创建进行控制</p><h4 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h4><hr><p><code>metaclass</code>直译为原类。</p><p>实例的创建可由类控制，那么类的创建则是由元类进行控制。</p><p>下面引用一个例子：</p><p>定义一个<code>metaclass</code>可以给我们自定义的<code>MyList</code>增加一个<code>add</code>方法：</p><p>定义<code>ListMetaclass</code>，按照默认习惯，<code>metaclass</code>的类名总是以<code>Metaclass</code>结尾，以便清楚地表示这是一个<code>metaclass</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># metaclass是类的模板，所以必须从`type`类型派生：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span></span><br><span class="line">        attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure><p>接下来我们利用这个原类，来创建我们自己的<code>list</code>类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span>(<span class="params"><span class="built_in">list</span>, metaclass = ListMetaclass</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>此时，在定义类时，我们指定使用<code>ListMetaclass</code>来定制类，传入关键字参数<code>metaclass</code></p><p>此后，Python解释器在创建<code>MyList</code>时，要通过<code>ListMetaclass.__new__()</code>来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p><p><code>__new__()</code>方法接收到的参数依次是：</p><ol><li>当前准备创建的类的对象</li><li>类的名字</li><li>类继承的父类集合</li><li>类方法集合</li></ol><p>下面我们试着创建一个<code>MyList</code>对象：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; L = MyList()</span><br><span class="line">&gt;&gt;&gt; L.add(<span class="number">1</span>)</span><br><span class="line">&gt;&gt; L</span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>普通的<code>list</code>并没有<code>add()</code>方法。</p><p>动态的修改类的定义将在编写ORM中起到非常大的作用。</p><p><code>ORM</code>——‘Object Relational Mapping’，即对象——关系映射。也即是将数据库中的一个表于一个类对应，一行与一个对象对应。</p><p>我们尝试利用<code>metaclass</code>来实现ORM中的保存功能：</p><ol><li>编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个ORM框架，想定义一个<code>User</code>类来操作对应的数据库表<code>User</code>，我们期待他写出这样的代码：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="comment"># 定义类的属性到列的映射：</span></span><br><span class="line">    <span class="built_in">id</span> = IntegerField(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    name = StringField(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    email = StringField(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    password = StringField(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例：</span></span><br><span class="line">u = User(<span class="built_in">id</span>=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line"><span class="comment"># 保存到数据库：</span></span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure><p>其中，父类<code>Model</code>和属性类型<code>StringField</code>、<code>IntegerField</code>是由ORM框架提供的，剩下的方法比如<code>save()</code>全部由父类<code>Model</code>自动完成。虽然<code>metaclass</code>的编写会比较复杂，但ORM的使用者用起来却异常简单。</p><ol start="2"><li>接下来我们实现<code>Field</code>类，负责保存数据库表的字段名和字段类型：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, column_type</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;%s:%s&gt;&#x27;</span> % (self.__class__.__name__, self.name)</span><br></pre></td></tr></table></figure><p>在此基础上，定义各种类型的子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringField</span>(<span class="params">Field</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(StringField, self).__init__(name, <span class="string">&#x27;varchar(100)&#x27;</span>)  <span class="comment"># 调用父类的__init__方法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerField</span>(<span class="params">Field</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(IntegerField, self).__init__(name, <span class="string">&#x27;bigint&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来编写<code>ModelMetaclass</code>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelMetaclass</span>(<span class="params"><span class="built_in">type</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name==<span class="string">&#x27;Model&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(<span class="string">&#x27;Found model: %s&#x27;</span> % name)</span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, Field):</span><br><span class="line">                print(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure><ol start="4"><li>使用元类<code>ModelMetaclass</code>创建基类<code>Model</code>：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>(<span class="params"><span class="built_in">dict</span>, metaclass=ModelMetaclass</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **kw</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self</span>):</span></span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(params))</span><br><span class="line">        print(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line">        print(<span class="string">&#x27;ARGS: %s&#x27;</span> % <span class="built_in">str</span>(args))</span><br></pre></td></tr></table></figure><p>当用户定义一个<code>class User(Model)</code>时，Python解释器首先在当前类<code>User</code>的定义中查找<code>metaclass</code>，如果没有找到，就继续在父类<code>Model</code>中查找<code>metaclass</code>，找到了，就使用<code>Model</code>中定义的<code>metaclass</code>的<code>ModelMetaclass</code>来创建<code>User</code>类，也就是说，<code>metaclass</code>可以隐式地继承到子类，但子类自己却感觉不到。</p><p>在<code>ModelMetaclass</code>中，一共做了几件事情：</p><ol><li>排除掉对<code>Model</code>类的修改；</li><li>在当前类（比如<code>User</code>）中查找定义的类的所有属性，如果找到一个Field属性，就把它保存到一个<code>__mappings__</code>的<code>dict</code>中，同时从类属性中删除该<code>Field</code>属性，否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）；</li><li>把表名保存到<code>__table__</code>中，这里简化为表名默认为类名。</li></ol><p>在<code>Model</code>类中，就可以定义各种操作数据库的方法，比如<code>save()</code>，<code>delete()</code>，<code>find()</code>，<code>update</code>等等。</p><p>使用如下代码进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = User(<span class="built_in">id</span>=<span class="number">12345</span>, name=<span class="string">&#x27;Michael&#x27;</span>, email=<span class="string">&#x27;test@orm.org&#x27;</span>, password=<span class="string">&#x27;my-pwd&#x27;</span>)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Found model: User</span><br><span class="line">Found mapping: email &#x3D;&#x3D;&gt; &lt;StringField:email&gt;</span><br><span class="line">Found mapping: password &#x3D;&#x3D;&gt; &lt;StringField:password&gt;</span><br><span class="line">Found mapping: id &#x3D;&#x3D;&gt; &lt;IntegerField:uid&gt;</span><br><span class="line">Found mapping: name &#x3D;&#x3D;&gt; &lt;StringField:username&gt;</span><br><span class="line">SQL: insert into User (password,email,username,id) values (?,?,?,?)</span><br><span class="line">ARGS: [&#39;my-pwd&#39;, &#39;test@orm.org&#39;, &#39;Michael&#39;, 12345]</span><br></pre></td></tr></table></figure><p>这样一来我们就能直接得到对应操作的<code>SQL</code>语句，允许即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记，面对对象部分&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="进阶" scheme="http://enderxiao.top/tags/%E8%BF%9B%E9%98%B6/"/>
    
    <category term="面向对象" scheme="http://enderxiao.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="OOP" scheme="http://enderxiao.top/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://enderxiao.top/Python/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://enderxiao.top/Python/python%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-14T03:20:18.000Z</published>
    <updated>2021-08-23T10:47:33.759Z</updated>
    
    <content type="html"><![CDATA[<p>python学习笔记，基础语法部分</p><a id="more"></a><h2 id="Into"><a href="#Into" class="headerlink" title="Into"></a>Into</h2><p>2021年5月，我收到了来自北京工业大学的调档函，这也许意味着我研究生生活的开始。研究生最终选择了机器学习相关的方向，并且得知导师所在实验室的方向是手写体识别。</p><p>说到Machine Learning，据说大多数人使用Python进行其相关的学习与发开，Python其实之前有接触过，并且使用pyGame复刻了一版2048，可以在我的GitHub上看到：</p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/EnderXiao/py2048"><img src="https://github-readme-stats.vercel.app/api/pin/?username=EnderXiao&repo=py2048&theme=calm&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=EnderXiao&repo=py2048&theme=calm&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a><p>这大概是我大一的时候写的项目了，之后比赛以及训练时都是使用自己更为熟悉的C++，因此Python逐渐变得生疏，于是就有了这篇博客。MPGA就一定会实现！</p><p>Make Python Great Again！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="tag link"><a class="link-card" title="Python教程" href="https://www.liaoxuefeng.com/wiki/1016959663602400"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">Python教程</p><p class="url">https://www.liaoxuefeng.com/wiki/1016959663602400</p></div></a></div><h2 id="Get-Ready！"><a href="#Get-Ready！" class="headerlink" title="Get Ready！"></a>Get Ready！</h2><p>使用一门语言进行开发的第一步，大概是环境搭建吧。</p><p>搭建环境的方法有多种，最方便的大概使用windows的命令行，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>如果你的电脑上尚未配置python的环境，windows自动为您打开windows引用商店，点击安装后，将自动为您修改环境变量。</p><p>此时如果再次输入python，即可编写脚本。</p><div class="gallery center">              <img src="https://i.postimg.cc/pVcVDKdh/Untitled.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/pVcVDKdh/Untitled.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="Python%20564b04e5895e443e982a45f45f1c78ee/Untitled.png"  />            </div><h2 id="Coding-Now！"><a href="#Coding-Now！" class="headerlink" title="Coding Now！"></a>Coding Now！</h2><p>环境搭建完成后，就该选择编辑器了，可以使用Jet Brain旗下的PyCharm，非常好用，但由于之前使用VS code进行前端开发，为了避免不必要的存储空间占用，我选择对VS Code进行一些配置，使它能够进行python开发。</p><p>首先进入python官网下载安装好VS Code，下载地址：</p><div class="tag link"><a class="link-card" title="Visual Studio Code - Code Editing. Redefined" href="https://code.visualstudio.com/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">Visual Studio Code - Code Editing. Redefined</p><p class="url">https://code.visualstudio.com/</p></div></a></div><p>然后，为了使VSCode更适合于python开发，我们可以利用一款名为python的插件改造我们的编辑器。</p><p><img src="https://upload-images.jianshu.io/upload_images/5792949-8a2465cfedc2530a.gif" class="lazyload placeholder" data-srcset="https://upload-images.jianshu.io/upload_images/5792949-8a2465cfedc2530a.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="https://upload-images.jianshu.io/upload_images/5792949-8a2465cfedc2530a.gif"></p><p>然后，新建一个文件夹作为工作区，为该工作区单独配置工作环境，通过一些必要的设置，我们将得到一个方便且强大的python编辑器。</p><p>接下来就能愉快的coding了</p><h2 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul><li>整数</li></ul><p>python整数的表达相对自由，支持以下形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span> <span class="comment">#普通整数</span></span><br><span class="line">b = <span class="number">0xf</span> <span class="comment">#0x前缀表示16进制数</span></span><br><span class="line">c = <span class="number">100_00_00</span> <span class="comment">#可以使用分隔符表示较长的整数</span></span><br></pre></td></tr></table></figure><ul><li>浮点数</li></ul><p>python中浮点数可以使用如下形式表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.5</span> <span class="comment">#普通浮点数</span></span><br><span class="line">b = <span class="number">1.2e8</span> <span class="comment">#科学计数法</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>python中表示字符串，可以使用单引号<code>&#39;</code>或双引号<code>&quot;</code>。</p><p>如果使用<code>&quot;</code>包裹，则<code>&#39;</code>不需要进行转译：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;I&#x27;m Iron Man&quot;</span></span><br></pre></td></tr></table></figure><p>此外python还支持如下方法，使字符串全部不转译：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">r&quot;\\\\t\\\\&quot;</span> <span class="comment">#此行代码将输出\\\\t\\\\</span></span><br></pre></td></tr></table></figure><p>使用<code>&#39;&#39;&#39;@&#39;&#39;&#39;</code>可以输出多行内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;&#x27;&#x27;I&#x27;m</span></span><br><span class="line"><span class="string">    the</span></span><br><span class="line"><span class="string">    iron</span></span><br><span class="line"><span class="string">    man&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#该代码将输出：</span></span><br><span class="line"><span class="comment"># I&#x27;m</span></span><br><span class="line"><span class="comment"># the</span></span><br><span class="line"><span class="comment"># iron</span></span><br><span class="line"><span class="comment"># man</span></span><br></pre></td></tr></table></figure><p>但需要注意，python中的缩进将会被包含在内，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = <span class="string">&#x27;&#x27;&#x27;I&#x27;m</span></span><br><span class="line"><span class="string">    the</span></span><br><span class="line"><span class="string">    iron</span></span><br><span class="line"><span class="string">    man&#x27;&#x27;&#x27;</span></span><br><span class="line">    print(a)</span><br><span class="line"><span class="comment">#该代码将输出</span></span><br><span class="line"><span class="comment"># I&#x27;m</span></span><br><span class="line">    <span class="comment"># the</span></span><br><span class="line">    <span class="comment"># iron</span></span><br><span class="line">    <span class="comment"># man</span></span><br></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>python中也存在bool变量，python中使用<code>True</code>和<code>False</code>（区分大小写）表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>bool运算符使用如下方式表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span> <span class="keyword">and</span> Falseb = <span class="literal">True</span> <span class="keyword">or</span> Falsec = <span class="keyword">not</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><ul><li>字符串编码</li></ul><p>最开始美国人生产计算机时只考虑了美式字符和英文字母，于是创造了只有127个字符转化的<code>ASCII</code></p><p>后来中国人为了适配自己的语言，创造了GB2312</p><p>日本人将日语编入<code>Shift_JIS</code>，韩国人将韩语编入<code>Euc-kr</code></p><p>这些操作都导致字符的编码系统及其复杂。于是<code>Unicode</code>诞生了，Unicode编码具有以下特征：</p><ol><li>将所有语言的字符进行整合</li><li>无论语言，通常每个字符占用2个字节，生僻字符将占用4字节</li></ol><p>但这样又会导致新的问题，ascii中英文字符占用一个字节，但用了unicode将占用两个，这导致了传输时的带宽浪费，因此又出现了UTF-8编码。UTF-8具有如下特点：</p><ol><li>采用不定长编码，常用字母占1字节，中文3字节，生僻字符占4-6字节。</li><li>兼容ASCII</li></ol><p>计算机内存中为了方便操作与管理，通常采用定长的编码方式，如windows采用的UTF-16就是Unicode的一种，而当对文件进行持久化操作时，通常会为了节约空间而使用变长编码，如UTF-8。</p><div class="gallery center">              <p><img src="https://i.postimg.cc/sxLVsCL9/Untitled-1.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/sxLVsCL9/Untitled-1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="内存中的字符集转换"></p>            </div><p>同样的事也发生在网络上，为了节省带宽传输时，以及网页在显示时直接使用类似UTF-8的变长编码，而服务端则使用Unicode编码以便于管理</p><div class="gallery center">              <p><img src="https://i.postimg.cc/262k9ZFt/Untitled-2.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/262k9ZFt/Untitled-2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="网络中的字符集转换"></p>            </div><ul><li>python中的字符串</li></ul><p>在python3中，字符使用Unicode编码，可以使用如下方式使字符串及其编码进行互转，<code>ord</code>和<code>chr</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出a为65</span></span><br><span class="line">b = <span class="built_in">ord</span>(<span class="string">&#x27;中&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出b为20013</span></span><br><span class="line">c = <span class="built_in">chr</span>(<span class="number">66</span>) </span><br><span class="line"><span class="comment"># 输出c为&#x27;B&#x27;</span></span><br><span class="line">d = <span class="built_in">chr</span>(<span class="number">25991</span>) </span><br><span class="line"><span class="comment"># 输出d为&#x27;文&#x27;</span></span><br></pre></td></tr></table></figure><p>还可以直接使用编码来表示字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;\u4e2d\u6587&#x27;</span>) <span class="comment"># 输出&#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure><p>pyton中的str如果需要在网络上传播或保存到磁盘上，就需要使用如下操作把str变为以字节为单位的<code>bytes</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">b&#x27;ABC&#x27;</span> <span class="comment"># 此时每个字符将只占用一个字节</span></span><br></pre></td></tr></table></figure><p>以Unicode表示的字符也可通过<code>encode()</code>方法编码为指定的<code>bytes</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;ABC&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)) </span><br><span class="line"><span class="comment"># 输出b&#x27;ABC&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 输出b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;ascii&#x27;</span>)) </span><br><span class="line"><span class="comment"># 由于使用了不支持中文的编码方式编码，本次操作将报如下异常：</span></span><br><span class="line"><span class="comment"># UnicodeEncodeError# &#x27;ascii&#x27; codec can&#x27;t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>如果从网络或者磁盘上读出了字节流<code>bytes</code>也可以使用<code>decode()</code>将其转化为str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">b&#x27;ABC&#x27;</span>.decode(<span class="string">&#x27;ascii&#x27;</span>)) </span><br><span class="line"><span class="comment"># 将输出&#x27;ABC&#x27;</span></span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line"><span class="comment"># 输出为&#x27;中文&#x27;</span></span><br><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>)) </span><br><span class="line"><span class="comment"># 将会报如下异常</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   ...</span></span><br><span class="line"><span class="comment"># UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">b&#x27;\xe4\xb8\xad\xff&#x27;</span>.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)) </span><br><span class="line"><span class="comment"># 输出&#x27;中&#x27;，utf-8无法编码的字符将被忽略</span></span><br></pre></td></tr></table></figure><p>此外，对于字符串，还可以使用<code>len()</code>方法获取字符串的长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;ABC&#x27;</span>) </span><br><span class="line"><span class="comment"># 输出3，由于每个字符只占1个，因此使用len得到的就是字符串的长度</span></span><br><span class="line"><span class="built_in">len</span>(<span class="string">&#x27;中文&#x27;</span>) </span><br><span class="line"><span class="comment"># 输出2</span></span><br><span class="line"><span class="built_in">len</span>(<span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span>)</span><br><span class="line"><span class="comment"># 输出6，为占用字节长度</span></span><br></pre></td></tr></table></figure><p>通常对于python文件而言，会使用如下两行注释来指定编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p><p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><ul><li>python字符串格式化</li></ul><p>python字符串支持使用如下方式进行格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;Hello, %s&#x27;</span> % <span class="string">&#x27;world&#x27;</span>) </span><br><span class="line"><span class="comment"># %号后的值将会一次按类型进行替换，且无论什么类型，%s都能起作用</span></span><br><span class="line">print(<span class="string">&#x27;Hi, %s, you have $%d.&#x27;</span> % (<span class="string">&#x27;Michael&#x27;</span>, <span class="number">1000000</span>))</span><br></pre></td></tr></table></figure><p>此外还可以使用<code>format()</code>进行格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;小明&#x27;</span>, <span class="number">17.125</span>)</span><br></pre></td></tr></table></figure><p>此外，python还支持一种格式化字符串<code>f-string</code>，该字符串中的{xxx}，将会被对应变量替换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = <span class="number">2.5</span>s = <span class="number">3.14</span> * r ** <span class="number">2</span></span><br><span class="line">print(<span class="string">f&#x27;The area of a circle with radius <span class="subst">&#123;r&#125;</span> is <span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># The area of a circle with radius 2.5 is 19.62</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>占位符</th><th>替换内容</th></tr></thead><tbody><tr><td>%d</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%s</td><td>字符串</td></tr><tr><td>%x</td><td>十六进制整数</td></tr></tbody></table><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>Python中使用None表示空值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><p>python属于动态语言，赋值时不需要指定变量类型</p><p>比如，进行值交换时可以使用如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="comment">#此处a的值为100，b为10</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>python中通常用全大写的变量名来表示常量，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.14159265359</span></span><br></pre></td></tr></table></figure><p>但是这并不意味着PI这个量就是一个无法给便的值了，只是习惯上认为这是一个常量，PI仍然是一个变量且他的值仍然能被改变。</p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>在python中，除法有两种，分别是<code>/</code>和<code>//</code>使用区别如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">9</span>/<span class="number">3</span> </span><br><span class="line"><span class="comment"># 此时a的值为3.0，为浮点型</span></span><br><span class="line">b = <span class="number">9</span>//<span class="number">3</span> </span><br><span class="line"><span class="comment"># 此时b的值为3，为整型</span></span><br><span class="line">c = <span class="number">8</span>/<span class="number">3</span></span><br><span class="line"><span class="comment"># 此时c的值为2.6666666665，为浮点型</span></span><br><span class="line">d = <span class="number">8</span>//<span class="number">3</span> </span><br><span class="line"><span class="comment"># 此时d的值为2，为整型</span></span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Python中的<code>list</code>为一种有序集，具有如下特定：</p><ol><li>支持增删</li><li>支持随机访问</li><li>下标从0开始</li><li>下标为-x时表示从后向前数的索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(classmates) </span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">classmates[<span class="number">0</span>] </span><br><span class="line"><span class="comment"># Michael</span></span><br><span class="line">classmates[-<span class="number">1</span>] </span><br><span class="line"><span class="comment"># Tracy</span></span><br><span class="line">classmates[-<span class="number">2</span>] </span><br><span class="line"><span class="comment"># Bob</span></span><br></pre></td></tr></table></figure><ul><li>插入</li></ul><p>python支持两种插入方式，分别是<code>append</code>和<code>insert</code>,前者将直接在末尾进行插入，后者支持指定位置插入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classmates.append(<span class="string">&#x27;Adam&#x27;</span>)</span><br><span class="line">classmates.insert(<span class="number">1</span>,<span class="string">&#x27;jack&#x27;</span>)</span><br><span class="line"><span class="comment"># 结果：[&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;, &#x27;Adam&#x27;]</span></span><br><span class="line"><span class="comment"># 结果：[&#x27;Michael&#x27;, &#x27;Jack&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;, &#x27;Adam&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><p>list支持使用<code>pop</code>方法进行删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">classmates.pop()</span><br><span class="line"><span class="comment"># 删除末尾元素，即Adam将被删除</span></span><br><span class="line"><span class="comment"># [&#x27;Michael&#x27;, &#x27;Jack&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span></span><br><span class="line">classmates.pop(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 删除第2个元素，即jack将被删除</span></span><br><span class="line"><span class="comment"># [&#x27;Michael&#x27;, &#x27;Bob&#x27;, &#x27;Tracy&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>修改</li></ul><p>通过重新赋值的方式即可对list中指定位置的元素进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classmates[<span class="number">1</span>] = <span class="string">&#x27;Sarah&#x27;</span></span><br><span class="line"><span class="comment"># [&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>特性</li></ul><p>list允许存放不同类型的元素，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="string">&#x27;apple&#x27;</span>,<span class="number">123</span>,<span class="literal">True</span>]</span><br></pre></td></tr></table></figure><p>并且允许list嵌套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="string">&#x27;python&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>],<span class="string">&#x27;c++&#x27;</span>]</span><br></pre></td></tr></table></figure><p>并且使用<code>len</code>方法求长度时会得到第一层list中的元素个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(s) = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>以此方式可以进行任意层数的嵌套</p><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>元组，另一种形式的有序表，具有如下特征：</p><ol><li>不支持增删改操作</li><li>允许定义空元组</li><li>允许随机访问</li><li>必要时使用tuple代替list可以保护</li><li>tuple，list可以相互嵌套</li></ol><ul><li>定义</li></ul><p>定义tuple时，使用<code>()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment"># 定义了一个包含两个元素的tuple</span></span><br></pre></td></tr></table></figure><p>但当定义只有一个元素的tuple时，需要注意避免如下歧义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>) </span><br><span class="line"><span class="comment"># 这样定义的t将会被解释为一个number类型，因为此处定义tuple的()与数学()产生了歧义，解释器优先将其解释为数学()</span></span><br><span class="line">t = (<span class="number">1</span>,) </span><br><span class="line"><span class="comment"># 此时t才会被正确的解释为一个tuple</span></span><br></pre></td></tr></table></figure><ul><li>“可变”tuple</li></ul><p>使用list与tuple的嵌套可以使tuple变得部分可变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>])</span><br><span class="line">t[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span></span><br><span class="line">t[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">print(r) </span><br><span class="line"><span class="comment"># 将会输出(&#x27;a&#x27;,&#x27;b&#x27;,[&#x27;X&#x27;,&#x27;Y&#x27;])</span></span><br><span class="line">print(<span class="built_in">len</span>(t))</span><br><span class="line"><span class="comment"># 将输出3，因为[&#x27;A&#x27;,&#x27;B&#x27;]，在t对应的内存中指保存有一个指向[&#x27;A&#x27;,&#x27;B&#x27;]所存在的地址的指针</span></span><br></pre></td></tr></table></figure><p>具体情况如下图所示</p><p>![Python%20564b04e5895e443e982a45f45f1c78ee/Untitled%203.png](E:/work/Python 564b04e5895e443e982a45f45f1c78ee/Untitled 3.png)</p><h2 id="Python条件语句"><a href="#Python条件语句" class="headerlink" title="Python条件语句"></a>Python条件语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;条件判断<span class="number">1</span>&gt;:    </span><br><span class="line">    &lt;执行<span class="number">1</span>&gt;</span><br><span class="line">    <span class="keyword">elif</span> &lt;条件判断<span class="number">2</span>&gt;:   </span><br><span class="line">        &lt;执行<span class="number">2</span>&gt;</span><br><span class="line">        <span class="keyword">elif</span> &lt;条件判断<span class="number">3</span>&gt;:    </span><br><span class="line">            &lt;执行<span class="number">3</span>&gt;</span><br><span class="line">            <span class="keyword">else</span>:    </span><br><span class="line">                &lt;执行<span class="number">4</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Python循环语句"><a href="#Python循环语句" class="headerlink" title="Python循环语句"></a>Python循环语句</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>Python允许使用<code>for...in</code>语句对有序表进行遍历：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部定义的list</span></span><br><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br><span class="line"><span class="comment"># 内部定义的list</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:    </span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + xprint(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>此外对连续自然数进行便利还能直接使用<code>range()</code>，注意该函数从0开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>Python中同样允许在循环中使用continue以及break</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:    </span><br><span class="line">    n = n + <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: </span><br><span class="line">        <span class="comment"># 如果n是偶数，执行continue语句        </span></span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line">        <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行 </span></span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure><h2 id="特殊数据结构"><a href="#特殊数据结构" class="headerlink" title="特殊数据结构"></a>特殊数据结构</h2><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>dict是python中的一种类似map结构，每个元素由一对{key,value}组成，使用方法与map类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125; </span><br><span class="line"><span class="comment">#在定义时赋值</span></span><br><span class="line">d[<span class="string">&#x27;Jack&#x27;</span>] = <span class="number">20</span> </span><br><span class="line"><span class="comment">#向dict中添加值</span></span><br></pre></td></tr></table></figure><p>存储同样的数据，用dict实现时的查找效率往往比用list实现更高效，原因如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于存储上例中的数据，使用list实现时往往需要这样实现</span></span><br><span class="line">l = [ <span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span> ]</span><br><span class="line">s = [ <span class="number">95</span>, <span class="number">75</span>, <span class="number">85</span> ]</span><br><span class="line"><span class="comment"># 对于此例，要查找Tracy的年龄时，需要做如下操作：</span></span><br><span class="line"><span class="comment"># 1. 先顺序查找list l，得到存有Tracy值的空间的下标，平均复杂度为O(n)</span></span><br><span class="line"><span class="comment"># 2. 再通过1操作得到的下标index，访问s[index]，得到85，平均复杂度为O(1)</span></span><br><span class="line"><span class="comment"># 如果使用dict实现，访问过程如下</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Tracy&#x27;</span> <span class="keyword">in</span> d:</span><br><span class="line">    d[<span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="comment"># 上述过程的执行速度非常快，往往可以达到O(1)</span></span><br></pre></td></tr></table></figure><p>为什么dict的查找速度如此之快呢，这就需要了解dict的底层实现了。</p><ol><li><p>python3.6及以下使用普通的hash方式实现dict，即对key值进行hash，将key与value存储到hash对应的位置中去。也就意味着使用这样的简单hash方法会导致数据结构无序（unordered）；并且，为了保证尽量少的hash冲突发生，往往剩余空间小于当前总容量大1/3时，就会对dict进行扩容，这就导致随着存储内容的增多，dict可能逐渐变得稀疏，造成空间的浪费</p></li><li><p>python3.7对hash结构进行了改进，首先python会维护一张由list实现的index表，indices，这种表用来存放下标映射关系，也就是，对于存放第一组数据，进行如下操作：</p><ol><li>计算出key 的下标值index = getIndex( hash(key) )</li><li>indices[index] = 0</li><li>Entities[0] = {key,value,hash(key)}</li></ol><p>这样做有什么好处呢，</p><p>首先，真正存放数据的Entities中存放的数据是顺序且连续的；</p><p>其次，这样存储，indices是稀疏的，但其中仅仅存放一个表示下标的数字，消耗的空间大大减小。</p><p>查找过程如下：</p><ol><li>首先通过hash函数得到indices中的下标，index = getIndex( hash(key) )</li><li>访问Entities[index]得到数据。</li></ol><p>这样做，每次查找需要多查一次，但多出来的查找时间复杂对为O(1)，时间开销的增加并不明显。</p></li></ol><p>更详细的内容可以参考下面的博客：</p><div class="tag link"><a class="link-card" title="Python字典dict实现原理" href="https://blog.csdn.net/weixin_43064185/article/details/107565845?ivk_sa=1024320u"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">Python字典dict实现原理</p><p class="url">https://blog.csdn.net/weixin_43064185/article/details/107565845?ivk_sa=1024320u</p></div></a></div><p>可见，dict的查找效率只与hash函数有关，与存储的容量没有直接关系。</p><p>dict还支持有如下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.get(<span class="string">&#x27;Bob&#x27;</span>) <span class="comment"># 获取d中key为Bob的值，如果没有，返回None，输出到控制台时表现为什么都没有d.get(&#x27;FK&#x27;,-1) # 获取d中key为FK的值，如果没有返回-1d.pop(&#x27;Jack&#x27;) # 删除d中key为Jack的值（包括key），并返回该值&#x27;Jack&#x27; in d # 如果key为Jack的值包含在d中，返回True，否则返回False</span></span><br></pre></td></tr></table></figure><p>由于dict中的key需要进行hash变换，这就要求了dict中存放的key必须是<code>可hash的</code>，也就是说必须是确定的值，比如数字，字符串，自定义类，而可变的list则无法作为key。</p><p>为什么str是不可变对象呢：</p><p>对于这样的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;abc&#x27;</span>b = a.replace(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;A&#x27;</span>)print(a)print(b)<span class="comment"># 对于a而言，进行a.replace(&#x27;a&#x27;,&#x27;A&#x27;)操作后，a中保存的值并没有变。</span></span><br></pre></td></tr></table></figure><p>对于第一条赋值语句而言，变量a可以理解为只是指向’abc’的指针，而真正的字符串对象则是’abc’本身。</p><p>也就是说不变对象调用自身的任意方法，都不会对自身造成改变，而是创建新的对象并返回。</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>python中的set同STL中的set，也可以理解为只有key的dict，因为底层逻辑是一样的，都是进行hash，只不过set是指用hash来保证不会有同样的元素被添加，定义set时需要使用一个list来创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>([ <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment"># 将得到一个set，内容为[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>注意set是无序的，使用set()去重时很可能得到不一样顺序的结果，主要原因是set存储是利用hash进行的，次序根据hash的值而定。但有时对纯数字的list进行set创建操作可能会得到有序的结果，原因可能是某些解释器的hash函数对数字进行hash时，得到的就是该数字。</p><p>set还包含如下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="number">2</span>) <span class="comment"># 向s中加入一个值为2的元素，如果重复，则结果不会改变s.remove(2) # 从s中删除值为2的元素</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>python使用如下方式进行函数的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionName</span>(<span class="params">param</span>):</span></span><br><span class="line">    <span class="comment">#function body</span></span><br><span class="line">    <span class="keyword">return</span> value1, value2 </span><br><span class="line"><span class="comment">#缺省状态下返回None，还能写作return None或return</span></span><br></pre></td></tr></table></figure><p>python中函数再返回多个值的时候，会将返回值用tuple封装，而多个变量可以同时接受一个tuple，因此下面的写法被认为是正确的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span>    </span><br><span class="line">    nx = x + step * math.cos(angle)    </span><br><span class="line">    ny = y - step * math.sin(angle)    </span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br><span class="line">x,y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="空函数"><a href="#空函数" class="headerlink" title="空函数"></a>空函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">emptyFunction</span>(<span class="params">param</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>python中的函数支持许多定义函数参数的方法，包括如下几种：</p><ul><li>位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">param</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>含有默认值的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">param = <span class="string">&#x27;default value&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># python会将实参和形参进行顺序匹配，对于未匹配到的形参，python将为其赋值为设定的默认值</span></span><br></pre></td></tr></table></figure><p>但是，需要注意的是，如果将参数的默认值设为可变对象，那么会出现一些问题，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">l = []</span>):</span></span><br><span class="line">    l.append(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">print(fun([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">print(fun())</span><br><span class="line">print(fun([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]))</span><br><span class="line">print(fun())</span><br><span class="line">print(fun())</span><br><span class="line"><span class="comment"># [1, 2, 3, &#x27;End&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;End&#x27;]</span></span><br><span class="line"><span class="comment"># [5, 6, 7, &#x27;End&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;End&#x27;, &#x27;End&#x27;]</span></span><br><span class="line"><span class="comment"># [&#x27;End&#x27;, &#x27;End&#x27;, &#x27;End&#x27;]</span></span><br></pre></td></tr></table></figure><p>注意到我调用了三次使用默认参数的fun，但是，函数好像有记忆一样，后两次fun使用的默认对象与上一次使用的是同一个！这显然是反直觉的，原因是python会在内存中开辟一块空间来存放参数的默认对象，为了节约空间，每当某个参数适用默认对象时，python只需要将其指向默认对象存放的空间就行了。但是如果默认对象使用可变对象，那么可能会存在某些操作，是的内存中的可变对象发生改变，导致每次赋予的默认值都不一样。</p><p>因此使用默认值有如下规则：</p><div class="note danger"><p>使用带有默认值的参数时，尽量将默认值设置为不变参数</p></div><p>但是如果一定要让某个函数的默认值为某个可变对象，使用<code>None</code>是最安全便捷的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">l = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    l.append(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>有时我们可能还想让间隔开的两个参数使用默认值，但由于python默认值检测是顺序的，考虑到这一点，python提供了如下方法来避免歧义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span></span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = a + b + c + d</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">fun(a = <span class="number">10</span>,d = <span class="number">40</span>) </span><br><span class="line"><span class="comment"># 此时只有形参a和b将使用指定的实参，b和c将使用默认值</span></span><br></pre></td></tr></table></figure><ul><li>可变参数</li></ul><p>有时候我们可能无法确认传入参数的数量，为此，python提供了可变参数，此法允许我们传入任意数量的参数。当然用tuple或者set作为参数同样可以实现类似的功能，但是可变参数省去了创建set或tuple的操作，并且当传入参数为空时，不像set或tuple一样需要判空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">*param</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> param:</span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line">print(function())</span><br><span class="line">print(function(<span class="number">1</span>))</span><br><span class="line">print(function(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>但当我们需要传入tuple或者set时，传入的tuple或set会和参数构成一个二维结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">*param</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> param:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            print(j)</span><br><span class="line">function([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>为了避免这种情况，python允许使用如下方式来避免歧义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">*param</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> param:</span><br><span class="line">        print(i)</span><br><span class="line">function([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">function(*[<span class="number">1</span>,<span class="number">2</span>]) </span><br><span class="line"><span class="comment"># 在tuple或set前加*会告诉python这个实参用来满足某个可变形参</span></span><br></pre></td></tr></table></figure><ul><li>关键字参数</li></ul><p>改参数允许传入0个或任意个含参数名的参数，这些参数再函数内部自动组装为dict，定义时使用<code>**</code>加以区分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>):</span>   </span><br><span class="line">    print(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line">person(<span class="string">&#x27;Jacky&#x27;</span>, <span class="number">30</span>) </span><br><span class="line"><span class="comment"># 输出为 name:Jacky age:30 other:&#123;&#125;</span></span><br><span class="line">person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">36</span>, gender = <span class="string">&#x27;M&#x27;</span>, city = <span class="string">&#x27;Beijing&#x27;</span>, job = <span class="string">&#x27;Engineer&#x27;</span>) </span><br><span class="line"><span class="comment">#输出为 name: Bob age: 36 other: &#123;&#x27;gender&#x27;:&#x27;M&#x27;,&#x27;city&#x27;: &#x27;Beijing&#x27;,&#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>关键字参数可以起到扩展函数功能的作用，比如在编写注册功能时。</p><p>还能自己组装dict后再传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=extra[<span class="string">&#x27;city&#x27;</span>], job=extra[<span class="string">&#x27;job&#x27;</span>])</span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra)</span><br><span class="line"><span class="comment"># 输出如下</span></span><br><span class="line"><span class="comment"># name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br><span class="line"><span class="comment"># name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>此处<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响<code>extra</code></p><ul><li>命名关键字参数</li></ul><p>关键字参数允许传入任意值，当我们需要限制关键字参数的名字时，可以使用命名关键字参数，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city, job</span>):</span>    </span><br><span class="line">    print(name, age, city, job)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, city=<span class="string">&#x27;Beijing&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line"><span class="comment"># Jack 24 Beijing Engineer</span></span><br></pre></td></tr></table></figure><p><code>*</code>之后的参数被视为明面关键字参数</p><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *args, city, job</span>):</span>    </span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure><p>命名关键字参数必须传入参数名，如果没有会报如下错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;TypeError: person() takes 2 positional arguments but 4 were given</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>次数由于没有指定参数名，python解释器认为调用时所提供的4个参数均为<code>position arguments</code>，即位置参数，而函数定义时只有2个位置参数。</p><p>命名关键字同样支持缺省值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, *, city = <span class="string">&quot;Beijing&quot;</span>, job</span>):</span></span><br><span class="line">    print(name, age, city, job)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span> job = <span class="string">&quot;Engineer&quot;</span>)</span><br><span class="line"><span class="comment"># Jack 24 Beijing Engineer</span></span><br></pre></td></tr></table></figure><h3 id="参数顺序"><a href="#参数顺序" class="headerlink" title="参数顺序"></a>参数顺序</h3><p>python中为了确保解释器对参数的解析正确，上述的5中参数需要按照一定顺序进行排列，即：</p><p>位置参数，默认参数，可变参数，命名关键字参数，关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">a, b, c = <span class="number">0</span>, *args, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a=&#x27;</span>, a, <span class="string">&#x27;b=&#x27;</span>, b, <span class="string">&#x27;c=&#x27;</span>, c, <span class="string">&#x27;args=&#x27;</span>, args, <span class="string">&#x27;kw=&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">a, b, c = <span class="number">0</span>, *, d, **kw</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;a=&#x27;</span>, a, <span class="string">&#x27;b=&#x27;</span>, b, <span class="string">&#x27;c=&#x27;</span>, c, <span class="string">&#x27;d=&#x27;</span>, d, <span class="string">&#x27;kw=&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">f1(<span class="number">1</span>,<span class="number">2</span>) </span><br><span class="line"><span class="comment"># a=1 b=2 c=0 args=() kw=&#123;&#125; </span></span><br><span class="line">f1(<span class="number">1</span>,<span class="number">2</span>,c = <span class="number">3</span>) </span><br><span class="line"><span class="comment"># a=1 b=2 c=3 args=() kw=&#123;&#125; </span></span><br><span class="line">f1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment"># a=1 b=2 c=3 args=(&#x27;a&#x27;,&#x27;b&#x27;) kw=&#123;&#125;</span></span><br><span class="line">f1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,x = <span class="number">99</span>) </span><br><span class="line"><span class="comment"># a=1 b=2 c=3 args=(&#x27;a&#x27;,&#x27;b&#x27;) kw=&#123;&#x27;x&#x27;:99&#125;</span></span><br><span class="line">f2(<span class="number">1</span>,<span class="number">2</span>,d = <span class="number">99</span>,ext = <span class="literal">None</span>) </span><br><span class="line"><span class="comment"># a=1 b=2 c=0 d=99 kw=&#123;&#x27;ext&#x27;:None&#125;</span></span><br></pre></td></tr></table></figure><p>除了上述方法以外，还可以使用一个<code>tuple</code>和一个<code>dict</code>调用上述函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">args = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">kw = &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line">f1(*args, **kw)</span><br><span class="line"><span class="comment"># a=1 b=2 c=3 args=(4,) </span></span><br><span class="line">kw=&#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line">args = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">k2 = &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">88</span>, <span class="string">&#x27;x&#x27;</span>:<span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line">f2(*args, **kw)</span><br><span class="line"><span class="comment"># a=1 b=2 c=3 d=88 k2=&#123;&#x27;x&#x27;:&#x27;#&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>虽然允许使用的参数组合有如此多种，但是使用过多的组合会导致函数接口的可读性下降</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归几乎是一门涉及到函数的语言必讲的内容，此处强调一下尾递归：</p><p><strong>尾递归</strong>：如果一个函数中所有<strong>递归形式的调用都出现在函数的末尾</strong>，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值<strong>不属于表达式</strong>的一部分时，这个递归调用就是尾递归。</p><p>谈到递归，就不得不谈起另一个词：<strong>函数栈</strong></p><p>递归虽然具有优秀的易读性，但过多的递归调用会占用很大空间的函数栈。</p><p>而尾递归，或者说“伪递归”可以通过优化使其只占用常数级的栈空间。</p><p>递归的执行过程可以理解为由两部分组成：</p><ol><li>递归</li><li>回溯</li></ol><p>而尾递归能偶被优化的原因，就在于尾递归的回溯过程可以省略。</p><p>下面来看几个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact1</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact1(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact2</span>(<span class="params">n,res</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fact2(n-<span class="number">1</span>,n * res)</span><br></pre></td></tr></table></figure><p>以上两个函数都能用来计算阶乘，但区别在于<code>fact1</code>中的回溯我们认为是有意义的，因为递归调用自身后，该层需要下一层递归返回的结果进行表达式运算$n*fact(n-1)$</p><p>而fact2中的当前层只是简单的对后一层结果进行返回。</p><p>因此这就意味着，我们不需要在进入下一层梦境之前，对当前层的“环境”进行保存。那么我们在函数栈中，便不需要为后一层开辟新的栈空间，而只是简单的让他覆盖掉当前层所在的栈帧。</p><p>此外，由于回溯时不需要做任何运算，只需要对结果进行保存，尾递归显然可以使用循环来代替。事实上，在一些没有循环结构的语言中，通常就是使用尾递归的方式来实现循环。</p><p>尾递归转化为循环的方法详见如下博客：</p><div class="tag link"><a class="link-card" title="尾递归为啥能优化？" href="https://zhuanlan.zhihu.com/p/36587160"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">尾递归为啥能优化？</p><p class="url">https://zhuanlan.zhihu.com/p/36587160</p></div></a></div><h2 id="Python高级特性"><a href="#Python高级特性" class="headerlink" title="Python高级特性"></a>Python高级特性</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>如果需要取一个list或tuple的某个片段，通常的做法是新建一个空list或tuple然后使用循环将其取出，但python提供了更方便的办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Jack&#x27;</span>]L[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># [&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span></span><br><span class="line">L[:<span class="number">3</span>] </span><br><span class="line"><span class="comment"># [&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span></span><br><span class="line">L[<span class="number">1</span>:<span class="number">3</span>] </span><br><span class="line"><span class="comment"># [&#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span></span><br><span class="line">L[-<span class="number">2</span>:] </span><br><span class="line"><span class="comment"># [&#x27;Bob&#x27;, &#x27;Jack&#x27;]</span></span><br><span class="line">L[-<span class="number">2</span>:-<span class="number">1</span>] </span><br><span class="line"><span class="comment"># [&#x27;Bob&#x27;]</span></span><br><span class="line">k = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">K[:<span class="number">10</span>:<span class="number">2</span>] </span><br><span class="line"><span class="comment"># [0,2,3,5,8]</span></span><br><span class="line">K[::<span class="number">5</span>] </span><br><span class="line"><span class="comment"># [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]</span></span><br><span class="line">K[:] </span><br><span class="line"><span class="comment"># [0, 1, 2, 3, ..., 99]</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;ABCDEFG&quot;</span><span class="built_in">str</span>[::<span class="number">2</span>] </span><br><span class="line"><span class="comment"># &#x27;ACEG&#x27;</span></span><br></pre></td></tr></table></figure><p>python中切片操作提供了三个可选择参数：</p><div class="note info"><p>note info [起始位置:结束位置:取数间隔]</p></div><p>注意事项：</p><ol><li>其中取数是取到结束位置的前一个标号</li><li>起始位置默认为0</li><li>取数间隔是指每k个数取一个</li></ol><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>例如遍历一个list或tuple的过程我们可以称之为迭代。</p><p>python中的<code>for</code>具有很多特殊的操作。比如使用<code>for...in</code> 来完成C++11中加入的新特性来遍历数组或其他数据结构中的每一个元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:a)&#123;</span><br><span class="line">    <span class="comment">//body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="comment">#body</span></span><br></pre></td></tr></table></figure><p>事实上python中的所有<code>可迭代对象</code>，都能通过<code>for...in</code>来遍历。比如<code>dict</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;<span class="keyword">for</span> key <span class="keyword">in</span> d:print(key)<span class="comment"># a# b# c</span></span><br></pre></td></tr></table></figure><p>由于<code>dict</code>的存储并不是按章顺序存储的，因此迭代顺序不一定是abc</p><p>默认情况下，dict迭代的是key</p><p>如果要迭代value，则需要使用：<code>for value in d.values()</code> ，如果需要同时迭代key和value，则需要使用如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure><p>那么我们该如何判断某对象是否输入可迭代对象呢？</p><p>需要通过如下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable) <span class="comment"># True str可迭代</span></span><br><span class="line"><span class="built_in">isinstance</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># True list可迭代</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">123</span>, Iterable) <span class="comment"># False 整数不可迭代</span></span><br></pre></td></tr></table></figure><p>而当我们需要对某个list进行类似C中的下标迭代，可以使用<code>enumerate</code>关键字将list转化为索引-元素对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line">    print(i, value)</span><br></pre></td></tr></table></figure><h3 id="列表生成"><a href="#列表生成" class="headerlink" title="列表生成"></a>列表生成</h3><p>python提供了一种非常方便的列表生成方式：</p><div class="note info"><p>variable = [out_exp for out_exp in input_list if out_exp == 2]</p></div><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># [4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure><p>此外还可以使用二重循坏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;ABC&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;XYZ&#x27;</span>]</span><br><span class="line"><span class="comment"># [&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span></span><br></pre></td></tr></table></figure><p>当我们使用<code>if</code>限制列表生成的元素时，<code>if...else</code>的使用需要特别注意：</p><ul><li>当if放在for后进行限定时，不能使用else</li><li>当if放在for前进行限定时，必须使用else</li></ul><p>这是因为for前面的部分是一个表达式，它必须根据x计算出一个结果。因此，考察表达式：x if x % 2 == 0，它无法根据x计算出结果，因为缺少else，必须加上else</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment"># [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器也是一种可以用来生成列表的工具，他与生成式最大的不同在于：生成式是将列表中的所有元素提前计算好，而生成器则等到你需要时再计算当前位置的值。</p><p>简单生成器的创建较为简单，只需要将生成式的<code>[]</code>改为<code>()</code>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure><p>生成器可以使用如下两种方法访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">next</span>(g)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(g)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="comment"># 使用next访问到末尾时将抛出此异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> g:</span><br><span class="line"><span class="meta">... </span>    print(n)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">16</span></span><br><span class="line"><span class="string">25</span></span><br><span class="line"><span class="string">36</span></span><br><span class="line"><span class="string">49</span></span><br><span class="line"><span class="string">64</span></span><br><span class="line"><span class="string">81</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>此外，还能将函数改造为生成器，当函数中使用关键字<code>yield</code>，进行返回时，此为生成器的高级用法，比如使用生成器打印杨辉三角：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangles</span>():</span></span><br><span class="line">    l = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> l[:] <span class="comment">#此处需要利用切片来为l创建副本</span></span><br><span class="line">        l.append(<span class="number">0</span>)</span><br><span class="line">        l = [l[i] + l[i - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l))] <span class="comment"># 利用生成式简化循环操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> fun():</span><br><span class="line">    results.append(t)</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(num &gt;= <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> results:</span><br><span class="line">    print(t)</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，python函数在返回可变对象时返回的是对象的地址</p></blockquote><p>此外，使用函数定义的生成器也能设置返回值，但需要通过捕捉<code>StopIteration</code>异常来查看返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span></span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = fib(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">next</span>(g)</span><br><span class="line">        pint(<span class="string">&#x27;g:&#x27;</span>, x)</span><br><span class="line">     <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">         print(<span class="string">&#x27;Generator return value:&#x27;</span>, e.value)</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">g: 1</span></span><br><span class="line"><span class="string">g: 1</span></span><br><span class="line"><span class="string">g: 2</span></span><br><span class="line"><span class="string">g: 3</span></span><br><span class="line"><span class="string">g: 5</span></span><br><span class="line"><span class="string">g: 8</span></span><br><span class="line"><span class="string">Generator return value: done</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代章节聊过可迭代对象：<code>Iterable</code></p><p>而迭代器，则是像生成器一样，不仅可以使用<code>for</code>遍历，还能被<code>next()</code>函数调用并不断返回下一个</p><p>可以使用如下方法进行判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>([], Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">isinstance</span>(&#123;&#125;, Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterator)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>此外还能用<code>iter()</code>方法把可迭代对象转化为迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;abc&#x27;</span>), Iterator)</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>Python中的<code>Iterator</code>对象表示一个数据流。</p><p>即</p><ol><li>能作用与<code>for</code>循环的对象都是<code>Iterable</code>类型</li><li>能作用与<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列</li></ol><p>事实上Python中的<code>for</code>本质上就是通过不断调用<code>next()</code>函数实现的。</p><h3 id="上下文管理器和with关键字"><a href="#上下文管理器和with关键字" class="headerlink" title="上下文管理器和with关键字"></a>上下文管理器和with关键字</h3><p>对于系统资源如文件、数据库连接、socket 而言，应用程序打开这些资源并执行完业务逻辑之后，必须做的一件事就是要关闭（断开）该资源。</p><p>通常情况下我们打开一个文件需要做如下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f.write(<span class="string">&quot;111111&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><p>但如果对该文件的操作非常之多，有几十上百行，最后的关闭代码及那个里实际执行代码非常远，甚至有时会忘记关闭文件。因此python为我们提供了更方便的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;2222&quot;</span>)</span><br></pre></td></tr></table></figure><p>使用<code>with</code>关键子我们就不需要进行显示的关闭文件了，运行with中的代码块后，将自动关闭该文件，也就是回到进入<code>with</code>代码块之前的状态。</p><p><strong>使用<code>with</code>关</strong>键字的方法更为简洁，它的实现原理是什么，这就涉及到上下文管理器。</p><p>任何实现了 <code>__enter__()</code> 和 <code>__exit__()</code> 方法的对象都可称之为上下文管理器</p><p>例如我们自定义一个上下文管理器来测试<code>with</code>的执行过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, file_name, mode</span>):</span></span><br><span class="line">        self.file_name = file_name</span><br><span class="line">        self.mode = mode</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.f = <span class="built_in">open</span>(self.file_name, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self,*args</span>):</span></span><br><span class="line">        self.f.close()</span><br><span class="line"><span class="keyword">with</span> Test4(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;4444&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">首先Test4(&quot;1.txt&quot;, &quot;w&quot;)初始化实例对象，</span></span><br><span class="line"><span class="string">然后with会寻找类中是否有__enter__  和 __exit__，</span></span><br><span class="line"><span class="string">如果有则调用__enter__函数，</span></span><br><span class="line"><span class="string">最后__enter__() 方法返回资源对象，这里就是你将要打开</span></span><br><span class="line"><span class="string">的那个文件对象，__exit__() 方法处理一些清除工作。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>此外我们还可以使用<code>contextmanager</code>装饰器来自定义上下文管理器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Python 还提供了一个 contextmanager 的装饰器，更进一步简化</span></span><br><span class="line"><span class="string">了上下文管理器的实现方式。通过 yield 将函数分割成两部分，yield 之前的</span></span><br><span class="line"><span class="string">语句在 __enter__ 方法中执行，yield 之后的语句在 __exit__ 方法中执行。</span></span><br><span class="line"><span class="string">紧跟在 yield 后面的值是函数的返回值。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test5</span>(<span class="params">path, mode</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(path, mode)</span><br><span class="line">    <span class="keyword">yield</span> f</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">with</span> test5(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;5555&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是<code>with</code>本身并没有异常捕获的功能，但是如果发生了运行时异常，它照样可以关闭文件释放资源。如果运行时发生了异常，就退出上下文管理器。调用管理器<code>__exit__()</code>方法。</p><p><code>with</code>不仅能用来管理文件，还能管理锁，链接等等，如管理线程锁的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#管理锁</span></span><br><span class="line"><span class="keyword">import</span>  threading</span><br><span class="line">lock = threading.lock()</span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="comment">#执行一些操作</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;python学习笔记，基础语法部分&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="http://enderxiao.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="计算机语言" scheme="http://enderxiao.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    
    <category term="研究生课程基础" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%BE%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python" scheme="http://enderxiao.top/categories/Python/"/>
    
    
    <category term="机器学习" scheme="http://enderxiao.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="python" scheme="http://enderxiao.top/tags/python/"/>
    
    <category term="基础" scheme="http://enderxiao.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>机器学习——入门</title>
    <link href="http://enderxiao.top/Machine-Learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8/"/>
    <id>http://enderxiao.top/Machine-Learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8/</id>
    <published>2021-04-02T03:01:41.000Z</published>
    <updated>2021-04-03T08:46:09.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="机器学习的定义"><a href="#机器学习的定义" class="headerlink" title="机器学习的定义"></a>机器学习的定义</h2><p>历史上主要有两位学者对机器学习进行过定义，反别是Arthur Samuel和Tom mitshell，下面分别给出介绍</p><h3 id="Arthur-Samuel"><a href="#Arthur-Samuel" class="headerlink" title="Arthur Samuel"></a>Arthur Samuel</h3><p>Arthur Samuel——编写世界上第一个棋类游戏人工智能程序</p><p>他对于机器学习的定义如下：</p><div class="note guide blue"><p>def： 机器学习是，赋予计算机学习能力，且该能力不是通过显著式编程获得</p></div><h4 id="非显著式编程"><a href="#非显著式编程" class="headerlink" title="非显著式编程"></a>非显著式编程</h4><p>让计算机自己总结规律的编程方法</p><h4 id="收益函数："><a href="#收益函数：" class="headerlink" title="收益函数："></a>收益函数：</h4><p>我们通常规定正在特定环境下，计算机做某些行为会带来某些收益，我们称它为<code>收益函数</code><br>在规定了行为和收益函数后，让计算机自己去找最大会收益函数的行为</p><h3 id="Tom-mitshell"><a href="#Tom-mitshell" class="headerlink" title="Tom mitshell"></a>Tom mitshell</h3><p>而Tom mitshell——在其书《Machine Learning》中对机器学习的定义为：</p><div class="note guide blue"><p>def： 机械学习，就是对于一个任务T，衡量完成T好换的性能指标P，以及计算机获得的经验E，计算机从经验E中学习，使得，计算机完成任务T的性能指标P逐步提升，即：计算机在T上的被P衡量的性能，会随着经验E的增加而提高</p></div><h2 id="机器学习任务的分类"><a href="#机器学习任务的分类" class="headerlink" title="机器学习任务的分类"></a>机器学习任务的分类</h2><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>对于：</p><ol><li>垃圾邮件识别</li><li>人脸识别</li></ol><p>这类的机器学习任务，需要<code>为数据打标签</code>（Labeling for training data），才此情况下，经验E是是<code>训练样本</code>和<code>标签</code>的集合，由此我们可以得到监督学习的定义：</p><div class="note guide blue"><p>def： 所有经验E都是人工采集并输入计算机的，将这类输入计算机训练数据同时加上标签的机器学习称为监督学习(Supervised Learning)</p></div><p>在此类机器学习中，算法必须知道预测什么，即目标变量的分类信息</p><p>此外还能通过数据标签的存在与否对监督学习进行分类，分为：</p><ol><li>传统监督学习</li><li>半监督学习</li><li>非监督学习</li></ol><h4 id="传统监督学习"><a href="#传统监督学习" class="headerlink" title="传统监督学习"></a>传统监督学习</h4><div class="note guide blue"><p>def： 传统监督学习(Traditional Supervised Learning)中，每一个数据标签都有数据标签</p></div><p>传统学习中主要的算法有：</p><ol><li>支持向量机(Support Vector Machine)</li><li>人工神经网络(Neural Networks)</li><li>深度神经网络(Deep Neural Networks)</li></ol><h4 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h4><div class="note guide blue"><p>def： 如果所有的训练数据都没有对应的标签，则称为非监督学习(Unsupervised Learning)</p></div><p>非监督学习的数据中没有类别信息（标签），也不会给定目标值。在无监督学习中：</p><ol><li>将数据集合分成由了类似的对象组成的多个类的过程称为<code>聚类</code>；</li><li>将寻找描述数据统计值的过程称为<code>密度估计</code>;</li></ol><p>此外，非监督学习可以减少数据特征的维度，一遍我们可以使用二维或三维图形更直观的展示数据信息。</p><p>由定义，我们可能会产生一个问题，对于没有数据标签的数据，我们如何对数据进行分类。</p><p>对此我们需要做出如下假设：</p><ol><li>如果同一类的训练数据在空间中距离最近</li><li>根据样本空间中的空间信息</li><li>设计算法将它们聚集为两类</li></ol><p>从而实现无监督学习，其中主要算法包括：</p><ol><li>聚类(Clustering)</li><li>EM算法(Expectation-Maximization algorithm)</li><li>主成分分析(Principle Component Analysis)</li></ol><h4 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h4><div class="note guide blue"><p>def： 如果训练数据中一部分由标签一部分没有标签，称这种机器学习为<code>半监督学习(Semi-Supervised Learning)</code></p></div><p>为了节约为数据打标签的成本，由于半监督学习使用<code>少量的标注数据</code>与<code>大量未标注数据</code>进行训练的特性，近年半监督学习逐渐成为热点</p><h4 id="另一种分类方式"><a href="#另一种分类方式" class="headerlink" title="另一种分类方式"></a>另一种分类方式</h4><p>基于标签的固有属性，我们可以将监督学习分为：</p><ol><li>分类</li><li>回归</li></ol><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>如果标签是<code>离散</code>的值，则将这种学习成为分类</p><p>如人脸识别算法，就是<code>分类</code>任务，如：</p><ol><li>给出两张人脸，判断是否为同一人，可以用0表示是，1表示否</li><li>从大量照片中，按照人脸将照片分类，则可以用$1,\dots,N$表示不同的人</li></ol><p>这些都是离散的值</p><h5 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h5><p>如果标签是<code>连续</code>的值，则将这种学习成为回归</p><p>例如设计算法预测房价的走势，标签为平均房价，训练样本为时间</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>对于分类、回归、聚类、密度估计，在此将这些操作的相关算法以及能够解决的问题进行汇总</p><table><thead><tr><th>监督学习算法</th><th>算法用途</th></tr></thead><tbody><tr><td>k-近邻算法</td><td>线性回归</td></tr><tr><td>朴素贝叶斯算法</td><td>局部加权线性回归</td></tr><tr><td>支持向量机</td><td>Ridge回归</td></tr><tr><td>决策树</td><td>Lasso最小回归系数估计</td></tr></tbody></table><table><thead><tr><th>非监督学习算法</th><th>算法用途</th></tr></thead><tbody><tr><td>K-均值</td><td>最大期望算法</td></tr><tr><td>DBSCAN</td><td>Parzen窗设计</td></tr></tbody></table><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>对于：</p><ol><li>下棋</li><li>自动驾驶</li></ol><p>这类机器学习任务，经验E是由计算机<code>与环境互动</code>获得的，我们只需要定义这些行为的<code>收益函数(Reward Function)</code>，对行为进行奖励和乘法，并且计算机能够根据这些奖励和乘法，改变自己的行为模式，从而<code>最大化收益函数</code></p><p>由此可以得到强化学习的定义：</p><p>计算机通过与环境的互动逐渐强化自己的行为模式的机器学习称为强化学习(Reinforcement Learning) </p><p>但对于AlphaGo而言，起初是通过监督学习，通过高手对局的视频，形成一个初始的围棋程序，在对该程序进行强化学习提成其性能。</p><h2 id="机器学习算法的过程"><a href="#机器学习算法的过程" class="headerlink" title="机器学习算法的过程"></a>机器学习算法的过程</h2><ol><li><p>特征提取(Feature Extraction)：</p><p>在这一步中会从样本中抽象出一些用于做分类的特征</p></li><li><p>特征选择(Feature Selection)</p><p>从1中抽象出的特征中分析，选出最能有效进行分类的特征，以此构建机器学习系统 </p></li><li><p>根据2中选出的特征构建特征空间(Feature Space)</p></li><li><p>选用不同的算法对特征空间进行划分</p><p>基于2中选择的特征构建算法</p></li></ol><blockquote><p>PS:</p><p>对于3中选择算法这一步，比如可以选择：</p><p>支持向量机(Support Vector Machine)，其中包含三种内核：</p><ol><li>线性内核</li><li>多项式核</li><li>高斯径向基函数核</li></ol></blockquote><p>再次列举一个构建特征空间的例子，特征空间可以按照特征的个数任意指定维数：</p><p><a href="https://postimg.cc/gX02mKM8"><img src="https://i.postimg.cc/MT7M0PVP/image.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/MT7M0PVP/image.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image.png" style="zoom:150%;" /></a></p><p>在特征空间中包含的几个关键词：</p><ol><li><p>维度</p><p>人对于三维以上的事物缺乏想象力，但目前的机器学习算法可以较为精确的处理三维以上的数据</p></li><li><p>标准</p><p>使用不同的标准，对某一些区域的划分会有区别</p></li></ol><h2 id="没有免费午餐定理"><a href="#没有免费午餐定理" class="headerlink" title="没有免费午餐定理"></a>没有免费午餐定理</h2><div class="note guide cyan"><p>定理 4.1 1995年,D.H.Wolpert等人提出： No Free Lunch Theorem(没有免费午餐定理?) 任何一个预测函数，如果在一些训练样本上表现好，那么必然在另一些训练样本上表现不好，如果不对数据在特定空间的<code>先验分布</code>有一定假设，那么表现好与不好的情况将会一样多</p></div><p>因此没有任何情况下都最优的机器学习方法</p><p>对于NFL定理中提及的先验分布而言，我们可以用如下例子进行理解：</p><p><a href="https://postimg.cc/3y1xsqZ3"><img src="https://i.postimg.cc/sXdGhdQG/NFL.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/sXdGhdQG/NFL.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="NFL.png" style="zoom:150%;" /></a></p><p>其中<code>空间上距离接近的样本它们属于同一个类别的概论更高</code>就是一种先验分布，这就意味着机器学习算法是基于某些先验分布来进行预测的学科。</p><p>这就意味着在学习过程中，我们不能片面夸大某个定理的作用，要对开发新的算法保持探索的精神。</p><p><strong>此外该定理还提醒了我们机器学习的本质：基于有限的已知数据，在复杂的高维特征空间中预测未知样本的属性和类别</strong></p><h2 id="如何选用合适的算法"><a href="#如何选用合适的算法" class="headerlink" title="如何选用合适的算法"></a>如何选用合适的算法</h2><p>选用机器学习算法需要考虑以下几个问题：</p><ol><li>使用机器学习算法的目的</li><li>想要完成的任务</li><li>了解数据的特征</li></ol><ul><li>首先考虑机器学习<code>算法的目的</code>以及想要完成的<code>任务</code>：<ol><li>如果要预测目标变量的值，则可以选择监督学习算法；</li><li>否则可以选择无监督学习算法。</li><li>确定选择监督学习算法后，需要进一步明确目标变量的类型：<ol><li>如果目标变量是离散型，则可以选择分类算法；</li><li>如果是连续性，则可以使用回归算法</li></ol></li></ol></li><li>其次需要考虑实际的数据，应该充分了解数据，对数据了解的越充分，越容易创建符合实际需要的应用程序，主要应该了解数据的以下几个特征：<ol><li>特征值是<code>离散型</code>变量还是<code>连续型</code>变量</li><li>特征值中是否有<code>缺失的值</code>，何种<code>原因</code>造成</li><li>数据中是否有<code>异常值</code></li><li>某些特征发生的<code>频率</code>如何</li></ol></li><li>通过对数据的充分了解，可以帮助我们缩小算法的选择范围，而由NFL定理可以知道，一般并不存在最好的算法和可以给出最好效果的算法，一般发现最好算法的关键环节就是反复<code>调试</code>和<code>迭代</code></li></ul><h2 id="开发机器学习应用程序的步骤"><a href="#开发机器学习应用程序的步骤" class="headerlink" title="开发机器学习应用程序的步骤"></a>开发机器学习应用程序的步骤</h2><ol><li>收集数据：通过多种手段收集数据，比如<code>爬虫</code>等，也可以使用<code>开源数据源</code></li><li>准备输入数据：<ol><li>得到数据之后，还必须确保数据格式符合要求，使用<code>标准的数据格式</code>可以融合算法和数据源，方便匹配操作</li><li>还要为机器学习算法准备<code>特定的数据格式</code>，一般某些算法要求目标变量和特征值是字符串，而另一些算法要求是整型</li></ol></li><li>分析输入数据：主要是人工分析得到的数据，确保数据中没有<code>垃圾数据</code></li><li>训练算法：将前两步得到的格式化数据输入到算法，从中抽取信息</li><li>测试算法：<ol><li>对于监督学习，必须已知用于评估算法的目标变量值</li><li>对于非监督学习，也必须用其他评测手段来检验算法的成功率</li><li>如果不满意算法的输出结果，不改变算法的前提下，问题常常与数据的收集和准备有关</li></ol></li><li>使用算法：将机器学习算法转化为应用程序，执行实际任务，以检验上述步骤是否可以在实际环境中运行</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;机器学习的定义&quot;&gt;&lt;a href=&quot;#机器学习的定义&quot; class=&quot;headerlink&quot; title=&quot;机器学习的定义&quot;&gt;&lt;/a&gt;机器学习的定义&lt;/h2&gt;&lt;p&gt;历史上主要有两位学者对机器学习进行过定义，反别是Arthur Samuel和Tom mitshell</summary>
      
    
    
    
    <category term="Machine Learning" scheme="http://enderxiao.top/categories/Machine-Learning/"/>
    
    <category term="机器学习入门" scheme="http://enderxiao.top/categories/Machine-Learning/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="Machine Learning" scheme="http://enderxiao.top/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>离散数学-复合关系与逆关系</title>
    <link href="http://enderxiao.top/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%A4%8D%E5%90%88%E5%85%B3%E7%B3%BB%E4%B8%8E%E9%80%86%E5%85%B3%E7%B3%BB/"/>
    <id>http://enderxiao.top/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%A4%8D%E5%90%88%E5%85%B3%E7%B3%BB%E4%B8%8E%E9%80%86%E5%85%B3%E7%B3%BB/</id>
    <published>2021-03-14T13:50:48.000Z</published>
    <updated>2021-04-03T14:18:24.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="复合关系"><a href="#复合关系" class="headerlink" title="复合关系"></a>复合关系</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设R是集合A到B的二元关系，S是集合B到C的二元关系，R和S的复合记作：$R \circ S$，它是集合A到C的二元关系，仅当$( a,b) \in R$且$(b,c) \in R$时，$(a,c) \in R \circ S$。</p><h3 id="复合关系的矩阵表示"><a href="#复合关系的矩阵表示" class="headerlink" title="复合关系的矩阵表示"></a>复合关系的矩阵表示</h3><h4 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h4><p>设$A = {a_1,a_2,a_3,…,a_n}, B = {b_1,b_2,b_3,…,b_m},C = {c_1,c_2,c_3,…,c_p}$,R时A到B的二元关系,R的关系矩阵为：<br>$$<br>M_R = \begin{bmatrix}<br>    x_{11} &amp; x_{12} &amp; \cdots &amp; x_{1m} \\<br>    x_{21} &amp; x_{22} &amp; \cdots &amp; x_{2m} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    x_{n1} &amp; x_{n2} &amp; \cdots &amp; x_{nm} \\<br>\end{bmatrix}<br>$$</p><p>其中：<br>$$<br>x_{ij} =<br>\begin{cases}<br>    1 &amp; (a_i,b_j)\in R \\<br>    0 &amp; (a_i,b_j) \notin R<br>\end{cases}<br>$$</p><p>S是B到C的二元关系，S的关系矩阵为：<br>$$<br>M_s = \begin{bmatrix}<br>    y_{11} &amp; y_{12} &amp; \cdots &amp; y_{1p} \\<br>    y_{21} &amp; y_{22} &amp; \cdots &amp; y_{2p} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    y_{m1} &amp; y_{m2} &amp; \cdots &amp; y_{mp} \\<br>\end{bmatrix}<br>$$<br>令$M_R\times M_S = [z_{ij}]$，即有：<br>$$<br>M_R \times M_S = \begin{bmatrix}<br>    z_{11} &amp; z_{12} &amp; \cdots &amp; z_{1p} \\<br>    z_{21} &amp; z_{22} &amp; \cdots &amp; z_{2p} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    z_{n1} &amp; z_{n2} &amp; \cdots &amp; z_{np} \\<br>\end{bmatrix}<br>$$<br>由矩阵乘法规则的：<br>$$<br>z_{ij} = x_{i1}\times y_{1j} + x_{i2}\times y_{2j}+ \dots + x_{im} \times y_{mj} = \sum\limits_{k = 1}^m x_{ik} \times y_{kj}<br>$$</p><p>对于式中的$x_{ik}\times y_{ik}$，当且仅当，$x_{ik},y_{kj}$同时为1时，计算结果才为1。又由于只有当$(a_i,b_k) \in  R \and  (b_k,c_j)  \in  S$时，才有$x_{ik} \neq 0  \and   y_{kj}  \neq  0$，故，由复合运算的定义可得，此时的$R \circ S$中应该包含$(a_{i},c_{j})$，即$z_{ij} \neq 0$。</p><p>故以此法就能通过矩阵乘法去确定一个复合关系的关系矩阵，而在计算矩阵乘法的过程中，我们只关注$\sum\limits_{k = 1}^m x_{ik} \times y_{kj}$中是否有1出现，故我们可以将此处的加法替换为<code>布尔加</code>（即 0+0 = 0，1+0 = 0+1 = 1，1+1 = 1），这样在编程实现中，就能使用<code>与</code>运算来代替10进制的加法运算，众所周知，代码的世界里，位运算要比10进制运算来的快。</p><p>我们用$M_R \circ M_S$来表示使用<code>布尔加</code>的矩阵乘法，于是可以得到如下定理</p><div class="note guide cyan"><p>定理4.1：设R时A到B的二元关系，其关系矩阵为$M_R$，S时B到C的二元关系，其关系矩阵为$M_S$，则$M_{R \circ S} = M_R \circ M_S$</p></div><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>复合关系具有如下特征：</p><ol><li>满足结合律</li><li>$R^i \circ R^j = R^{i+j}$（i,j为正整数）；$R^0$定义为${(a_1,b_1),(a_2,b_2),\dots ,(a_n,b_n)}$，即关系矩阵为单位矩阵</li></ol><h2 id="逆关系"><a href="#逆关系" class="headerlink" title="逆关系"></a>逆关系</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>设R是A到B的二元关系，如果把R中的每一个有序对中的元素顺序互换，所得B到A的二元关系称为R的逆关系，记作$R^{-1}$或$\tilde{R}$</p><h3 id="矩阵表示"><a href="#矩阵表示" class="headerlink" title="矩阵表示"></a>矩阵表示</h3><p>若二元关系R的的关系矩阵为$M _R$，则$M_R$的转置$M_{R}^T$，就是关系$R^{-1}$的关系矩阵</p><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3><p>有矩阵转置的运算规则可知：</p><p>$(A \times B)^T = B^T \times A^T$</p><p>由此可得以下定理</p><div class="note guide cyan"><p>定理4.2：设R是A到B的二元关系，S是B到C的二元关系，则$(R \circ S)^{-1} = S^{-1}\circ R^{-1}$</p></div><div class="note guide cyan"><p>定理4.3： 设R是A上的二元关系，$R^{-1}$ 是其逆关系，于是有：若R是 1. 自反的 2. 反自反的 3. 对称的 4. 反对称的 5. 可传递的 则$R^{-1}$也是</p></div><h2 id="关系的闭包运算"><a href="#关系的闭包运算" class="headerlink" title="关系的闭包运算"></a>关系的闭包运算</h2><h3 id="闭包运算的定义"><a href="#闭包运算的定义" class="headerlink" title="闭包运算的定义"></a>闭包运算的定义</h3><p>在给定的二元关系中，添加==最少量==的有序对后，使其称为自反的，或对称的，或传递的二元关系，则这样的操作称为关系的闭包运算</p><h3 id="自反、对称、传递闭包"><a href="#自反、对称、传递闭包" class="headerlink" title="自反、对称、传递闭包"></a>自反、对称、传递闭包</h3><p>设R是A上的二元关系，R的自反（对称、传递）闭包$R’$也是A上的二元关系，且满足：</p><ol><li>$R’$是自反的（对称的，传递的）</li><li>$R’ \supseteq R$</li><li>对于任何A上的自反的（对称的、传递的）二元关系$R’’$，如果$R’’ \supseteq R$，则必有$R’’\supseteq R’$</li></ol><p>通常R的自反闭包记作r(R)，对称闭包记作s(R)，传递闭包记作t(R)</p><h3 id="求闭包"><a href="#求闭包" class="headerlink" title="求闭包"></a>求闭包</h3><p>对于自反闭包和对称闭包，通过简单的添加“缺啥补啥”的原则即可求出</p><p>但在求传递闭包时，补充的元素可能会和已有的元素再次构成隐含的传递关系，那么处理起来就比较麻烦，下面介绍Warchall提出的求传递闭包的算法：</p><ol><li>置矩阵$M = M_R$（$M_R$ 是关系矩阵）</li><li>置 j = 1</li><li>对所有i，如果$m_{ij} = 1$，则对$k = 1,2,\dots,n$，置$m_{ik} = m_{ik} + m_{jk}$，即把第j行加到第i行</li><li>j = j + 1</li><li>如果$ j \leq n$，则跳转到步骤3，否则停止</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;复合关系&quot;&gt;&lt;a href=&quot;#复合关系&quot; class=&quot;headerlink&quot; title=&quot;复合关系&quot;&gt;&lt;/a&gt;复合关系&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h</summary>
      
    
    
    
    <category term="离散数学" scheme="http://enderxiao.top/categories/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="研究生入学考试" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/"/>
    
    <category term="复试" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/"/>
    
    
    <category term="离散数学" scheme="http://enderxiao.top/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="复合关系关系" scheme="http://enderxiao.top/tags/%E5%A4%8D%E5%90%88%E5%85%B3%E7%B3%BB%E5%85%B3%E7%B3%BB/"/>
    
    <category term="逆关系" scheme="http://enderxiao.top/tags/%E9%80%86%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>离散数学-等价关系与偏序关系</title>
    <link href="http://enderxiao.top/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/"/>
    <id>http://enderxiao.top/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/</id>
    <published>2021-03-14T08:32:19.000Z</published>
    <updated>2021-03-22T14:42:02.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>设存在关系R，若R满足：</p><ol><li>R是A上的二元关系</li><li>R是自反、==对称==、传递关系<br>则，R为A上的<code>等价关系</code>。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li>如果同年龄的大学生认为是相关的，不同年龄的大学生是无关的，则这种年龄关系R是<code>等价关系</code></li><li>如果姓氏相同的的大学生认为是相关的，不同姓氏的大学生是无关的，则这种姓氏关系R是<code>等价关系</code></li></ol><p>综上，若对于一个集合A种的元素，按某种条件进行分组，并使得：</p><ol><li>A种每个元素必属于某一组且仅属于一组</li><li>定义同一组内的元素相关，不同一组内的元素无关<br>则定义的二元关系必然是<code>等价关系</code></li></ol><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>若把A中的元素按“组”顺序排列，那么等价关系R的关系矩阵是由若干个元素全为1的小方阵构成</p><h2 id="等价类和商集"><a href="#等价类和商集" class="headerlink" title="等价类和商集"></a>等价类和商集</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><h4 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h4><p>设R是A商的等价关系，a是A中的任意元素，由A中所有与a相关的元素组成的集合，称为a关于R的<code>等价类</code>，记作$[a]_R$</p><h4 id="商集"><a href="#商集" class="headerlink" title="商集"></a>商集</h4><p>设R是A上的等价关系，由关于R的所有不同的等价类作为元素构成的集合称为A关于R的<code>商集</code>，记作A/R</p><h2 id="集合划分"><a href="#集合划分" class="headerlink" title="集合划分"></a>集合划分</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>设A是集合，$A_1 , A_2 , \dots , A_n$ 是A的非空子集，且满足：</p><ol><li>$A_1 \cup A_2 \cup \dots \cup A_n = A$</li><li>$A_i \cap A_j = \emptyset(i \neq j,i,j = 1,2,3,\dots,n)$</li></ol><p>则以$A_1 , A_2 , \dots , A_n$作为元素构成的集合S称为集合A的<code>划分</code>，每个子集$A_i$称为<code>块</code></p><h3 id="等价类、商集与集合划分"><a href="#等价类、商集与集合划分" class="headerlink" title="等价类、商集与集合划分"></a>等价类、商集与集合划分</h3><p>当R是A上的等价关系时，A关于R的<code>商集</code>时A的一个<code>划分</code>，<code>等价类</code>就是<code>块</code></p><p>于是有定理：</p><div class="note guide cyan"><p>定理3.1：集合A的划分能唯一地确定A上的一个等价关系；反之，确定了A上的等价关系也能唯一地确定A的一个划分，即A上的等价关系与划分一一对应</p></div><h3 id="集合运算的等价关系"><a href="#集合运算的等价关系" class="headerlink" title="集合运算的等价关系"></a>集合运算的等价关系</h3><p>设$R_1$ 和 $R_2$ 时非空集合A上的等价关系，则</p><ol><li>$R_1 \cup R_2$ 一定不是等价关系</li><li>$R_1 \cap R_2$ 一定是等价关系</li><li>$R_1 - R_2$ 一定不是等价关系</li><li>$R_1 \oplus R_2$ 一定不是等价关系</li></ol><p>可通过定义法，验证是否满足转递、自反、对称关系证明</p><h2 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>设有关系R，集合A，若R满足：</p><ol><li>R是A上的二元关系</li><li>R是自反，==反对称==，传递关系</li></ol><p>则R是A上的<code>偏序关系</code>(半序关系)</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ol><li>对于正整数集，$\mathbb{Z}^+$,R是其上的小于等于关系关系，即当$a \leq b$时，$(a,b) \in R$，则R是其上的<code>偏序关系</code></li><li>对于正整数集，$\mathbb{Z}^+$,R是其上的整除关系，即当$b \ mod \ a = 0$时，$(a,b) \in R$，则R是其上的<code>偏序关系</code></li></ol><p>通常把集合A和集合A上的偏序关系R合在一起称为<code>偏序集</code>，并记作（A,R）或（A,$\preceq$）</p><h3 id="偏序关系哈斯图表示"><a href="#偏序关系哈斯图表示" class="headerlink" title="偏序关系哈斯图表示"></a>偏序关系哈斯图表示</h3><p>由偏序关系的特征：</p><ol><li>每个顶点都有自回，则可省略所有自环</li><li>对于$(a,b) \in R$和$(b,c)\in R$时，必有$(a,c) \in R$，则可省略a到c的边</li><li>通过调整点的位置，可以使所有有向边全部朝上，则可省略有向边的箭头</li></ol><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p>如设A = {1,2,3,4,5,6,12},R时A上的整除关系。易知，R = {(1,1),(2,2),(3,3),(4,4),(6,6),(12,12),(1,2),(1,3),(1,4),(1,6),(1,12),(2,4),(2,6),(2,12),(3,6),(3,12),(4,12),(6,12)}</p><p>则使用有向图表示为：</p><img src="https://i.postimg.cc/nrL13PXd/2-2-1-a.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/nrL13PXd/2-2-1-a.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="图2.2.1(a)" style="zoom: 200%;" /><p>使用哈斯图表示为：</p><img src="https://i.postimg.cc/Vs7gJmh2/1.png" class="lazyload placeholder" data-srcset="https://i.postimg.cc/Vs7gJmh2/1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="图2.2.1(a)" style="zoom: 200%;" /><h4 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h4><p>设A(A,$\preceq$)是偏序集，a和b是A种两个不同的元素，如果$a\preceq b$，且在A中不存在其他元素c，使得$a\preceq c,c\preceq b$，则称b覆盖a</p><h4 id="作图原则"><a href="#作图原则" class="headerlink" title="作图原则"></a>作图原则</h4><p>利用覆盖的概念，可以油邻接矩阵直接画出哈斯图，即：</p><p>当b覆盖a时，代表b的顶点应华仔代表a的顶点上复，并用直线段连接这两个顶点</p><h3 id="偏序集中的特殊元素"><a href="#偏序集中的特殊元素" class="headerlink" title="偏序集中的特殊元素"></a>偏序集中的特殊元素</h3><p>设A(A,$\preceq$)是偏序集，A中存在元素a</p><ol><li>极小元：<ol><li>A中没有其他元素x满足$x\preceq a$，则a为A中的极小元</li><li>即a再也不能==覆盖==A中其他元素时，a时极小元</li></ol></li><li>极大元：<ol><li>A中没有其他元素x满足$x\succeq a$，则a为A中的极小元</li><li>即A中没有其他元素能==覆盖==a时，a为极大元</li></ol></li><li>最小元：<ol><li>中任何元素x，都有$x\succeq a$，则a为A中的最小元</li><li>即能被所有覆盖</li></ol></li><li>最大元：<ol><li>A中任何元素x，都有$x\preceq a$，则a为A中的最大元</li><li>即能覆盖所有</li></ol></li><li>上界：设B是A的子集，如果B中任何元素x，都有$x\preceq a$,则称a为子集B的上界</li><li>下界：设B是A的子集，如果B中任何元素x，都有$a\preceq x$,则称a为子集B的下界</li><li>上确界：<ol><li>设B是A的子集，a是B的上界，若B中任何上界x，都有$a\preceq x$，则称a为子集B的上确界</li><li>即最小上界</li></ol></li><li>下确界：<ol><li>设B是A的子集，a是B的上界，若B中任何上界x，都有$x \preceq a$，则称a为子集B的下确界</li><li>即最大下界</li></ol></li></ol><h3 id="全序集和拟序集"><a href="#全序集和拟序集" class="headerlink" title="全序集和拟序集"></a>全序集和拟序集</h3><h4 id="全序集"><a href="#全序集" class="headerlink" title="全序集"></a>全序集</h4><h5 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h5><p>设A(A,$\preceq$)是偏序集，如果A中任意两个元素都是<code>可比的</code>（即任意两个元素都有关系），则称$\preceq$为全序关系，$(A,\preceq)$为全序集</p><h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><p>如$Z^+$是正整数集合，对于先于等于关系，$(Z^+,\preceq)$是全序集下</p><h4 id="拟序集"><a href="#拟序集" class="headerlink" title="拟序集"></a>拟序集</h4><h5 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h5><p>设R是A上的一个二元关系，若满足：</p><ol><li>R是反自反关系</li><li>R是传递关系</li></ol><p>则R为A上的拟序关系，A为拟序集</p><h5 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h5><p>如$Z$上的小于关系是拟序关系</p><h5 id="相关定理"><a href="#相关定理" class="headerlink" title="相关定理"></a>相关定理</h5><p>拟序关系有如下定理：</p><div class="note guide cyan"><p>定理3.2：设R是A上的拟序关系，则R是A上的反对称关系</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;等价关系&quot;&gt;&lt;a href=&quot;#等价关系&quot; class=&quot;headerlink&quot; title=&quot;等价关系&quot;&gt;&lt;/a&gt;等价关系&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h</summary>
      
    
    
    
    <category term="离散数学" scheme="http://enderxiao.top/categories/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="研究生入学考试" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/"/>
    
    <category term="复试" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/"/>
    
    
    <category term="离散数学" scheme="http://enderxiao.top/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="等价关系" scheme="http://enderxiao.top/tags/%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB/"/>
    
    <category term="偏序关系" scheme="http://enderxiao.top/tags/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>离散数学-二元关系与函数</title>
    <link href="http://enderxiao.top/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <id>http://enderxiao.top/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%87%BD%E6%95%B0/</id>
    <published>2021-02-28T14:04:49.000Z</published>
    <updated>2021-03-06T15:41:42.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二元关系基本概念"><a href="#二元关系基本概念" class="headerlink" title="二元关系基本概念"></a>二元关系基本概念</h2><h3 id="二元关系定义"><a href="#二元关系定义" class="headerlink" title="二元关系定义"></a>二元关系定义</h3><hr><p>$$<br>设存在集合A={a,b,c,d,e}<br>$$</p><p>$$<br>若存在集合形如R={(a,b),(b,c),(b,d),(d,e)}的仅由A中两个元素组成的集合，称为二元关系<br>$$</p><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><hr><p>笛卡尔积，又称直积</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><hr><p>设A、B是集合,A到B的笛卡尔积用$A\times B$表示，$A\times B$为所有以形如（a,b）的有序对为元素的集合，其中$a \in A,b\in B$</p><p>当B = A时，$A\times A$称为集合A上的笛卡尔乘积</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><hr><p>$A = {a,b,c},B = {x,y}$<br>$则A\times B = {(a,x),(a,y),(b,x),(b,y),(c,x),(c,y)}$</p><h4 id="笛卡尔积元素个数"><a href="#笛卡尔积元素个数" class="headerlink" title="笛卡尔积元素个数"></a>笛卡尔积元素个数</h4><hr><p>由笛卡尔积的性质可知，若确定了某个集合A和B，则$A\times B$中的元素个数时可确定的。</p><p>接下来讨论元素个数的特点</p><p>若$|A| = n,|B| = m$ </p><p>A中任意一个元素a都能与B中的每一个元素组成一个元组，则可以组成m个</p><p>则$|A\times B| = n\times m$</p><h4 id="笛卡尔积相关定义"><a href="#笛卡尔积相关定义" class="headerlink" title="笛卡尔积相关定义"></a>笛卡尔积相关定义</h4><hr><h5 id="二元关系"><a href="#二元关系" class="headerlink" title="二元关系"></a>二元关系</h5><hr><p>$设A、B是集合，R是笛卡尔乘积A\times B的子集，则称R是A到B的一个二元关系$</p><p>$若B = A，R是笛卡尔乘积A\times B的子集，称R是A上的一个二元关系$</p><h5 id="前域与值域"><a href="#前域与值域" class="headerlink" title="前域与值域"></a>前域与值域</h5><hr><p>$设R是二元关系，由(x,y)\in R的所有x组成的集合称为R的前域记作domR$</p><p>$所有y组成的集合称为R的值域，记作ranR$</p><h5 id="平凡子集"><a href="#平凡子集" class="headerlink" title="平凡子集"></a>平凡子集</h5><p>对于集合A，空集和集合A本身一定是A的子集，则成这两个集合为A的平凡子集</p><h5 id="笛卡尔积的平凡子集"><a href="#笛卡尔积的平凡子集" class="headerlink" title="笛卡尔积的平凡子集"></a>笛卡尔积的平凡子集</h5><p>对于A和B的笛卡尔乘积$A\times B$，$\emptyset和A\times B$分别称为空关系和全域关系</p><h3 id="二元关系表示法"><a href="#二元关系表示法" class="headerlink" title="二元关系表示法"></a>二元关系表示法</h3><hr><h4 id="表格表示法"><a href="#表格表示法" class="headerlink" title="表格表示法"></a>表格表示法</h4><hr><p>前域为行，值域为列</p><p>如：</p><p>$A = {a_1,a_2,a_3,a_4,a_5}$</p><p>$B = {b_1,b_2,b_3,b_4}$</p><p>$R = {(a_1,b_1),(a_1,b_2),(a_3,b_3),(a_4,b_4),(a_5,b_3)}$</p><p>则R可表示为</p><table><thead><tr><th></th><th>b1</th><th>b2</th><th>b3</th><th>b4</th></tr></thead><tbody><tr><td>a1</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>a2</td><td></td><td></td><td></td><td></td></tr><tr><td>a3</td><td></td><td></td><td>√</td><td></td></tr><tr><td>a4</td><td></td><td></td><td></td><td>√</td></tr><tr><td>a5</td><td></td><td></td><td>√</td><td></td></tr></tbody></table><h4 id="矩阵表示法"><a href="#矩阵表示法" class="headerlink" title="矩阵表示法"></a>矩阵表示法</h4><hr><p>设$|A| = n,|B| = m$,则可以用一个$n\times m$的矩阵C来表示关系二元关系R</p><p>即将C中元素$C_{ij}$定义为：<br>$$<br>\begin{cases}<br>    1 &amp; (a_i,b_j)\in R \\<br>    0 &amp; (a_i,b_j) \notin R<br>\end{cases}<br>$$</p><p>则，矩阵<br>$$<br>C = \begin{bmatrix}<br>        1 &amp; 0 &amp; 0 \\<br>        0 &amp; 1 &amp; 1 \\<br>        0 &amp; 0 &amp; 1 \\<br>        0 &amp; 1 &amp; 0 \\<br>        0 &amp; 0 &amp; 1 \\<br>     \end{bmatrix}<br>$$</p><p>则C称为R的关系矩阵</p><h4 id="图形表示法"><a href="#图形表示法" class="headerlink" title="图形表示法"></a>图形表示法</h4><hr><p>对于R中的所有关系，分别用n个点表示A中的所有元素，m个点表示B中的所有元素，若$a\in A,b \in B,(a,b) \in R$,则从点a至b画一条有向边</p><p>若R是A上的二元关系，则可以只用n个点表示A中的所有元素，若$(a_i,a_j) \in R$,则从点$a_i$到点$a_j$画一条有向边</p><h3 id="二元关系的基本类型"><a href="#二元关系的基本类型" class="headerlink" title="二元关系的基本类型"></a>二元关系的基本类型</h3><hr><table><thead><tr><th>基本类型</th><th>定义</th><th>特征</th></tr></thead><tbody><tr><td>自反</td><td>设R是A上的一个二元关系，如果对于A中每一个元素a，都有$(a,a) \in R$，则称R为自反的二元关系</td><td>R的关系矩阵中的主对角线元素均为1</td></tr><tr><td>反自反</td><td>设R是A上的二元关系，如果对于A中每一个元素a，都有$(a,a) \notin R$，则称R为反自反的二元关系</td><td>R的关系矩阵中主对角线元素均为0</td></tr><tr><td>对称</td><td>设R是A上的二元关系，且每当$(a,b)\in R$时，就一定有$(b,a)\in R$，则称R为对称的二元关系</td><td>R的关系矩阵是一个对称的方阵</td></tr><tr><td>反对称</td><td>设R是A上的二元关系，每当$(a,b)\in R$，且$(b,a) \in R$时，必有a = b，则称R为反对称的二元关系</td><td>R的关系矩阵中以主对角线对称的两个元素不能同时为1</td></tr><tr><td>传递</td><td>设R是A上的二元关系，每当有$(a,b)\in R$且$(b,c) \in R$时，必有$(a,c) \in R$，则称R为传递的二元关系</td><td>可以通过矩阵乘法判断是否传递</td></tr></tbody></table><h4 id="传递性的判断"><a href="#传递性的判断" class="headerlink" title="传递性的判断"></a>传递性的判断</h4><hr><p>判断关系R是否为传递的二元关系时，需要利用矩阵乘法，下面进行分析<br>$$<br>设A = {a_1,a_2,…,a_3},R时A上的二元关系，R的关系矩阵A_R为<br>$$</p><p>$$<br>A_R = \begin{bmatrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \\<br>\end{bmatrix}<br>$$</p><p>其中<br>$$<br>a_{ij} =<br>\begin{cases}<br>    1 &amp; (a_i,b_j)\in R \\<br>    0 &amp; (a_i,b_j) \notin R<br>\end{cases}<br>$$<br>令$B = A_R \times A_R, B$中的元素为$b_{ij}$,即有<br>$$<br>B = \begin{bmatrix}<br>        b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1n} \\<br>        b_{21} &amp; b_{22} &amp; \cdots &amp; b_{2n} \\<br>        \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>        b_{n1} &amp; b_{n2} &amp; \cdots &amp; b_{nn} \\<br>        \end{bmatrix} = \begin{bmatrix}<br>            a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\<br>            a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\<br>            \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>            a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \\<br>            \end{bmatrix}\times \begin{bmatrix}<br>                a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\                     a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\                    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\                    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \\<br>            \end{bmatrix}<br>$$</p><p>由矩阵乘法运算规则可知</p><p>$$<br>b_{ij} = a_{i1} \times a_{1j} + a_{i2}\times a_{2j} + \cdots +a_{in}\times a_{nj} = \sum\limits_{R = 1}^n a_{ik} \times a_{kj}<br>$$</p><p>即，当$b_{ij} \neq 0$时，说明，存在一个$k\leq n$,其对应的一组$a_{ik}=a_{kj}=1$，即$(a_{ik},a{jk})\in R$，那么如果R为传递关系，则必须有$a_{ij} = 1$，故对于任意$b_{ij} \neq 0$都有$a_{ij} = 1$,则R为传递关系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二元关系基本概念&quot;&gt;&lt;a href=&quot;#二元关系基本概念&quot; class=&quot;headerlink&quot; title=&quot;二元关系基本概念&quot;&gt;&lt;/a&gt;二元关系基本概念&lt;/h2&gt;&lt;h3 id=&quot;二元关系定义&quot;&gt;&lt;a href=&quot;#二元关系定义&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="离散数学" scheme="http://enderxiao.top/categories/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="研究生入学考试" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/"/>
    
    <category term="复试" scheme="http://enderxiao.top/categories/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6%E8%80%83%E8%AF%95/%E5%A4%8D%E8%AF%95/"/>
    
    
    <category term="离散数学" scheme="http://enderxiao.top/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="二元关系" scheme="http://enderxiao.top/tags/%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/"/>
    
    <category term="笛卡尔积" scheme="http://enderxiao.top/tags/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>毕业设计</title>
    <link href="http://enderxiao.top/%E6%9C%AC%E7%A7%91/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    <id>http://enderxiao.top/%E6%9C%AC%E7%A7%91/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/</id>
    <published>2021-02-25T09:53:14.000Z</published>
    <updated>2021-02-25T10:17:39.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h2><h3 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h3><hr><h4 id="college"><a href="#college" class="headerlink" title="college"></a>college</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>college_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>college_name</td><td>varchar</td><td></td><td>40</td><td>学院名，唯一</td><td>√</td></tr><tr><td>college_student_num</td><td>int</td><td></td><td></td><td>学院总人数</td><td></td></tr></tbody></table><h4 id="major"><a href="#major" class="headerlink" title="major"></a>major</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>major_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>major_name</td><td>varchar</td><td></td><td>40</td><td>专业名，唯一</td><td>√</td></tr><tr><td>major_student_num</td><td>int</td><td></td><td></td><td>专业人数</td><td></td></tr><tr><td>college_id</td><td>int</td><td>外键（college）</td><td></td><td>学院名</td><td>√</td></tr></tbody></table><h4 id="classes"><a href="#classes" class="headerlink" title="classes"></a>classes</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>classes_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>major_id</td><td>int</td><td>外键（major）</td><td></td><td>所属专业</td><td>√</td></tr><tr><td>school_year</td><td>int</td><td></td><td></td><td>学年</td><td>√</td></tr><tr><td>classes_name</td><td>int</td><td></td><td></td><td>班级名（1，2，3…）</td><td>√</td></tr></tbody></table><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>u_id</td><td>int</td><td>主键</td><td></td><td>学生学号</td><td>√</td></tr><tr><td>username</td><td>varchar</td><td></td><td>20</td><td>学生姓名</td><td>√</td></tr><tr><td>password</td><td>char</td><td></td><td>6</td><td>必须为6位数字</td><td>√</td></tr><tr><td>class_id</td><td>int</td><td>外键（classes表）</td><td></td><td>班级id</td><td>√</td></tr></tbody></table><h4 id="virtualCard"><a href="#virtualCard" class="headerlink" title="virtualCard"></a>virtualCard</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>vc_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>u_id</td><td>int</td><td>外键（user）</td><td></td><td>用户id</td><td>√</td></tr><tr><td>rest_money</td><td>int</td><td></td><td></td><td>卡内剩余金额数</td><td>√</td></tr><tr><td>card_status</td><td>byte</td><td></td><td></td><td>0表示未激活，1表示激活</td><td>√</td></tr><tr><td>creat_time</td><td>datetime</td><td></td><td></td><td>创建时间</td><td>√</td></tr><tr><td>last_edit_time</td><td>datetime</td><td></td><td></td><td>最后一次更新时间</td><td>√</td></tr><tr><td>vc_password</td><td>char</td><td></td><td>6</td><td>校园卡支付密码</td><td>√</td></tr></tbody></table><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>store_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>store_name</td><td>varchar</td><td></td><td>40</td><td>商铺名，唯一</td><td>√</td></tr><tr><td>create_time</td><td>datetime</td><td></td><td></td><td>创建时间</td><td>√</td></tr></tbody></table><h4 id="consumption"><a href="#consumption" class="headerlink" title="consumption"></a>consumption</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>csp_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>csp_money</td><td>int</td><td></td><td></td><td>消费金额</td><td>√</td></tr><tr><td>store_id</td><td>int</td><td>外键（store）</td><td></td><td>消费地点id</td><td>√</td></tr><tr><td>csp_time</td><td>datetime</td><td></td><td></td><td>消费时间</td><td>√</td></tr><tr><td>u_id</td><td>int</td><td>外键（user）</td><td></td><td>消费用户</td><td>√</td></tr><tr><td>csp_status</td><td>byte</td><td></td><td></td><td>0表示出账，1表示入账</td><td>√</td></tr></tbody></table><h4 id="grade"><a href="#grade" class="headerlink" title="grade"></a>grade</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>grade_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>u_id</td><td>int</td><td>外键（user）</td><td></td><td>成绩所属学生</td><td>√</td></tr><tr><td>grade_sum</td><td>varchar</td><td></td><td></td><td>总成绩</td><td>√</td></tr><tr><td>daily_grade</td><td>varchar</td><td></td><td>10</td><td>平时成绩</td><td></td></tr><tr><td>exam_grade</td><td>varchar</td><td></td><td>10</td><td>考试成绩</td><td></td></tr><tr><td>exam_type</td><td>varchar</td><td></td><td>10</td><td>测试类型</td><td>√</td></tr><tr><td>grade_name</td><td>varchar</td><td></td><td>40</td><td>课程名</td><td>√</td></tr></tbody></table><h4 id="classRoom"><a href="#classRoom" class="headerlink" title="classRoom"></a>classRoom</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>class_room_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>class_room_no</td><td>int</td><td></td><td></td><td>教室编号</td><td>√</td></tr><tr><td>class_building</td><td>varchar</td><td></td><td>40</td><td>所属教学楼</td><td>√</td></tr><tr><td>area_name</td><td>varchar</td><td></td><td>10</td><td>校区</td><td>√</td></tr></tbody></table><h4 id="course"><a href="#course" class="headerlink" title="course"></a>course</h4><hr><table><thead><tr><th>字段名</th><th>数据类型</th><th>键</th><th>长度</th><th>备注</th><th>不是null</th></tr></thead><tbody><tr><td>course_id</td><td>int</td><td>主键</td><td></td><td>自增</td><td>√</td></tr><tr><td>course_name</td><td>varchar</td><td></td><td>30</td><td>课程名</td><td>√</td></tr><tr><td>classes_id</td><td>int</td><td>外键（classes）</td><td></td><td>上课班级</td><td>√</td></tr><tr><td>week_no</td><td>int</td><td></td><td>1-25</td><td>上课周次</td><td>√</td></tr><tr><td>week_day</td><td>int</td><td></td><td>1~7</td><td>课程在周几</td><td>√</td></tr><tr><td>course_no</td><td>int</td><td></td><td>1~8</td><td>第几节课</td><td>√</td></tr><tr><td>class_room_id</td><td>int</td><td>外键（classRoom）</td><td></td><td>上课教室</td><td>√</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;毕业设计&quot;&gt;&lt;a href=&quot;#毕业设计&quot; class=&quot;headerlink&quot; title=&quot;毕业设计&quot;&gt;&lt;/a&gt;毕业设计&lt;/h2&gt;&lt;h3 id=&quot;数据字典&quot;&gt;&lt;a href=&quot;#数据字典&quot; class=&quot;headerlink&quot; title=&quot;数据字典&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="本科" scheme="http://enderxiao.top/categories/%E6%9C%AC%E7%A7%91/"/>
    
    <category term="毕业设计" scheme="http://enderxiao.top/categories/%E6%9C%AC%E7%A7%91/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="毕业设计" scheme="http://enderxiao.top/tags/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="微信小程序" scheme="http://enderxiao.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="本科" scheme="http://enderxiao.top/tags/%E6%9C%AC%E7%A7%91/"/>
    
    <category term="虚拟校园" scheme="http://enderxiao.top/tags/%E8%99%9A%E6%8B%9F%E6%A0%A1%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>mybatis入门</title>
    <link href="http://enderxiao.top/ssm/mybatis/mybatis%E5%85%A5%E9%97%A8/"/>
    <id>http://enderxiao.top/ssm/mybatis/mybatis%E5%85%A5%E9%97%A8/</id>
    <published>2021-02-08T07:34:18.000Z</published>
    <updated>2021-08-05T23:43:14.117Z</updated>
    
    <content type="html"><![CDATA[<p>java工具——持久层工具mybatis</p><a id="more"></a><h2 id="mybatis简介"><a href="#mybatis简介" class="headerlink" title="mybatis简介"></a>mybatis简介</h2><div class="tag link"><a class="link-card" title="以下引用自百度" href="https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">以下引用自百度</p><p class="url">https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin</p></div></a></div><p>MyBatis 本是apache的一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/3406069">开源项目</a>iBatis, 2010年这个<a href="https://baike.baidu.com/item/%E9%A1%B9%E7%9B%AE/477803">项目</a>由apache software foundation 迁移到了<a href="https://baike.baidu.com/item/Google%E4%BB%A3%E7%A0%81/1433386?fromtitle=google%20code&fromid=2346604">google code</a>，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341">Github</a>。</p><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%B1%82/3584971">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p><h2 id="mybatis作用"><a href="#mybatis作用" class="headerlink" title="mybatis作用"></a>mybatis作用</h2><div class="tag link"><a class="link-card" title="以下引用自百度" href="https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">以下引用自百度</p><p class="url">https://baike.baidu.com/item/MyBatis/2824918?fr=aladdin</p></div></a></div><ol><li>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</li></ol><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><hr><p><a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E5%8C%96/6726574?fr=aladdin">将程序数据在持久状态和瞬间状态之间转化的机制，最好的例子就是将内存中的数据保存到磁盘就是一个持久化的过程</a></p><p>我们的程序在运行时说的持久化通常就是指将内存数据存在硬盘，比如保存在数据库文件、xml文件中</p><h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><hr><p>java中所说的持久层，大体上指将业务中操作数据库的代码统一抽离出来，形成了位于业务层和数据库之间的独立的层</p><p>常见的解决方案有：</p><ul><li>JDBC</li><li>EJB</li><li>JDO</li></ul><h3 id="mybatis优点和缺点"><a href="#mybatis优点和缺点" class="headerlink" title="mybatis优点和缺点"></a>mybatis优点和缺点</h3><hr><ul><li>sql语句与代码分离，存放在xml配置文件中<ul><li>优点：便于维护管理，不用在java代码中找这些语句，使项目能更好的符合开闭原则</li><li>缺点：JDBC方式可以用打断点的方式调试，但是mybatis不能，需要通过log4j日志输出日志信息帮助调试，然后再配置文件中修改</li></ul></li><li>用逻辑标签控制动态SQL的拼接<ul><li>优点：用标签代替写逻辑代码</li><li>缺点：拼接复杂SQL语句时，没有代码灵活，拼写比较复杂。</li></ul></li><li>查询的结果集与java对象自动映射<ul><li>优点：保证名称相同，配置好映射关系即可自动映射，或者，不配置映射关系，通过配置列名 = 字段名也可以完成自动映射</li><li>缺点：对开发人员缩写的SQL依赖很强</li></ul></li><li>编写原生SQL<ul><li>接近JDBC，比较灵活</li><li>对SQL语句依赖程度很高；并且属于半自动，数据库移植比较麻烦，比如mysql数据库变成Oracle数据库，部分sql语句需要调整</li></ul></li></ul><h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><p>代理模式分为：</p><ol><li>静态代理</li><li>动态代理</li></ol><p>代理的核心功能是方法增强</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><hr><h4 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h4><hr><ol><li>抽象角色：一般使用接口或者抽象类来实现</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色；代理真实角色后，一般会做一些附属的操作</li><li>客户：使用代理角色来进行一些操作</li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><hr><p>写一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Singer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 歌手都能唱歌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>男歌手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleSinger</span> <span class="keyword">implements</span> <span class="title">Singer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaleSinger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">&quot;开始唱歌了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经纪人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">Singer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Singer singer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Singer singer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.singer = singer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;和节目组谈好价格，曲目，场地....&quot;</span>);</span><br><span class="line">        singer.sing();</span><br><span class="line">        System.out.println(<span class="string">&quot;结算费用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singer singer = <span class="keyword">new</span> MaleSinger(<span class="string">&quot;Bob.M&quot;</span>);</span><br><span class="line">        Singer agent = <span class="keyword">new</span> Agent(singer);</span><br><span class="line">        agent.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程中我们直接接触的是经纪人，经济人在演出前后做了一些复杂的事情</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><hr><ul><li>虽然整个演出的过程复杂了，但是歌手类并没有改变</li><li>公共的统一问题都交给了代理完成</li><li>公共业务进行拓展或变更时，可以更为方便</li><li>符合开闭原则、单一原则</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><hr><ul><li>每个类都写个代理，重复工作较多，比较麻烦</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><hr><ol><li>动态代理的角色和静态代理的一样</li><li>动态代理的代理类是动态生成的，静态代理中的代理是我们自己创建的</li><li>动态代理分为两类：<ol><li>基于接口的动态代理——JDK动态代理</li><li>基于类的动态代理——cglib</li></ol></li><li>现在用的比较多的是javasist来生成动态代理</li></ol><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><hr><p>核心：invocationHandler和Proxy，打开JDK帮助文档可查看</p><p>【invocationHandler：调用处理程序】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy,Method method, Object[] args)</span></span>;</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//proxy -调用该方法的代理实列</span></span><br><span class="line"><span class="comment">//method - 所描述方法对应于调用代理实列上的接口方法的实列。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口</span></span><br><span class="line"><span class="comment">//args -包含的方法调用传递代理实列的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实列中，例如java.lang.Integer或java.lang.Boolean.</span></span><br></pre></td></tr></table></figure><p>【proxy：代理】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Proxy.<span class="function">new <span class="title">ProxyInstance</span><span class="params">(<span class="keyword">this</span>.getClass()</span>.<span class="title">getClassLoader</span><span class="params">()</span>, rent.<span class="title">getClass</span><span class="params">()</span>.<span class="title">getInterface</span><span class="params">()</span>,<span class="keyword">this</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**参数：</span></span><br><span class="line"><span class="comment"> * 类加载器，接口数组，innovationHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singer singer = <span class="keyword">new</span> MaleSinger(<span class="string">&quot;Bob.M&quot;</span>);</span><br><span class="line">        Singer agent = (Singer) Proxy.newProxyInstance(Client.class.getClassLoader(), singer.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;节目组找过了，需要演出，谈好费用...&quot;</span>);</span><br><span class="line">                Object invoke = method.invoke(singer, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;结算费用，下一次合作预约...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//此处匿名内部类InvocationHandler也可以使用lambda表达式:</span></span><br><span class="line">        <span class="comment">//        Singer agent = (Singer) Proxy.newProxyInstance(Client.class.getClassLoader(), singer.getClass().getInterfaces(), (proxy, method, args1) -&gt; &#123;</span></span><br><span class="line">        <span class="comment">//            System.out.println(&quot;节目组找过了，需要演出，谈好费用...&quot;);</span></span><br><span class="line">        <span class="comment">//            Object invoke = method.invoke(singer, args1);</span></span><br><span class="line">        <span class="comment">//            System.out.println(&quot;结算费用，下一次合作预约...&quot;);</span></span><br><span class="line">        <span class="comment">//            return invoke;</span></span><br><span class="line">        <span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        agent.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Proxy会利用java发反射机制，自动的为你的项目中创建一个代理类，使用如下语句，生成的动态代理，就会在编译后的文件中显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="keyword">true</span>);<span class="comment">//jdk1.8可以使用</span></span><br><span class="line"><span class="comment">//然而在新版本中使用该方法仍然无法显示，通过查找包中ProxyGenerator类的路径得知，新版本需要如下设置</span></span><br><span class="line">System.getProperties().put(<span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);<span class="comment">//jdk11可以使用</span></span><br></pre></td></tr></table></figure><p>原因在此：</p><div class="tag link"><a class="link-card" title="关于如何获取动态创建的代理的问题" href="https://blog.csdn.net/zyq8514700/article/details/99892329"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">关于如何获取动态创建的代理的问题</p><p class="url">https://blog.csdn.net/zyq8514700/article/details/99892329</p></div></a></div><p>Singer代理产生类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Agent</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;节目组找过了，需要演出，谈好费用...&quot;</span>);</span><br><span class="line">        Object invoke = method.invoke(object, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;结算费用，下一次合作预约...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Singer singer)</span></span>&#123;</span><br><span class="line">        Agent agent = <span class="keyword">new</span> Agent(singer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(Agent.class.getClassLoader(),singer.getClass().getInterfaces(),agent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.getProperties().put(<span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Singer singer = <span class="keyword">new</span> MaleSinger(<span class="string">&quot;Bob.M&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Singer agent = (Singer) Agent.getProxy(singer);</span><br><span class="line"></span><br><span class="line">        agent.sing();</span><br><span class="line"></span><br><span class="line">        Singer singer1 = <span class="keyword">new</span> MaleSinger(<span class="string">&quot;Bob.D&quot;</span>);</span><br><span class="line">        Singer agent1 = (Singer) Agent.getProxy(singer1);</span><br><span class="line">        agent1.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万能代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开资源&quot;</span>);</span><br><span class="line">        System.out.println(method.getName());</span><br><span class="line">        <span class="keyword">if</span>(args != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(args[<span class="number">0</span>].getClass().getSimpleName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭资源&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;<span class="function">T <span class="title">getProxy</span><span class="params">(Class&lt;T&gt; target)</span></span>&#123;</span><br><span class="line">        Agent agent = <span class="keyword">new</span> Agent();</span><br><span class="line">        Object o = Proxy.newProxyInstance(Agent.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;target&#125;, agent);<span class="comment">//new 一个该类型的接口</span></span><br><span class="line">        <span class="keyword">return</span> (T)o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.getProperties().put(<span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Singer proxy = Agent.getProxy(Singer.class);</span><br><span class="line">        proxy.sing();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        IUserDao proxy1 = Agent.getProxy(IUserDao.class);</span><br><span class="line">        proxy1.saveUser(<span class="string">&quot;Ender&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h3><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">&#96;id&#96; INT(20) NOT NULL,</span><br><span class="line">&#96;username&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">&#96;password&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">INSERT into &#96;user&#96;(&#96;id&#96;,&#96;username&#96;,&#96;password&#96;)VALUE (1,&#39;张三&#39;,&#39;123456&#39;),(2,&#39;李四&#39;,&#39;abcdef&#39;),(3,&#39;王五&#39;,&#39;987654&#39;);</span><br></pre></td></tr></table></figure><h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><hr><blockquote><p>此处用到lombok插件，可使用注释的方式在编译时生成构造函数，toString等方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h3><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis 核心--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--防止在java中写的配置文件不被加载到resources文件夹--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis核心配置文件"><a href="#Mybatis核心配置文件" class="headerlink" title="Mybatis核心配置文件"></a>Mybatis核心配置文件</h3><hr><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对xml的约束--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/schema/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事物管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实列对应的xml，在该文件中，可以直接添加sql语句来进行查询</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!--对xml的约束--&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.ender.dao.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectUsers&quot;</span> resultType=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span><br><span class="line">        select id,username,password from user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="DAO层接口"><a href="#DAO层接口" class="headerlink" title="DAO层接口"></a>DAO层接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>此处使用junit中的before和after将数据库的开关分离处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">            session = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用代理调用dao</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><hr><ol><li>在接口中添加方法的声明:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在UserMapper.xml中添加select语句</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select id,username,password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ol><li>resultType：指定了返回值类型</li><li>parameterType：参数类型（具有自动映射自动转化的过程）</li><li>id：指定对应的方法</li><li>#{id}：sql中的变量，要保证大括号中的变量必须在User对象里有</li><li>#{}：占位符，其实就是<code>PreparedStatement</code>处理这个变量</li></ol><h4 id="与-的区别"><a href="#与-的区别" class="headerlink" title="#{}与${}的区别"></a>#{}与${}的区别</h4><hr><ul><li>#{}的主要作用就是替换预编译语句{<code>PreparedStatement</code>}中的占位符<kbd>, ?</kbd>[推荐使用]</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">INSERT INTO <span class="title">user</span> <span class="params">(name)</span> <span class="title">VALUE</span> <span class="params">(#&#123;name&#125;)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">user</span> <span class="params">(name)</span> <span class="title">VALUE</span> <span class="params">(?)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>${}的作用是直接进行字符串替换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">INSERT INTO <span class="title">user</span> <span class="params">(name)</span> <span class="title">VALUE</span> <span class="params">(<span class="string">&#x27;$&#123;name&#125;&#x27;</span>)</span></span>;</span><br><span class="line"><span class="function">INSERT INTO <span class="title">user</span> <span class="params">(name)</span> <span class="title">VALUE</span> <span class="params">(<span class="string">&#x27;赵六&#x27;</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user (username,password) value (#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125; , password = #&#123;password&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除一个用户记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作注释"><a href="#操作注释" class="headerlink" title="操作注释"></a>操作注释</h2><p>通常不推荐使用注释的方法，因为要保证代码遵循开闭原则，如果使用注释操作，今后修改时就需要修改源代码，违反了开闭原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAdmin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">            session = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAdmins</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用代理调用dao</span></span><br><span class="line">        AdminMapper mapper = session.getMapper(AdminMapper.class);</span><br><span class="line">        List&lt;Admin&gt; admins = mapper.selectAdmins();</span><br><span class="line">        <span class="keyword">for</span> (Admin admin : admins) &#123;</span><br><span class="line">            System.out.println(admin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAdminsById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AdminMapper mapper = session.getMapper(AdminMapper.class);</span><br><span class="line">        Admin admin = mapper.selectAdminById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(admin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AdminMapper mapper = session.getMapper(AdminMapper.class);</span><br><span class="line">        Admin admin = <span class="keyword">new</span> Admin(<span class="number">4</span>, <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> rows = mapper.saveAdmin(admin);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AdminMapper mapper = session.getMapper(AdminMapper.class);</span><br><span class="line">        Admin admin = <span class="keyword">new</span> Admin(<span class="number">4</span>, <span class="string">&quot;赵六2&quot;</span>, <span class="string">&quot;dsjioa123&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> rows = mapper.updateAdmin(admin);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AdminMapper mapper = session.getMapper(AdminMapper.class);</span><br><span class="line">        <span class="keyword">int</span> rows = mapper.deleteAdmin(<span class="number">4</span>);</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册时需要选择类进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.ender.dao.AdminMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模糊查找"><a href="#模糊查找" class="headerlink" title="模糊查找"></a>模糊查找</h2><h3 id="Java代码中拼接字符串"><a href="#Java代码中拼接字符串" class="headerlink" title="Java代码中拼接字符串"></a>Java代码中拼接字符串</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string name = <span class="string">&quot;%IT%&quot;</span>;</span><br><span class="line"><span class="comment">//对于带有索引的字段，建议使用如下形式</span></span><br><span class="line"><span class="comment">//string name = &quot;IT%&quot;;</span></span><br><span class="line">list&lt;name&gt; names = mapper.getUserByName(name);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">&quot;getUserByName&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在配置文件中拼接"><a href="#在配置文件中拼接" class="headerlink" title="在配置文件中拼接"></a>在配置文件中拼接</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string name = <span class="string">&quot;IT&quot;</span>;</span><br><span class="line">list&lt;name&gt; names = mapper.getUserByName(name);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此处必须用双引号--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h2><p>map可以代替任何的实体类，所以当我们数据比较复杂时，可以适当考虑使用map来完成相关工作</p><ol><li>配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByParams&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span> &gt;</span></span><br><span class="line">    select id,username,password from user where username = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据一些参数查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsersByParams</span><span class="params">(Map&lt;String,String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByParams</span><span class="params">()</span></span>&#123;</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;郑七&quot;</span>);</span><br><span class="line">    Lisr&lt;User&gt; users = mapper.getUsersByparams(map);</span><br><span class="line">    <span class="keyword">for</span>(User user: users)&#123;</span><br><span class="line">        System.out.println(user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h2><p>对于单个参数的方法来说，mybatis将自动将参数对应到sql语句中，但若参数包含多个，可以使用如下方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过字符串添加记录</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">saveAdmin</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">insert into admin (username,password) values (#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用多参数时，需要使用注释表明对应关系，其次还可以使用一个map传参，mybatis将通过key、value来处理关系</p><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a><a name="Alias">别名</a></h2><h3 id="内置别名"><a href="#内置别名" class="headerlink" title="内置别名"></a>内置别名</h3><hr><p>mybatis内置别名：</p><table><thead><tr><th>Alias</th><th>Mapped Type</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Obkect</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><h3 id="自定义别名"><a href="#自定义别名" class="headerlink" title="自定义别名"></a>自定义别名</h3><hr><p>在核心配置文件中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.ender.entity.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;typeAliases&gt;</code>标签需要在<code>&lt;enviroment&gt;</code>之前，基本顺序为：<code>&lt;properties&gt;</code>、<code>&lt;settings&gt;</code>、<code>typeAlias</code>、<code>typeHandlers</code>、、、、<code>&lt;environment&gt;</code></p><p><code>&lt;typeAlias&gt;</code>标签中有<code>type</code>和<code>alice</code>两个属性    </p><p><code>type</code>填写实体类的全类名，<code>alias</code>可以不填，不填默认为类名，不区分大小写，<code>alias</code>有值时以其中的值为准</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.ender.entity&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;package&gt;</code>标签为某个包下所有类起别名；<code>name</code>属性填写包名。包名默认是类名，不区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Alias() 注解 加在实体类上，为某个类起别名：例如&#96;@Alias(&quot;User&quot;)&#96;</span><br></pre></td></tr></table></figure><h2 id="mybatis配置文件"><a href="#mybatis配置文件" class="headerlink" title="mybatis配置文件"></a>mybatis配置文件</h2><p>mybatis的配置文件分为：</p><ol><li>核心配置文件</li><li>mapper配置文件</li></ol><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><hr><ul><li>mybatis-config.xml系统核心配置文件</li><li>核心配置文件主要配置mybatis一些基础组件和加载资源，核心配置文件中的元素常常能影响mybatis的整个运行过程</li><li>能配置的内容如下，顺序不能乱：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. properties是一个配置属性的元素</span><br><span class="line">2. settings设置，mybatis最为复杂的配置也是最重要的，会改变mybatis运行时候的行为</span><br><span class="line">3. typeAliases别名（在Type AliasRegistry中可以看到mybatis提供了许多的系统别名）</span><br><span class="line">4. typeHandlers 类型处理器（比如在预处理语句中设置一个参数或者从结果集中获取一个参数的时候，都会用到类型处理器，在TypeHandlerRegistry中定义了很多的类型处理器）</span><br><span class="line">5. objectFactory 对象工厂 （mybatis在构建一个和结构或返回的时候，会使用一个objectFactory去构建pojo）</span><br><span class="line">6. plugins 插件</span><br><span class="line">7. environments 环境变量</span><br><span class="line">1. environment 环境变量</span><br><span class="line">1. transactionManager 事务管理器</span><br><span class="line">2. dataSource 数据源</span><br><span class="line">3. databaseIdProvider 数据库厂商标识</span><br><span class="line">8. mappers 映射器</span><br></pre></td></tr></table></figure><h3 id="environments元素"><a href="#environments元素" class="headerlink" title="environments元素"></a>environments元素</h3><hr><p>为mybatis配置多环境运行，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定），如果想切换环境修改default的值即可</p><p>最常见的就是，生产环境和开发环境，两个环境切换必将导致数据库的切换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事物管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事物管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>dataSource 元素使用标准的JDBC数据源接口来配置JDBC连接对象的资源</p></li><li><p>数据源是必须配置的</p></li><li><p>有三种内建的数据源类型</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type&#x3D;&quot;[UNPOOKED|POOKED|JNDI]&quot;</span><br><span class="line">- unpooked:这个数据源的实现只是每次被请求时打开和关闭连接</span><br><span class="line">- pooled:这种数据源的实现利用“池”的概念将JDBC连接对象组织起来，这是一种使得并发Web应用快速响应请求的流行处理方法</span><br><span class="line">- jndi:这个数据源实现时为了能在如spring或应用服务器中使用，容器可以集中或在外部配hi数据源，然后放置一个JNDI上下文引用</span><br></pre></td></tr></table></figure><ul><li><p>数据源也有很多第三方的实现，比如druid，dbcp，c3p0等等…</p></li><li><p>这两种事物管理器类型都不需要设置任何属性</p></li><li><p>具体的一套环境，通过设置id进行区别，id保证唯一</p></li><li><p>子元素节点：transactionManager - [事物管理器]</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;[JDBC | MANAGED]&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子元素节点：数据源（dataSource）</li></ul><h3 id="mappers元素"><a href="#mappers元素" class="headerlink" title="mappers元素"></a>mappers元素</h3><hr><p>对写好的mapper和xml进行统一管理</p><p>引入方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/ender/dao/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 面向注解时使用全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.ender.dao.AdminMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--等等其他方式--&gt;</span></span><br></pre></td></tr></table></figure><p>Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xinzhi.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>namespace：命名空间</li><li>namespace的命名必须跟某个接口同名</li></ul><h3 id="Properties元素"><a href="#Properties元素" class="headerlink" title="Properties元素"></a>Properties元素</h3><hr><p>数据库连接信息我们最好放在一个单独的文件中。 </p><ul><li>在资源目录下新建一个db.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?</span></span><br><span class="line"><span class="attr">useSSL</span>=<span class="string">true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><ul><li>导入properties配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设定别名"><a href="#设定别名" class="headerlink" title="设定别名"></a>设定别名</h3><hr><p>详见<a href="#Alias">别名</a></p><h3 id="其他配置浏览"><a href="#其他配置浏览" class="headerlink" title="其他配置浏览"></a>其他配置浏览</h3><hr><p>settings能对我的一些核心功能进行配置，如懒加载、日志实现、缓存开启关闭等</p><p>简单参数说明：</p><details ><summary> 点击查看 </summary>              <div class='content'>              <table><thead><tr><th>设置参数</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>该配置影响的所有映射 器中配置的缓存的全局 开关。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。 当开启时，所有关联对 象都会延迟加载。特定 关联关系中可通过设置 fetchType属性来覆盖该 项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。 不同的驱动在这方面会 有不同的表现，具体可 参考相关驱动文档或通 过测试这两种不同的模 式来观察所用驱动的结 果。</td><td>true | false</td><td>true</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生 成主键，需要驱动兼 容。如果设置为 true 则 这个设置强制使用自动 生成主键，尽管一些驱 动不能兼容但仍可正常 工作（比如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>defaultStatementTimeout</td><td>设置超时时间，它决定 驱动等待数据库响应的 秒数。</td><td>Any positive integer Not S</td><td>Not Set (null)</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启自动驼峰命名 规则（camel case）映 射，即从经典数据库列 名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。</td><td>true | false</td><td>False</td></tr><tr><td>logPrefix</td><td>指定 MyBatis 增加到日 志名称的前缀。</td><td>Any String</td><td>Not set</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志 的具体实现，未指定时 将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>Not set</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr><p>MyBatis提供了对SQL语句动态的组装能力，大量的判断都可以在 MyBatis的映射XML文件里面配置，以达到许多我们需要大量代码才能实现的功能，大大减少了我们编写代码的工作量。 动态SQL的元素</p><p>动态SQL中的元素</p><table><thead><tr><th>元素</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>if</td><td>判断语句</td><td>但条件分支判断</td></tr><tr><td>choose、when、otherwise</td><td>相当于java中的case when语句</td><td>多条件分支判断</td></tr><tr><td>trim、where、set</td><td>辅助元素</td><td>用于处理一些SQL拼装问题</td></tr><tr><td>foreach</td><td>循环语句</td><td>在in语句等列举调价常用</td></tr></tbody></table><h3 id="if元素（常用）"><a href="#if元素（常用）" class="headerlink" title="if元素（常用）"></a>if元素（常用）</h3><hr><p>if元素相当于Java中的if语句，它常常与test属性联合使用。现在我们要根据username去查询用户，但是username是可选的，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select id,username,password from user</span><br><span class="line">    where 1 =1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null and id != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        AND id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        AND username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        AND password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="choose、when、otherwise元素"><a href="#choose、when、otherwise元素" class="headerlink" title="choose、when、otherwise元素"></a>choose、when、otherwise元素</h3><hr><p>有些时候我们还需要多种条件的选择，在Java中我们可以使用switch、case、default语句，而在映射器 的动态语句中可以使用choose、when、otherwise元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有name的时候使用name搜索，没有的时候使用id搜索 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    WHERE 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND username LIKE concat(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            AND id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="where元素"><a href="#where元素" class="headerlink" title="where元素"></a>where元素</h3><hr><p>上面的select语句我们加了一个 1=1 的绝对true的语句，目的是为了防止语句错误，变成 SELECT * FROM student WHERE 这样where后没有内容的错误语句。这样会有点奇怪，此时可以使用where元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xinzhi.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select id,username,password from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null and id != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="trim元素"><a href="#trim元素" class="headerlink" title="trim元素"></a>trim元素</h3><hr><p>有时候我们要去掉一些特殊的SQL语法，比如常见的and、or，此时可以使用trim元素。trim元素意味着 我们需要去掉一些特殊的字符串，prefix代表的是语句的前缀，而prefixOverrides代表的是你需要去掉 的那种字符串，suffix表示语句的后缀，suffixOverrides代表去掉的后缀字符串。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user</span><br><span class="line">    (</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            username,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            password,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    )value(</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            #&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            #&#123;password&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set元素"><a href="#set元素" class="headerlink" title="set元素"></a>set元素</h3><hr><p>在update语句中，如果我们只想更新某几个字段的值，这个时候可以使用set元素配合if元素来完成。注 意：set元素遇到,会自动把,去掉。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span> = <span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null and password != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="foreach元素"><a href="#foreach元素" class="headerlink" title="foreach元素"></a>foreach元素</h3><hr><p>foreach元素是一个循环语句，它的作用是遍历集合，可以支持数组、List、Set接口。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xinzhi.entity.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    WHERE id IN</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>collection配置的是传递进来的参数名称 </li><li>item配置的是循环中当前的元素。 </li><li>index配置的是当前元素在集合的位置下标。 </li><li>open和 close配置的是以什么符号将这些集合元素包装起来。 </li><li>separator是各个元素的间隔符。</li></ul><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><hr><p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽 取出来，然后使用时直接调用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;user-all-content&quot;</span>&gt;</span></span><br><span class="line">    select id,username,password from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;user-all-content&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果映射resultMap"><a href="#结果映射resultMap" class="headerlink" title="结果映射resultMap"></a>结果映射resultMap</h2><p>数据库不可能永远是你所想或所需的那个样子 </p><p>属性名和字段名不一致，我们一般都会按照约定去设计数据的，但确实阻止不了沟通不充分等问题</p><ol><li>java中实体类的设计</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//姓名，数据库为username</span></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">//密码，一致</span></span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="comment">//set/get</span></span><br><span class="line">    <span class="comment">//toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>mapper类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>mapper映射文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><hr><ul><li>User{id=1,name=’null’,password=’123’}</li><li>查询出来发现name为空</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><hr><ul><li>select * from user where id = #{id} 可以看做 select id,username,password from user where id = #{id}</li><li>mybatis会根据这些查询的列名(会将列名转化为小写,数据库不区分大小写) , 利用反射去对应的实体类中查找相应列名的set方法设值 ，当然找不到username<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3></li></ul><hr><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><hr><p>为列名指定别名，别名和java实体类的属性名一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id , username as name ,password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><hr><p>使用结果集映射$\to$ResultMap(推荐)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id表示表中的主键，需要独立设置，result表示其他字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select id , username , password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用映射"><a href="#常用映射" class="headerlink" title="常用映射"></a>常用映射</h3><hr><p>通常在数据库中我们会使用下划线的命名方式，而java中通常使用驼峰命名法，mybatis为我们提供了两者的自动转化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启驼峰命名规则--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>配置日志的一个重要原因是想在调试的时候能观察到sql语句的输出，能查看中间过程</p><h3 id="标准日志实现"><a href="#标准日志实现" class="headerlink" title="标准日志实现"></a>标准日志实现</h3><hr><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。 </p><p>STD：standard out：输出 </p><p>STDOUT_LOGGING：标准输出日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组合log4j完成日志功能"><a href="#组合log4j完成日志功能" class="headerlink" title="组合log4j完成日志功能"></a>组合log4j完成日志功能</h3><hr><ol><li>导入log4j</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件编写log4j.properties</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代</span></span><br><span class="line"><span class="attr">码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/xinzhi.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><ol start="3"><li>setting设置日志实现</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在程序中使用Log4j进行输出</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><hr><ul><li>部门和员工的关系为：一个部门多个员工，一个员工属于一个部门</li><li>依次我们可以实际一个一对多的数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;dept&#96; (</span><br><span class="line">&#96;id&#96; INT(10) NOT NULL,</span><br><span class="line">&#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line">INSERT INTO dept VALUES (1, &#39;ender开发六部&#39;);</span><br><span class="line">CREATE TABLE &#96;employee&#96; (</span><br><span class="line">&#96;id&#96; INT(10) NOT NULL,</span><br><span class="line">&#96;name&#96; VARCHAR(30) DEFAULT NULL,</span><br><span class="line">&#96;did&#96; INT(10) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">CONSTRAINT &#96;fk_did&#96; FOREIGN KEY (&#96;did&#96;) REFERENCES &#96;dept&#96; (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line">INSERT INTO employee VALUES (1, &#39;小兰&#39;, 1);</span><br><span class="line">INSERT INTO employee VALUES (2, &#39;小红&#39;, 1);</span><br><span class="line">INSERT INTO employee VALUES (3, &#39;小白&#39;, 1);</span><br><span class="line">INSERT INTO employee VALUES (4, &#39;小黑&#39;, 1);</span><br><span class="line">INSERT INTO employee VALUES (5, &#39;小黄&#39;, 1);</span><br></pre></td></tr></table></figure><h3 id="在多的一方维护关系"><a href="#在多的一方维护关系" class="headerlink" title="在多的一方维护关系"></a>在多的一方维护关系</h3><hr><h4 id="方法一：结果集嵌套"><a href="#方法一：结果集嵌套" class="headerlink" title="方法一：结果集嵌套"></a>方法一：结果集嵌套</h4><hr><h5 id="编写实体类-1"><a href="#编写实体类-1" class="headerlink" title="编写实体类"></a>编写实体类</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外键Dept，维护关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写实体类对应的Mapper接口"><a href="#编写实体类对应的Mapper接口" class="headerlink" title="编写实体类对应的Mapper接口"></a>编写实体类对应的Mapper接口</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写mapper-xml"><a href="#编写mapper-xml" class="headerlink" title="编写mapper.xml"></a>编写mapper.xml</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写方法"><a href="#编写方法" class="headerlink" title="编写方法"></a>编写方法</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按id获取指定员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> employee</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Employee <span class="title">findEmployeesById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="mapper处理"><a href="#mapper处理" class="headerlink" title="mapper处理"></a>mapper处理</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmployeeDept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.ender.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--起别名后需要设置映射关系--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定包含类的映射关系--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.ender.entity.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findEmployeesById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmployeeDept&quot;</span>&gt;</span></span><br><span class="line">        SELECT e.id eid, e.name ename,d.id did,d.name dname</span><br><span class="line">        FROM employee e</span><br><span class="line">        LEFT JOIN dept d</span><br><span class="line">        on e.did = d.id where e.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注册Mapper"><a href="#注册Mapper" class="headerlink" title="注册Mapper"></a>注册Mapper</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/DeptMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/employeeMapper.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindEmployessById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);</span><br><span class="line">    Employee employee = mapper.findEmployeesById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：查询嵌套"><a href="#方法二：查询嵌套" class="headerlink" title="方法二：查询嵌套"></a>方法二：查询嵌套</h4><hr><h5 id="编写mapper-xml-1"><a href="#编写mapper-xml-1" class="headerlink" title="编写mapper.xml"></a>编写mapper.xml</h5><hr><p>employeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;EmployeeDept&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.ender.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用select标签将第二步的查询委托给另外的mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.ender.entity.Dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.ender.mapper.DeptMapper.findDeptById&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findEmployeesById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;EmployeeDept&quot;</span>&gt;</span></span><br><span class="line">        SELECT id,name,did FROM employee WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>deptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名后记得定义映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.ender.entity.Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findDeptById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptResult&quot;</span>&gt;</span></span><br><span class="line">        SELECT id did,name FROM dept WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在一的一方维护关系"><a href="#在一的一方维护关系" class="headerlink" title="在一的一方维护关系"></a>在一的一方维护关系</h3><hr><p>即查找所有部门时，将该部门下的所有员工一并查找出来</p><h4 id="方法一：结果集嵌套-1"><a href="#方法一：结果集嵌套-1" class="headerlink" title="方法一：结果集嵌套"></a>方法一：结果集嵌套</h4><hr><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该部门下的所有员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Employee&gt; employees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ender-PC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有部门信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> deptList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">findDepts</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mapper配置"><a href="#Mapper配置" class="headerlink" title="Mapper配置"></a>Mapper配置</h5><hr><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptEmployees&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一对多时使用collection标签，在映射数组类型时，需要使用ofType属性来指定类型，告知mybatis该List中的元素属于类，而JavaType用于告诉mybatis，映射参数的类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employees&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findDepts&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptEmployees&quot;</span>&gt;</span></span><br><span class="line">        SELECT d.id did,d.name dname,e.id eid,e.name ename</span><br><span class="line">        FROM dept d</span><br><span class="line">        LEFT JOIN employee e on d.id = e.did</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法二：查询嵌套-1"><a href="#方法二：查询嵌套-1" class="headerlink" title="方法二：查询嵌套"></a>方法二：查询嵌套</h4><hr><h5 id="Mapper配置-1"><a href="#Mapper配置-1" class="headerlink" title="Mapper配置"></a>Mapper配置</h5><hr><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    查询嵌套--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dept&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--代理给Employee下的查询语句查询--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employees&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.ender.mapper.EmployeeMapper.findEmployeesByDid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findDepts&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpResult&quot;</span>&gt;</span></span><br><span class="line">        SELECT id,name FROM dept</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ender.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findEmployeesByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">        SELECT id,name,did FROM employee WHERE did = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><h3 id="为什么需要缓存"><a href="#为什么需要缓存" class="headerlink" title="为什么需要缓存"></a>为什么需要缓存</h3><hr><ul><li>如果缓存中有数据，就不用从数据库获取，大大提高系统性能</li><li>mybatis提供一级缓存和二级缓存</li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><hr><p>一级缓存是sqlsession级别的缓存</p><ul><li>操作数据库时，需要构造sqlsession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据</li><li>不同的sqlsession之间的缓存区域时互不影响的</li></ul><h4 id="一级缓存工作原理"><a href="#一级缓存工作原理" class="headerlink" title="一级缓存工作原理"></a>一级缓存工作原理</h4><hr><p><img src="F:\Enderblog\source\img\一级缓存工作原理.png" class="lazyload placeholder" data-srcset="F:\Enderblog\source\img\一级缓存工作原理.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image-20210207163050284"></p><ul><li>第一次发起查询sql查询用户id为1的用户，先去找缓存中是否有id为1的用户，如果没有，再去数据库查询用户信息。得到用户信息，将用户信息存储到一级缓存中。 </li><li>如果sqlsession执行了commit操作（插入，更新，删除），会清空sqlsession中的一级缓存，避免脏读 </li><li>第二次发起查询id为1的用户，缓存中如果找到了，直接从缓存中获取用户信息 mybatis默认支持并开启一级缓存。</li></ul><p>可以通过mybatis写入日志时是否调用了MySQL语句来判断缓存是否被调用</p><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><hr><h5 id="编写接口方法"><a href="#编写接口方法" class="headerlink" title="编写接口方法"></a>编写接口方法</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function">User <span class="title">findUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="Mapper配置-2"><a href="#Mapper配置-2" class="headerlink" title="Mapper配置"></a>Mapper配置</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.ender.entity.User&quot;</span>&gt;</span></span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">User user1 = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line">User user2 = mapper.findUserById(<span class="number">3</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">User user3 = mapper.findUserById(<span class="number">1</span>);</span><br><span class="line">System.out.println(user3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[com.xinzhi.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Preparing: select</span><br><span class="line">id,username,password from user where id &#x3D; ?</span><br><span class="line">[com.xinzhi.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">[com.xinzhi.dao.UserMapper.findUserById]-&lt;&#x3D;&#x3D; Total: 1</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;楠哥&#39;, password&#x3D;&#39;123456&#39;&#125; ----&gt;ID为1，第一次有sql</span><br><span class="line">[com.xinzhi.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Preparing: select</span><br><span class="line">id,username,password from user where id &#x3D; ?</span><br><span class="line">[com.xinzhi.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Parameters: 3(Integer)</span><br><span class="line">[com.xinzhi.dao.UserMapper.findUserById]-&lt;&#x3D;&#x3D; Total: 1</span><br><span class="line">User&#123;id&#x3D;3, username&#x3D;&#39;磊哥&#39;, password&#x3D;&#39;987654&#39;&#125; ----&gt;ID为3，第一次有sql</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;楠哥&#39;, password&#x3D;&#39;123456&#39;&#125; ----&gt;ID为1，第二次无sql，</span><br><span class="line">走缓存</span><br></pre></td></tr></table></figure><h5 id="一级缓存失效"><a href="#一级缓存失效" class="headerlink" title="一级缓存失效"></a>一级缓存失效</h5><hr><ol><li>sqlSession不同 </li><li>当sqlSession对象相同的时候，查询的条件不同，原因是第一次查询时候一级缓存中没有第二次查询所需要的数据 </li><li>当sqlSession对象相同,两次查询之间进行了插入的操作</li><li>当sqlSession对象相同,手动清除了一级缓存中的数据</li></ol><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><hr><p>二级缓存时mapper级别的缓存，默认关闭</p><ul><li>多个SQL session去操作同一个mapper的sql语句，多个sqlsession可以共用二级缓存，所得到的数据会存在二级缓存区域</li><li>二级缓存时跨sqlsession的</li><li>二级缓存相比一级缓存的范围更大（按namespace划分），多个sqlsession可以共享一个二级缓存</li></ul><p><img src="F:\Enderblog\source\img\二级缓存工作原理1.png" class="lazyload placeholder" data-srcset="F:\Enderblog\source\img\二级缓存工作原理1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image-20210208131638840"></p><p><img src="F:\Enderblog\source\img\二级缓存工作原理2.png" class="lazyload placeholder" data-srcset="F:\Enderblog\source\img\二级缓存工作原理2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image-20210208131728065"></p><h4 id="打开二级缓存"><a href="#打开二级缓存" class="headerlink" title="打开二级缓存"></a>打开二级缓存</h4><hr><p>首先要手动开启mybatis二级缓存。 在config.xml设置二级缓存开关 ， 还要在具体的mapper.xml开启二级缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 需要将映射的javabean类实现序列化 --&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启本Mapper的namespace下的二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;100000&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="cache属性的简介"><a href="#cache属性的简介" class="headerlink" title="cache属性的简介"></a>cache属性的简介</h4><hr><h5 id="eviction"><a href="#eviction" class="headerlink" title="eviction"></a>eviction</h5><hr><p>回收策略（缓存满了的淘汰机制），目前MyBatis提供以下策略。</p><ol><li><p>LRU（Least Recently Used）,最近最少使用的，最长时间不用的对象 </p></li><li><p>FIFO（First In First Out）,先进先出，按对象进入缓存的顺序来移除他们 </p></li><li><p>SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象 </p></li><li><p>WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU， 移除最长时间不用的对形象 </p></li></ol><h5 id="flushInterval"><a href="#flushInterval" class="headerlink" title="flushInterval"></a>flushInterval</h5><hr><p>刷新间隔时间，单位为毫秒</p><ol><li>这里配置的是100秒刷新，如果你不配置它，那么当SQL被执行的时候才会去刷新缓存。 </li></ol><h5 id="size"><a href="#size" class="headerlink" title="size"></a>size</h5><hr><p>引用数目</p><ol><li>一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。 这里配置的是1024个对象 </li></ol><h5 id="readOnly"><a href="#readOnly" class="headerlink" title="readOnly"></a>readOnly</h5><hr><p>只读</p><ol><li>意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有办法修改缓存，他的默认值是false，不允许我们修改</li></ol><h4 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h4><hr><p>sqlsession1查询用户id为1的信息，查询到之后，会将查询数据存储到二级缓存中。 </p><p>如果sqlsession3去执行相同mapper下sql，执行commit提交，会清空该mapper下的二级缓存区域的数据 </p><p>sqlsession2查询用户id为1的信息，去缓存找是否存在缓存，如果存在直接从缓存中取数据</p><h5 id="禁用二级缓存"><a href="#禁用二级缓存" class="headerlink" title="禁用二级缓存"></a>禁用二级缓存</h5><hr><p>在statement中可以设置useCache=false，禁用当前select语句的二级缓存，默认情况为true</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际开发中，针对每次查询都需要最新的数据sql，要设置为useCache=”false” ，禁用二级缓存</p><h5 id="flushCache标签"><a href="#flushCache标签" class="headerlink" title="flushCache标签"></a>flushCache标签</h5><hr><p>刷新缓存（清空缓存）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般下执行完commit操作都需要刷新缓存，flushCache=”true 表示刷新缓存，可以避免脏读</p><blockquote><p>脏读：当数据保存在缓存中时，使用修改操作将数据库中的数据修改，此时，缓存中的数据和数据库中的不一样，于是下次读操作若从缓存中读取，则会出现读到的数据不是正确的数据的情况</p></blockquote><h5 id="二级缓存应用场景"><a href="#二级缓存应用场景" class="headerlink" title="二级缓存应用场景"></a>二级缓存应用场景</h5><hr><p>对于访问多的查询请求并且用户对查询结果实时性要求不高的情况下，可采用mybatis二级缓存，降低 数据库访问量，提高访问速度，如电话账单查询 根据需求设置相应的flushInterval:刷新间隔时间，比如三十分钟，24小时等。</p><h5 id="二级缓存局限性"><a href="#二级缓存局限性" class="headerlink" title="二级缓存局限性"></a>二级缓存局限性</h5><hr><p>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求:对商品信息进行缓存，由于商品 信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就 无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，因为mybaits的二级缓 存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空。解决此类 问题需要在业务层根据需求对数据有针对性缓存。</p><h5 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//使用不同的mapper</span></span><br><span class="line">    UserMapper mapper1 = session.getMapper(UserMapper.class);</span><br><span class="line">    User user1 = mapper1.findUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    <span class="comment">//提交了就会刷到二级缓存，要不还在一级缓存，一定要注意</span></span><br><span class="line">    session.commit();</span><br><span class="line">    UserMapper mapper2 = session.getMapper(UserMapper.class);</span><br><span class="line">    User user2 = mapper2.findUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Preparing: select</span><br><span class="line">id,username,password from user where id &#x3D; ?</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&lt;&#x3D;&#x3D; Total: 1</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;ender&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Preparing: select</span><br><span class="line">id,username,password from user where id &#x3D; ?</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&lt;&#x3D;&#x3D; Total: 1</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;ender&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">false ----&gt;两个对象不是一个，发了两个sql，说明缓存没有起作用</span><br></pre></td></tr></table></figure><p>可以看见两次同样的sql，却都进库进行了查询。说明二级缓存没开。</p><h5 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启本Mapper的namespace下的二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;100000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">创建了一个 LRU 最少使用清除缓存，每隔 100 秒刷新，最多可以存储 512 个对象，返回的对象是只</span></span><br><span class="line"><span class="comment">读的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h5><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Preparing: select</span><br><span class="line">id,username,password from user where id &#x3D; ?</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&lt;&#x3D;&#x3D; Total: 1</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;ender&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">[com.ender.dao.UserMapper]-Cache Hit Ratio [com.ender.dao.UserMapper]: 0.5</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;ender&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">true ----&gt;两个对象一样了，就发了一个sql，说明缓存起了作用</span><br></pre></td></tr></table></figure><h3 id="第三方缓存——EhCache充当三级缓存"><a href="#第三方缓存——EhCache充当三级缓存" class="headerlink" title="第三方缓存——EhCache充当三级缓存"></a>第三方缓存——EhCache充当三级缓存</h3><hr><p>我们的三方缓存组件很对，最常用的比如ehcache，Memcached、redis等，我们以比较简单的 ehcache为例。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h4><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">&quot;com.ender.entity.User&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span> <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">flushInterval</span>=<span class="string">&quot;10000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;1024&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ehcache配置"><a href="#ehcache配置" class="headerlink" title="ehcache配置"></a>ehcache配置</h4><hr><p>添加ehcache.xml文件，ehcache配置文件，具体配置自行百度</p><details yellow><summary> 点击查看配置文件 </summary>              <div class='content'>              <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数</span></span><br><span class="line"><span class="comment">解释如下：</span></span><br><span class="line"><span class="comment">user.home – 用户主目录</span></span><br><span class="line"><span class="comment">user.dir – 用户当前工作目录</span></span><br><span class="line"><span class="comment">java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line">    &lt;defaultCache</span><br><span class="line">                  eternal=&quot;false&quot;</span><br><span class="line">                  maxElementsInMemory=&quot;10000&quot;</span><br><span class="line">                  overflowToDisk=&quot;false&quot;</span><br><span class="line">                  diskPersistent=&quot;false&quot;</span><br><span class="line">                  timeToIdleSeconds=&quot;1800&quot;</span><br><span class="line">                  timeToLiveSeconds=&quot;259200&quot;</span><br><span class="line">                  memoryStoreEvictionPolicy=&quot;LRU&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">name:缓存名称。</span></span><br><span class="line"><span class="comment">maxElementsInMemory：缓存最大个数。</span></span><br><span class="line"><span class="comment">eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当</span></span><br><span class="line"><span class="comment">eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时</span></span><br><span class="line"><span class="comment">间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间</span></span><br><span class="line"><span class="comment">无穷大。</span></span><br><span class="line"><span class="comment">overflowToDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象</span></span><br><span class="line"><span class="comment">写到磁盘中。</span></span><br><span class="line"><span class="comment">diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是</span></span><br><span class="line"><span class="comment">30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">diskPersistent：是否在磁盘上持久化。指重启jvm后，数据是否有效。默认为false。</span></span><br><span class="line"><span class="comment">memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根</span></span><br><span class="line"><span class="comment">据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是</span></span><br><span class="line"><span class="comment">LFU（较少使用）。</span></span><br><span class="line"><span class="comment">clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h4 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Preparing: select</span><br><span class="line">id,username,password from user where id &#x3D; ?</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">[com.ender.dao.UserMapper.findUserById]-&lt;&#x3D;&#x3D; Total: 1</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;ender&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">[com.ender.dao.UserMapper]-Cache Hit Ratio [com.ender.dao.UserMapper]: 0.5</span><br><span class="line">User&#123;id&#x3D;1, username&#x3D;&#39;ender&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>其实我们更加常见的是使用第三方的缓存进行存储，并且自由控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CacheManager cacheManager = <span class="keyword">new</span></span><br><span class="line">CacheManager(<span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;ehcache.x</span></span><br><span class="line"><span class="string">ml&quot;</span>));</span><br><span class="line"><span class="comment">// create the cache called &quot;hello-world&quot;</span></span><br><span class="line">String[] cacheNames = cacheManager.getCacheNames();</span><br><span class="line"><span class="keyword">for</span> (String cacheName : cacheNames) &#123;</span><br><span class="line">    System.out.println(cacheName);</span><br><span class="line">&#125;</span><br><span class="line">Cache userDao = cacheManager.getCache(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">Element element = <span class="keyword">new</span> Element(<span class="string">&quot;testFindUserById_1&quot;</span>,<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;d&quot;</span>));</span><br><span class="line">userDao.put(element);</span><br><span class="line">Element element1 = userDao.get(<span class="string">&quot;testFindUserById_1&quot;</span>);</span><br><span class="line">User user = (User)element1.getObjectValue();</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure><h2 id="参考笔记"><a href="#参考笔记" class="headerlink" title="参考笔记"></a>参考笔记</h2><div class="tag link"><a class="link-card" title="IT楠老师" href="https://www.itnanls.cn/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">IT楠老师</p><p class="url">https://www.itnanls.cn/</p></div></a></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;java工具——持久层工具mybatis&lt;/p&gt;</summary>
    
    
    
    <category term="ssm" scheme="http://enderxiao.top/categories/ssm/"/>
    
    <category term="mybatis" scheme="http://enderxiao.top/categories/ssm/mybatis/"/>
    
    
    <category term="Spring" scheme="http://enderxiao.top/tags/Spring/"/>
    
    <category term="Java" scheme="http://enderxiao.top/tags/Java/"/>
    
    <category term="mybatis" scheme="http://enderxiao.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>javaMaven</title>
    <link href="http://enderxiao.top/Java/Maven/javamaven/"/>
    <id>http://enderxiao.top/Java/Maven/javamaven/</id>
    <published>2021-01-31T07:56:12.000Z</published>
    <updated>2021-08-05T23:40:03.687Z</updated>
    
    <content type="html"><![CDATA[<p>java工具——包管理工具Maven</p><a id="more"></a><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>统一管理jar包，自动导入jar及其以来依赖</li><li>项目移植之后甚至不需要安装并发工具，只需要maven加命令就能跑，降低学习成本</li><li>使得项目流水线成为可能，因为使用简单的命令我们就能完成项目的编译，打包，发布等工作，就让程序操作程序成为了可能，大名鼎鼎的jekins也能做到这一点</li></ol><h3 id="Maven下载安装"><a href="#Maven下载安装" class="headerlink" title="Maven下载安装"></a>Maven下载安装</h3><hr><div class="note download"><p><a href="http://maven.apache.org/">Maven官网</a></p></div><p>下载binary文件</p><h4 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h4><hr><ol><li>解压</li><li>配置MAVEN_HOME，为maven的解压</li><li>配置path，%MAVEN_HOME%\bin</li><li>使用如下命令验证是否配置成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h4 id="Maven核心全局配置文件"><a href="#Maven核心全局配置文件" class="headerlink" title="Maven核心全局配置文件"></a>Maven核心全局配置文件</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\apache-maven-<span class="number">3.6</span><span class="number">.3</span>\conf\settings.xml</span><br></pre></td></tr></table></figure><h5 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h5><hr><p>选择一个位置新建文件夹repository，setting.xml中添加如下标记</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\program\Maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h5><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置全局编译jdk版本"><a href="#配置全局编译jdk版本" class="headerlink" title="配置全局编译jdk版本"></a>配置全局编译jdk版本</h5><hr><p>当计算机中有多个版本的jdk时，以下配置是必须的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-11.0.9<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>11<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Maven体验"><a href="#Maven体验" class="headerlink" title="Maven体验"></a>Maven体验</h4><hr><h4 id="Maven标准目录"><a href="#Maven标准目录" class="headerlink" title="Maven标准目录"></a>Maven标准目录</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">|--main</span><br><span class="line">|--java源代码目录</span><br><span class="line">|--resources资源目录</span><br><span class="line"> |--test</span><br><span class="line">|--java测试代码目录</span><br><span class="line">|--resources测试资源目录</span><br><span class="line"> |--target</span><br><span class="line">|--ckasses编译后的class文件目录</span><br><span class="line">|--test-classes编译后的测试class文件目录</span><br><span class="line">pom.xmlMaven工程配置文件</span><br></pre></td></tr></table></figure><h4 id="pom-xml基本内容"><a href="#pom-xml基本内容" class="headerlink" title="pom.xml基本内容"></a>pom.xml基本内容</h4><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建好上述项目结构并配置好maven以及项目pom后，在项目根目录使用如下命令就能利用maven，进行自动的依赖下载，以及项目编译:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/31/KOq2WEoYfb6kAig.png" class="lazyload placeholder" data-srcset="https://i.loli.net/2021/01/31/KOq2WEoYfb6kAig.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="maven编译项目.png"></p><h3 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h3><hr><p>maven生命周期描述了一个项目从源代码到部署的整个周期</p><p>Maven有三个内置的生命周期：</p><ol><li>清理（clean）：为执行一下工作做必要的清理，如删除target文件夹</li><li>默认（default）：真正进行项目编译打包工作的阶段</li><li>站点（site）：生成项目报告，站点，发布站点</li></ol><p>默认生命周期包括以下阶段（该阶段经过简化，实际上更加复杂）：</p><ol><li>验证（validate）：验证项目是否正确，所有必要信息是否可用</li><li><strong>编译</strong>（compile）：编译项目的源代码</li><li>测试（test）：使用合适的单元测试框架测试编译的源代码。这些测试不应该要求代码被打包或部署</li><li><strong>打包</strong>（package）：采用编译的代码，并以其可分配格式（如JAR）进行打包</li><li>验证（verify）：对集成测试的结果执行任何检查，以确保满足质量标砖</li><li><strong>安装</strong>（install）：将软件包安装到本地存储中，用作本地其他项目的依赖项</li><li>部署（deploy）：在构建环境中完成，将最终的包复制到远程存储以与其他开发人员和项目共享（私服）</li></ol><h3 id="Maven的版本规范"><a href="#Maven的版本规范" class="headerlink" title="Maven的版本规范"></a>Maven的版本规范</h3><hr><p>所有软件都有版本</p><p>Maven使用如下几个要素来定位一个项目，因此它们又称为项目的坐标。</p><ol><li><code>groupId</code>：团体、组织的标识符。团体标识的约定量，它以创建这个项目的组织名称的<wavy>,逆向域</wavy>名开头。一般对应着JAVA的包的结构，例如org.apache。</li><li><code>artifactId</code>：单独项目的唯一标识符。比如tomcat，commons等。不要再其中使用<kbd>.</kbd></li><li><code>version</code>：项目版本</li><li><code>packaging</code>：项目的类型，默认是jar，描述了项目打包后的输出，类型为jar的项目产生一个JAR文件，类型为war的项目产生一个web应用。</li></ol><p>Maven在版本管理时可以使用几个特殊的字符串 <code>SNAPSHOT</code>，<code>LARESR</code>，<code>RELEASE</code>。比如“1.0-SNAPSHOT”。各个部分的含义和处理逻辑如下说明：</p><ul><li><code>SNAPSHOT</code> 这个版本一般用于开发过程中，表示不稳定版</li><li><code>LARESR</code> 指某个特定构件的最新发布，这个发布可能是一个发布版，也可能是一个snapshot版，具体看那个时间最后</li><li><code>RELEASE</code> 指最后一个发布版</li></ul><h3 id="Idea配置Maven"><a href="#Idea配置Maven" class="headerlink" title="Idea配置Maven"></a>Idea配置Maven</h3><hr><h4 id="为当前项目配置"><a href="#为当前项目配置" class="headerlink" title="为当前项目配置"></a>为当前项目配置</h4><hr><p>File $\to$ Settings $\to$ 搜索Maven $\to$ <code>Maven home path</code>、<code>User settings file</code>、<code>Local repository</code></p><p>三项分别设置为：</p><ol><li>Maven安装路径</li><li>conf/settings.xml的路径</li><li>repository文件夹的路径</li></ol><h4 id="为未来项目配置"><a href="#为未来项目配置" class="headerlink" title="为未来项目配置"></a>为未来项目配置</h4><hr><p>New Project Settings $\to$ Settings for New Projects… $\to$ 搜索Maven $\to$ <code>Maven home path</code>、<code>User settings file</code>、<code>Local repository</code></p><p>配置同上</p><h3 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h3><hr><blockquote><p>Maven管理依赖也就是jar包不用我们自己下载，会从一些地方自动下载</p></blockquote><div class="tag link"><a class="link-card" title="maven远程仓库" href="https://mvnrepository.com/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">maven远程仓库</p><p class="url">https://mvnrepository.com/</p></div></a></div><div class="tag link"><a class="link-card" title="maven远程仓库" href="https://maven.aliyun.com/mvn/search"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">maven远程仓库</p><p class="url">https://maven.aliyun.com/mvn/search</p></div></a></div><blockquote><p>Maven 工程中我们依赖在pom.xml文件进行配置完成jar包管理工作（依赖）</p></blockquote><p>在工程中引入某个jar包，只需要在pom.xml中引入jar包的坐标，比如引入log4j的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Maven</code>通过<code>groupId</code>、<code>artifactId</code>与<code>version</code>三个向量来定位Maven仓库其jar包所在的位置，并把对应的jar包引入到工程中来</p><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><hr><h5 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h5><hr><p>编译好的<code>class</code>文件所在的路径</p><p>事实上，类加载器（<code>classloader</code>）就是去对应的<code>classpath</code>中加载<code>class</code>二进制文件</p><h5 id="maven项目"><a href="#maven项目" class="headerlink" title="maven项目"></a>maven项目</h5><hr><p>maven工程会将<code>src/main/java</code>和<code>src/main/recources</code>文件夹下的文件全部打包在classpath中。运行时它们两个文件夹下的文件会被放在一个文件夹下。</p><p>maven项目不同的阶段引入到classpath中的依赖是不同的例如</p><ol><li><code>编译时</code>，maven会将与编译相关的依赖引入classpath中</li><li><code>测试时</code>，maven会将与测试相关的依赖引入classpath中</li><li><code>运行时</code>，maven会将与运行相关的依赖引入classpath中</li></ol><p>而依赖范围就是用来控制依赖于这三种classpath的关系</p><h5 id="scop标签"><a href="#scop标签" class="headerlink" title="scop标签"></a>scop标签</h5><hr><p>scop标签就是依赖范围的配置</p><p>该项默认配置为compile，可选配置还有test、provide、runtime、system、import</p><p>其中compile、test和provided使用较多</p><p>部分jar包指在某一特定时候需要被加载，例如：</p><ol><li><code>servlet-api</code>，运行时其实是不需要的，因为tomcat里有，但编译时需要，因为编译时没有tomcat环境</li><li><code>junit</code>，只有在测试的时候才能用到，运行时不需要</li><li><code>JDBC</code>，测试时必须要有，编译时不需要，编译时用的都是jdk中的接口，运行时我们才使用反射注册驱动</li></ol><h6 id="编译依赖范围（compile）"><a href="#编译依赖范围（compile）" class="headerlink" title="编译依赖范围（compile）"></a>编译依赖范围（compile）</h6><hr><p>该范围是默认范围，次依赖范围对于编译、测试、运行三种<code>classpath</code>都有效如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="测试依赖范围（test）"><a href="#测试依赖范围（test）" class="headerlink" title="测试依赖范围（test）"></a>测试依赖范围（test）</h6><hr><p>指对测试classpath有效，编译运行时都无法使用依赖，如junit</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scop</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="已提供依赖范围（provided）"><a href="#已提供依赖范围（provided）" class="headerlink" title="已提供依赖范围（provided）"></a>已提供依赖范围（provided）</h6><hr><p>支队编译和测试的classpath有效，对运行的classpath无效，如<code>servlet-api</code>，如果不设置依赖范围，当容器依赖的版本和maven依赖的版本不一致时会引起冲突</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scop</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="运行时依赖范围（runtime）"><a href="#运行时依赖范围（runtime）" class="headerlink" title="运行时依赖范围（runtime）"></a>运行时依赖范围（runtime）</h6><hr><p>只对测试和运行的classpath有效，对编译的classpath无效，如<code>JDBC</code>驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connection-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scop</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><hr><p>jar包也是别人写的工程项目，她们也会依赖其他的jar包，传递性让我们可以不用关心我们所依赖的jar包依赖了哪些jar，只要我们添加了依赖，他会自动将所依赖的jar统统依赖进来</p><h5 id="依赖传递原则"><a href="#依赖传递原则" class="headerlink" title="依赖传递原则"></a>依赖传递原则</h5><hr><ul><li><strong>最短路径优先原则</strong>：如果A依赖了B，B依赖了C，在B和C    中同时依赖了log4j的依赖，并且这两个版本不一致，那么A会根据最短路径原则，在A中会传递过来B的log4j版本</li></ul><p><img src="https://i.loli.net/2021/01/31/guFL2vx59BshnpQ.png" class="lazyload placeholder" data-srcset="https://i.loli.net/2021/01/31/guFL2vx59BshnpQ.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="最短路依赖.png"></p><ul><li><strong>路径相同先声明原则</strong>：如果我们的工程同时依赖于B和A，B和C没有依赖关系，并且都有D的依赖，且版本不一致，那么会引入在pom.xml中先声明依赖的log4j版本。</li></ul><p><img src="https://i.loli.net/2021/01/31/uwW7VnLve8J3ZlI.png" class="lazyload placeholder" data-srcset="https://i.loli.net/2021/01/31/uwW7VnLve8J3ZlI.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="路径相同先声明.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ender<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ender<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为D的1.2.3版本的依赖关系优先得到确定，所以依赖D的1.2.3，因此如果A包中使用了D1.3.2的某些新特性，可能造成A包无法使用的问题，于是就需要把低版本排除，一般高版本会兼容低版本</p><h4 id="依赖的排除"><a href="#依赖的排除" class="headerlink" title="依赖的排除"></a>依赖的排除</h4><hr><p>对于上例中，我们如果想把低版本的D包排除，就可以做如下设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ender<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.ender<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>D<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ender<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h3><hr><p>分布式项目必须使用到该功能</p><p><strong>聚合模块（父模块）</strong>的打包方式必须时pom，否则无法完成构建</p><p>在聚合多个项目时，如果这些聚合的项目中需要引入相同的jar，那么可以将这些jar写入父pom中，各个子项目集成该pom即可。父模块的打包方式必须为pom，否则无法构建项目</p><p>通过修改pom.xml来表明继承关系：</p><p>父模块pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    子模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>child-one<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    打包方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子模块POM：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    依赖关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>child-one<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可被继承的POM元素如下：</p><ol><li>groupId:项目子ID，项目坐标的核心元素</li><li>version:项目版本，项目坐标的核心元素</li><li>properties：自定义的Maven属性，一般用于统一制定各个依赖的版本好</li><li>dependencies</li><li>dependencyManagement：项目依赖管理配置</li><li>repositories</li><li>build：包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</li></ol><h4 id="实现父子工程统一版本管理"><a href="#实现父子工程统一版本管理" class="headerlink" title="实现父子工程统一版本管理"></a>实现父子工程统一版本管理</h4><hr><p>对于一个父子嵌套的工程，当我们要对所有子工程进行统一管理时，常常需要所有子工程使用统一的插件版本，我们可能会使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的方式在父工程的pom中配置，但是这样在打包时，子工程无论用没用到这个插件，都会将其打包进该工程中，因此我们需要使用别的方法进行版本管理：</p><p>首先在父工程的pom中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义常量进行统一版本管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fastjson-version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">fastjson-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 此处引用的插件在子工程中服务立马生效，只有当子工程声明使用该插件时才能生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependenciesManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependenciesManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子工程pom中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子工程中声明时不需要声明版本号，将自动从父工程中的插件里得到版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="POM文件"><a href="#POM文件" class="headerlink" title="POM文件"></a>POM文件</h3><hr><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><hr><p>一个典型的pom.xml文件配置如下：</p><details ><summary> 点击查看配置 </summary>              <div class='content'>              <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span> = <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.companyname.project-group<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 打包机制,如pom、jar、war，默认为jar--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为pom定义一些商量，在pom中的其他地方可以直接引用 使用方式如下：$&#123;file.encoding&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 常用来整体控制一些依赖的版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.source.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.source.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.target.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.target.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 定义本项目的依赖关系，就是依赖的jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每个dependency都对应一个jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 一般情况下，maven是通过groupId、artifactId、version三个元素指（俗称坐标）来检索该构件，然后引入你的工程。如果别人想引用你现在开发的这个目录（前提是已开发完毕并发布到了远程仓库） --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 就需要在她的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入，maven就会把你上传的jar包下载到她的本地 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 依赖范围 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scop</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scop</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置 依赖是否可选，默认为false，即子项目默认都继承，如果为true，则子项目必须显式的引入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>false<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 排除依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>一般来说，上面的几个配置项对任何项目都是必不可少的，定义了项目的基本属性</p><h4 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h4><hr><details ><summary> 点击查看配置 </summary>              <div class='content'>              <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 产生的构建的文件名，默认值为$&#123;artifactId&#125;-$&#123;version&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>myProjectName<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建产生的所有文件存放发目录，默认为$&#123;basedir&#125;/target,即项目根目录下的target --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目源码目录，当构建项目的时候，构建系统会编译目录里的源码，该路径是相对于pom.xml的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;\src\main\java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码，该路径是相对于pom.xml的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>$&#123;basedir&#125;\src\test\java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;\target\classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>$&#123;basedir&#125;\target\test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以上配置遵循约定大于配置原则，一般使用默认配置 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 自行定义资源目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 单元测试相关的所有资源路径，配置方法于resources类似 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用的插件列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            ...具体在插件使用中了解</span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 主要定义插件的共同元素、拓展元素集合，类似于dependencyManagement --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所有继承于次项目的子项目都能使用。该插件配置项直到被引用时才会被解析或绑定到生命周期。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>...<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><h6 id="常用的几个配置"><a href="#常用的几个配置" class="headerlink" title="常用的几个配置"></a>常用的几个配置</h6><hr><p>处理资源被过滤的问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">inlcudes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加本地jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- geelynote maven的核心插件-compiler插件默认只支持编译Java1.4，因此需要加上支持高版本jre的配置，在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 本地jar，支付宝jar包放到 src/main/webapp/WEB-INF/lib 文件夹下，如果没有配置，本地不会有问题，但线上会找不到sdk类，为什么要引入，因为支付宝jar包在中央仓库中没有，再比如oracle连接驱动的jar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>$&#123;project.basedir&#125;/src/main/webapp/WEB-INF/lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h4><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repossitory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snaphosts</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snaphosts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repossitory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml中的仓库和setting.xml里的仓库功能一样，区别在于pom里配置的仓库时个性化的，比如，公司里的settings文件时公用的，若有项目都用一个settings文件，但各个子项目却会引用不同的第三方库，所以需要正在pom.xml里设置自己需要的仓库地址。</p><h4 id="项目信息配置（了解）"><a href="#项目信息配置（了解）" class="headerlink" title="项目信息配置（了解）"></a>项目信息配置（了解）</h4><hr><details ><summary> 点击查看配置 </summary>              <div class='content'>              <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--项目的名称, Maven产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 </span></span><br><span class="line"><span class="comment">        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--问题管理系统（例如jira）的名字， --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目持续集成信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--传送通知的途径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发生错误时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建失败时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建成功时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发生警告时是否通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">address</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--扩展配置项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目相关邮件列表信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--邮件的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">post</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目开发者列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--某个项目开发者的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者的全名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者的email --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者的主页的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者所属组织 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者所属组织的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目的其他贡献者列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">email</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organization</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">roles</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--license用于法律上的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--官方的license正文页面的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关于license的补充信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span></span><br><span class="line">        scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</span><br><span class="line">    <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组织的全名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组织主页的URL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--构建项目需要的信息 --&gt;</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>其他配置信息参照：</p><div class="tag link"><a class="link-card" title="Maven POM教程" href="https://www.runoob.com/maven/maven-pom.html"><div class="left"><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-org/logo/256/safari.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></div><div class="right"><p class="text">Maven POM教程</p><p class="url">https://www.runoob.com/maven/maven-pom.html</p></div></a></div><h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><hr><p>任何一个构件都有唯一坐标，Maven根据这个坐标定位了构件在仓库中的唯一存储路径</p><p>Maven仓库分类两类：</p><ol><li>本地仓库</li><li>远程仓库，远程仓库分为三种：<ol><li>中央仓库</li><li>私服</li><li>其他公共仓库 </li></ol></li></ol><h4 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h4><hr><p>本地仓库时Maven在本地存储构建的地方，在安装Maven时不会被创建，在第一次执行Maven命令时才被创建</p><p>Maven本地仓库的默认位置：用户目录下的.m2/repository/</p><p>还可在conf/settings.xml中修改本地库的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库的路径，默认值为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/myworkspace/Maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><hr><p>用于获取其他人的Maven构件</p><h5 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h5><hr><p>默认的远程仓库，Maven在安装时，自带的就是中央仓库的配置</p><p>所有的Maven都议会继承超级POM，超级POM中包含如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Cntral Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo.maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>中央仓库包含了绝大多数流行的开源Java构件，以及源码，作者信息，SCM，信息，许可信息等</p><p>还可以在里面配置优先使用的镜像，比如在国内直接连接中央仓库较慢，一般使用阿里的镜像</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 镜像列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 被镜像的服务器ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h5><hr><p>私服时一种特殊的远程仓库，它时架设在局域网的仓库服务，私服代理广域网上的远程仓库，供局域网的Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存在该构件，则从外部的远程仓库中下载，缓存在私服上之后，再为Maven的下载请求提供服务</p><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><hr><ol><li>加速构建</li><li>节约带宽</li><li>节约中央Maven仓库的带宽</li><li>稳定（应对一旦中央服务器出问题的情况）</li><li>可以建立本地内部仓库</li><li>可以建立公共仓库</li></ol><p>如果没有特殊需求，一般只需要将私服地址配置为镜像，同时配置其代理所有的仓库就可以实现通过私服下载依赖的功能。镜像配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Nexus Mirror<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Mirror<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用Docker搭建Nexus私服，私服可以有用户名和密码，可以在settings.xml中配置</p><h3 id="Maven项目模板（了解）"><a href="#Maven项目模板（了解）" class="headerlink" title="Maven项目模板（了解）"></a>Maven项目模板（了解）</h3><hr><p>Archetype时一个Maven插件，其任务是按照其模板来创建一个项目结构。</p><p>执行如下命令即可创建Maven项目模板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate</span><br></pre></td></tr></table></figure><p>常用archetype有两种：</p><ol><li>maven-archetype-quickstart默认的Archetype</li><li>maven-archetype-webapp</li></ol><p>创建webapp可以使用如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DgroupId=com.ender -DartifactId=seckill -DarchetypeArtifactId=maven-archetype-webapp</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;java工具——包管理工具Maven&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://enderxiao.top/categories/Java/"/>
    
    <category term="Maven" scheme="http://enderxiao.top/categories/Java/Maven/"/>
    
    
    <category term="Java" scheme="http://enderxiao.top/tags/Java/"/>
    
    <category term="Maven" scheme="http://enderxiao.top/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>java反射</title>
    <link href="http://enderxiao.top/Java/%E5%8F%8D%E5%B0%84/java%E5%8F%8D%E5%B0%84/"/>
    <id>http://enderxiao.top/Java/%E5%8F%8D%E5%B0%84/java%E5%8F%8D%E5%B0%84/</id>
    <published>2021-01-28T02:53:11.000Z</published>
    <updated>2021-08-05T23:38:44.769Z</updated>
    
    <content type="html"><![CDATA[<p>java学习笔记，反射及其引用</p><a id="more"></a><h2 id="Java高级——反射"><a href="#Java高级——反射" class="headerlink" title="Java高级——反射"></a>Java高级——反射</h2><h3 id="反射入门"><a href="#反射入门" class="headerlink" title="反射入门"></a>反射入门</h3><hr><p>java反射机制是在<wavy>运行状态中</wavy>，对于任意一个类，都能知道这个类的所有属性和方法，对于任意一个对象，都能调用它的一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</p><p>java反射机制主要提供了一下功能：</p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断一个类所具有的成员变量和方法；</li><li>在运行时调用任意一个对象的方法；</li><li>生成动态代理；</li></ol><h3 id="反射API"><a href="#反射API" class="headerlink" title="反射API"></a>反射API</h3><hr><p>我们写的所有类，都会被<code>appclassloader</code>加载到内存的方法区，生成一个Class类型的对象（万物皆对象(～￣▽￣)～），他们是我们写的class，同时也涉及<code>Class</code>实列。也叫说明书的说明书</p><p>Class叫说明书的说明书，告诉了我们怎么写说明书，比如可以有方法、属性等等</p><p>我们的class都是说明书，说明了某类对象所具有的方法和属性</p><p>Java反射需要的类主要有：</p><ol><li><code>java.lang.Class</code></li><li><code>java.lang.reflect</code>包中的<ol><li><code>Field</code></li><li><code>Constructor</code></li><li><code>Method</code></li><li><code>Annotation</code></li></ol></li></ol><div class="note warning yellow"><p>Class类是Java反射的起源，针对任何一个你想探测的类，只有先产生它的一个<code>Class</code>类对象，接下来才能通过Class对象获取其他想要的信息</p></div><h4 id="获取对象的方法"><a href="#获取对象的方法" class="headerlink" title="获取对象的方法"></a>获取对象的方法</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用类</span></span><br><span class="line">Class cla = Dog.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用全类名</span></span><br><span class="line">Class aClass = Class.forName(<span class="string">&quot;com.ender.Day&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用对象</span></span><br><span class="line">Cat cat = <span class="keyword">new</span> cat();</span><br><span class="line">Class cla = cat.getClass();</span><br></pre></td></tr></table></figure><h4 id="操作字段"><a href="#操作字段" class="headerlink" title="操作字段"></a>操作字段</h4><hr><h5 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能获取到用public修饰的字段</span></span><br><span class="line">Field[] fields = animalClass.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">System.out.println(field.getName());</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//能获取到所有被声明了的字段</span></span><br><span class="line">Field[] fields1 = animalClass.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">System.out.println(field.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字段赋值"><a href="#字段赋值" class="headerlink" title="字段赋值"></a>字段赋值</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">field.set(animal, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">System.out.println(field.get(animal));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Field field = animalClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);<span class="comment">//当在要操作类的文件夹之外的地方对私有字段注入值时，需要开启权限</span></span><br><span class="line">field.set(animal,<span class="number">12</span>);</span><br><span class="line">System.out.println(field.get(animal));</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><hr><h4 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Method eat1 = animalClass.getMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">Method eat2 = animalClass.getDeclaredMethod(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">Method eat = animalClass.getMethod(<span class="string">&quot;eat&quot;</span>,String.class,<span class="keyword">int</span>.class);<span class="comment">//对于有参数的方法，需要如此获取，每个参数需要传入类型</span></span><br><span class="line"></span><br><span class="line">Method methods[] = animalClass.getDeclaredMethods();</span><br></pre></td></tr></table></figure><h5 id="对方法的操作"><a href="#对方法的操作" class="headerlink" title="对方法的操作"></a>对方法的操作</h5><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.setName(<span class="string">&quot;ZhangSan&quot;</span>);</span><br><span class="line">animal.setAge(<span class="number">20</span>);</span><br><span class="line">Class&lt;Animal&gt; animalClass = Animal.class;</span><br><span class="line"><span class="comment">//获取某个方法，名字，后边是参数类型</span></span><br><span class="line">Method method = animalClass.getMethod(<span class="string">&quot;eat&quot;</span>,String.class,<span class="keyword">int</span>.class);</span><br><span class="line"><span class="comment">//拿到参数的个数</span></span><br><span class="line"><span class="keyword">int</span> parameterCount = method.getParameterCount();</span><br><span class="line"><span class="comment">//拿到方法名字</span></span><br><span class="line">String name = method.getName();</span><br><span class="line"><span class="comment">//拿到参数的类型数组</span></span><br><span class="line">Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line"><span class="comment">//拿到返回值类型</span></span><br><span class="line">Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line"><span class="comment">//重点。反射调用方法，传一个实列，和参数</span></span><br><span class="line">method.invoke(animal,<span class="string">&quot;LiSi&quot;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class animalClass = Class.forName(<span class="string">&quot;com.ender.Animal&quot;</span>);</span><br><span class="line">Constructor&lt;Animal&gt; constructor = animalClass.getConstructor();</span><br><span class="line">Animal animal = constructor.newInstance();</span><br><span class="line">animal.eat();</span><br></pre></td></tr></table></figure><h5 id="反射与注释"><a href="#反射与注释" class="headerlink" title="反射与注释"></a>反射与注释</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">Class&lt;Animal&gt; animalClass = Animal.class;</span><br><span class="line">A aannotation = animalClass.getAnnotation(A.class);<span class="comment">//通过类获取该类的注释</span></span><br><span class="line">Field name = animalClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name.setAccessible(<span class="keyword">true</span>);<span class="comment">//若该字段为私有，则需要以此设置访问权限，使得能够访问该字段的值</span></span><br><span class="line">Name nameAnnotion = name.getAnnotation(Name.class);<span class="comment">//通过某个字段获取该字段的注释</span></span><br><span class="line">String fullName = nameAnnotion.name();<span class="comment">//获取注释中的元素值</span></span><br><span class="line">name.set(animal,fullName);</span><br><span class="line">System.out.println(name.get(animal));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;java学习笔记，反射及其引用&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="http://enderxiao.top/categories/Java/"/>
    
    <category term="反射" scheme="http://enderxiao.top/categories/Java/%E5%8F%8D%E5%B0%84/"/>
    
    
    <category term="Java" scheme="http://enderxiao.top/tags/Java/"/>
    
    <category term="Java反射" scheme="http://enderxiao.top/tags/Java%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
</feed>
